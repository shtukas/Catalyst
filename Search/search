#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CoreData.rb"
=begin

    CoreDataFile::copyFileToRepository(filepath)
    CoreDataFile::filenameToFilepath(filename)
    CoreDataFile::exists?(filename)
    CoreDataFile::openOrCopyToDesktop(filename)

    CoreDataDirectory::copyFolderToRepository(folderpath)
    CoreDataDirectory::foldernameToFolderpath(foldername)
    CoreDataDirectory::openFolder(foldername)

=end

# --------------------------------------------------------------------

def visitSearchResult(searchResult)
    # {"subsystem"=>"Nyx", "description"=>"Pascal on naming things", "uniqueId"=>"pointuuid:f270920f-9426-4710-8a24-6ba02e0bccbd"}
    if searchResult["subsystem"] == "Nyx" then
        system("/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Nyx/x-search-entity-visit #{searchResult["uniqueId"]}")
        return
    end
    raise "I do not know how to contact subsystem #{searchResult["subsystem"]}"
end

loop {
    tostring = lambda {|searchResult|
        # {"subsystem"=>"Nyx", "description"=>"Pascal on naming things", "uniqueId"=>"pointuuid:f270920f-9426-4710-8a24-6ba02e0bccbd"}
        "[#{searchResult["subsystem"]}] #{searchResult["description"]}"
    }

    pattern = LucilleCore::askQuestionAnswerAsString("search pattern: ")
    break if pattern == ""
    searchResults = JSON.parse(`/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Nyx/x-search #{pattern}`)
    result = LucilleCore::selectEntityFromListOfEntitiesOrNull("result", searchResults, tostring)
    break if result.nil?
    visitSearchResult(result)
    LucilleCore::pressEnterToContinue()
}

exit


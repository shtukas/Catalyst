#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/BTreeSets.rb"
=begin
    BTreeSets::values(repositorylocation or nil, setuuid: String): Array[Value]
    BTreeSets::set(repositorylocation or nil, setuuid: String, valueuuid: String, value)
    BTreeSets::getOrNull(repositorylocation or nil, setuuid: String, valueuuid: String): nil | Value
    BTreeSets::destroy(repositorylocation, setuuid: String, valueuuid: String)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Quark.rb"

# -------------------------------------------------------------------------

def arrowToCatalystObjectOrNull(arrow)
    uuid = arrow["uuid"]
    contentItem = {
        "type" => "line",
        "line" => "[arrow] #{arrow["description"]}"
    }
    metric = 0.20 + 0.80*((Time.new.to_i - arrow["startunixtime"]).to_f/86400).to_f/(0.90*arrow["lengthInDays"])
    {
        "uuid" => uuid,
        "application" => "Arrows",
        "contentItem" => contentItem,
        "metric" => metric,
        "commands" => [arrow["quarkuuid"] ? "open" : nil, "done"].compact,
        "shell-redirects" => {
            "open" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Arrows/x-catalyst-objects-processing open '#{uuid}'",
            "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Arrows/x-catalyst-objects-processing done '#{uuid}'",
        }
    }
end

objects = BTreeSets::values("/Users/pascal/Galaxy/DataBank/Catalyst/Arrows", "")
            .map{|arrow| arrowToCatalystObjectOrNull(arrow) }
            .compact

puts JSON.generate(objects)

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "Waves.rb"

# -------------------------------------------------------------------------

puts "Waves ðŸŒŠ"
loop {
    options = [
        "new wave",
        "waves dive"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("option", options)
    break if option.nil?
    if option == "new wave" then
        line = LucilleCore::askQuestionAnswerAsString("line: ")
        schedule = Waves::makeScheduleObjectInteractivelyOrNull()
        next if schedule.nil?
        Waves::issueWaves(LucilleCore::timeStringL22(), line, schedule)
    end
    if option == "waves dive" then
        obj = LucilleCore::selectEntityFromListOfEntitiesOrNull("wave", Waves::waves(), lambda {|wave| wave["description"] })
        next if obj.nil?
        ops = ["edit description", "recast"]
        op = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", ops)
        next if op.nil?
        if op == "edit description" then
            obj["description"] = CatalystCommon::editTextUsingTextmate(obj["description"])
            DataNetwork::commitToDisk(obj)
        end
        if op == "recast" then
            schedule = Waves::makeScheduleObjectInteractivelyOrNull()
            next if schedule.nil?
            obj["schedule"] = schedule
            DataNetwork::commitToDisk(obj)
        end
    end
}

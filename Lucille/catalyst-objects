#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "Lucille.rb"

# -------------------------------------------------------------------------

LucilleThisCore::ensureStandardFilenames()

# -------------------------------------------------------------------------

class MetricHelper
    def initialize()
        @counter = 0
    end
    def metric(base)
        @counter = @counter + 1
        base - @counter.to_f/10000
    end
end

def makeContentItem(location, timeline)
    # We have the two special timelines [Inbox] and [Infinity]
    timelinefragment = timeline[0, 1] == "[" ? timeline : "(#{timeline})"
    isifcsAsString = InFlightControlSystem::isRegistered(location) ? " [#{"ifcs".yellow}]" : ""
    runTime = InFlightControlSystem::runTimeInSecondsOrNull(location)
    runTimeAsString = runTime ? " (running for #{runTime.to_s} seconds)" : "" 
    if location[-4, 4] == ".txt" then
        return {
            "type" => "line-and-body",
            "line" => "[lucille]#{isifcsAsString}#{runTimeAsString} #{timelinefragment} #{LucilleThisCore::getBestDescription(location)}",
            "body" => "[lucille]#{isifcsAsString}#{runTimeAsString} #{timelinefragment} #{(IO.read(location).strip.lines.to_a.size > 1 ? "\n" : "")}#{IO.read(location).strip}"
        }
    end
    {
        "type" => "line",
        "line" => "[lucille]#{isifcsAsString}#{runTimeAsString} #{timelinefragment} #{LucilleThisCore::getBestDescription(location)}"
    }
end

def makeMetric(location, metricHelper, isRunning, timeline)
    metric = InFlightControlSystem::metricOrNull(location)
    return metric if metric
    if isRunning then
        return 1
    end
    if timeline == "[Inbox]" then
        return metricHelper.metric(0.72) # Lucille 'Inbox'
    end
    metricHelper.metric(0.4) # Lucille (cluster)
end

def makeCommands(location, timeline)
    runCommands = InFlightControlSystem::isRegistered(location) ? ["start", "stop"] : []
    runCommands + ["open", "done", "set-description", "export-to-desktop", "recast", ">ifcs", ">lucille-other", ">nyx"]
end

def shouldOpenAndDone(location)
    str1 = "vienna-url.txt"
    return true if location[-str1.size, str1.size] == str1
    false
end

def makeDefaultCommand(location, isRunning, timeline)
    if InFlightControlSystem::isRegistered(location) then
        return ( isRunning ? "stop" : "start+open" )
    end
    shouldOpenAndDone(location) ? "open+done" : "open"
end

# -------------------------------------------------------------------------

metricHelper = MetricHelper.new()
cluster = LXCluster::getWorkingCluster()
displayLocations = (LucilleThisCore::getTimelineLocations("[Inbox]") + cluster["computed"]["locationsForDisplay"]).uniq

objects = displayLocations
            .select{|location| DoNotShowUntil::isVisible(location) }
            .map{|location|
                timeline = LucilleThisCore::getLocationTimeline(location)
                uuid = Digest::SHA1.hexdigest(location)
                isRunning = InFlightControlSystem::isRunning(location)
                {
                    "uuid"            => uuid,
                    "contentItem"     => makeContentItem(location, timeline),
                    "metric"          => makeMetric(location, metricHelper, isRunning, timeline),
                    "commands"        => makeCommands(location, timeline),
                    "isRunning"       => isRunning,
                    "defaultCommand"  => makeDefaultCommand(location, isRunning, timeline),
                    "shell-redirects" => {
                        "start"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing start '#{location}'",
                        "stop"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing stop '#{location}'",
                        "open"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing open '#{location}'",
                        "set-description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing set-description '#{location}'",
                        "recast" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing recast '#{location}'",
                        ">nyx" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing move-to-nyx '#{location}'",
                        "done"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing done '#{location}'",
                        "export-to-desktop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing export-to-desktop '#{location}'",
                        ">lucille-other" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing merge-with-other-Lucille-location '#{location}'",
                        ">ifcs" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing throttle '#{location}'"
                    },
                    "location"        => location
                }
            }

puts JSON.generate(objects)

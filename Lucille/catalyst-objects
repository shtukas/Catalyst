#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/Mercury.rb"
=begin
    Mercury::postValue(channel, value)
    Mercury::dequeueFirstValueOrNull(channel)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/Aether.rb"
=begin
    AetherGenesys::makeNewPoint(filepath)
    AetherKVStore::set(filepath, key, value)
    AetherKVStore::getOrNull(filepath, key)
    AetherKVStore::keys(filepath)
    AetherKVStore::destroy(filepath, key)
    AetherAionOperations::importLocationAgainstReference(filepath, xreference, location)
    AetherAionOperations::exportReferenceAtFolder(filepath, xreference, targetReconstructionFolderpath)
=end

require_relative "Lucille.rb"

# -------------------------------------------------------------------------

def makeMetric(uuid, indx, isRunning, timeline)
    if isRunning then
        return 1
    end

    getDayCachedOrComputedAndCacheMetric = lambda {|uuid, computedmetric|
        storedmetric = KeyValueStore::getOrNull(nil, "#{Time.new.to_s[0, 10]}:4298a5d7-d24c-4716-b988-eec8d06ccde1:#{uuid}")
        if storedmetric then
            return storedmetric.to_f
        end
        KeyValueStore::set(nil, "#{Time.new.to_s[0, 10]}:4298a5d7-d24c-4716-b988-eec8d06ccde1:#{uuid}", computedmetric)
        computedmetric
    }

    if timeline == "[Inbox]" then
        return getDayCachedOrComputedAndCacheMetric.call(uuid, 0.72 - indx.to_f/1000 )
    end

    return getDayCachedOrComputedAndCacheMetric.call(uuid, 0.40 - indx.to_f/1000 )
end

def makeCommands(uuid, timeline)
    runCommands = InFlightControlSystem::isRegistered(uuid) ? ["start", "stop"] : []
    runCommands + ["open", "done", "set-description", "export-to-desktop", "recast", ">ifcs", ">lucille-other", ">nyx"]
end

# -------------------------------------------------------------------------

while (text = Mercury::dequeueFirstValueOrNull("AF39EC62-4779-4C00-85D9-D2F19BD2D71E")) do
    text = text.strip
    LucilleThisCore::newItemPayloadText(text.lines.first.strip, "[Inbox]", text)
end

while (url = Mercury::dequeueFirstValueOrNull("F771D7FE-1802-409D-B009-5EB95BA89D86")) do
    url = url.strip
    LucilleThisCore::newItemPayloadUrl(url, "[Inbox]", url)
end

# -------------------------------------------------------------------------

objects = (LucilleThisCore::getTimelineUUIDs("[Inbox]") + LXCluster::getWorkingCluster()["uuids"])
            .map
            .with_index{|uuid, indx|
                timeline = LucilleThisCore::getItemTimeline(uuid)
                isRunning = InFlightControlSystem::isRunning(uuid)
                description = LucilleThisCore::getDescription(uuid)
                object = {
                    "uuid"            => uuid,
                    "contentItem"     => {
                        "type" => "line",
                        "line" => "[lucille] [#{timeline}] [#{LucilleThisCore::getPayloadType(uuid)}] #{description}"
                    },
                    "metric"          => makeMetric(uuid, indx, isRunning, timeline),
                    "commands"        => makeCommands(uuid, timeline),
                    "isRunning"       => isRunning,
                    "defaultCommand"  => InFlightControlSystem::isRegistered(uuid) ? (isRunning ? "stop" : "start") : "open",
                    "shell-redirects" => {
                        "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing start '#{uuid}'",
                        "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing stop '#{uuid}'",
                        "open" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing open '#{uuid}'",
                        "set-description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing set-description '#{uuid}'",
                        "recast" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing recast '#{uuid}'",
                        ">nyx" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing move-to-nyx '#{uuid}'",
                        "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing done '#{uuid}'",
                        ">ifcs" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing throttle '#{uuid}'"
                    }
                }
                InFlightControlSystem::catalistItemIFCSTransmutation(uuid, object)
            }

puts JSON.generate(objects)

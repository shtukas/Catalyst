#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/Aether.rb"
=begin
    AetherGenesys::makeNewPoint(filepath)
    AetherKVStore::set(filepath, key, value)
    AetherKVStore::getOrNull(filepath, key)
    AetherKVStore::keys(filepath)
    AetherKVStore::destroy(filepath, key)
    AetherAionOperations::importLocationAgainstReference(filepath, xreference, location)
    AetherAionOperations::exportReferenceAtFolder(filepath, xreference, targetReconstructionFolderpath)
=end

require_relative "../Catalyst-Common/TheCacheWithLambdas.rb"

require_relative "Lucille.rb"

# -------------------------------------------------------------------------

while (packet = Mercury::getFirstValueOrNull("AF39EC62-4779-4C00-85D9-D2F19BD2D71E")) do
    text = packet["text"]
    timeline = packet["timeline"]
    LucilleThisCore::newItemPayloadText(text.lines.first.strip, timeline, text)
    TheCacheWithLambdas::invalidate("FC36D82E-77E2-4B2C-B3A7-23BDC7A7C441")
    Mercury::deleteFirstValue("AF39EC62-4779-4C00-85D9-D2F19BD2D71E")
end

while (url = Mercury::getFirstValueOrNull("F771D7FE-1802-409D-B009-5EB95BA89D86")) do
    url = url.strip
    LucilleThisCore::newItemPayloadUrl(url, "Inbox", url)
    TheCacheWithLambdas::invalidate("FC36D82E-77E2-4B2C-B3A7-23BDC7A7C441")
    Mercury::deleteFirstValue("F771D7FE-1802-409D-B009-5EB95BA89D86")
end

getNextLocationAtTheInboxOrNull = lambda {
    Dir.entries("/Users/pascal/Desktop/Lucille-Inbox")
        .reject{|filename| filename[0, 1] == '.' }
        .map{|filename| "/Users/pascal/Desktop/Lucille-Inbox/#{filename}" }
        .first
}

while (location = getNextLocationAtTheInboxOrNull.call()) do
    LucilleThisCore::newItemPayloadAionpoint(File.basename(location), "Inbox", location)
    LucilleCore::removeFileSystemLocation(location)
    TheCacheWithLambdas::invalidate("FC36D82E-77E2-4B2C-B3A7-23BDC7A7C441")
end

# -------------------------------------------------------------------------

def makeMetric(uuid, indx, timeline)
    if timeline == "Inbox" then
        return 0.72 - indx.to_f/10000
    end
    0.40 - indx.to_f/10000
end

def makeCommands(uuid, timeline)
    ["open", "edit", "done", "set-description", "recast", ">ifcs", ">lucille-other", ">nyx"]
end

def makeDefaultCommand(contentItem)
    if [".gov", ".com"].any?{|fragment| contentItem["line"].include?(fragment) } then
        return "open+done"
    end
    "open"
end

# -------------------------------------------------------------------------

def makeCatalystObjects()
    (LucilleThisCore::getTimelineUUIDs("Inbox") + LXCluster::getWorkingCluster()["uuids"])
        .map
        .with_index{|uuid, indx|
            timeline = LucilleThisCore::getItemTimeline(uuid)
            description = LucilleThisCore::getDescription(uuid)
            contentItem = {
                "type" => "line",
                "line" => "[lucille] [#{timeline}] [#{LucilleThisCore::getPayloadType(uuid)}] #{description}"
            }
            object = {
                "uuid"            => uuid,
                "contentItem"     => contentItem,
                "metric"          => makeMetric(uuid, indx, timeline),
                "commands"        => makeCommands(uuid, timeline),
                "defaultCommand"  => makeDefaultCommand(contentItem),
                "shell-redirects" => {
                    "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing start '#{uuid}'",
                    "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing stop '#{uuid}'",
                    "open" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing open '#{uuid}'",
                    "open+done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing open+done '#{uuid}'",
                    "edit" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing edit '#{uuid}'",
                    "set-description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing set-description '#{uuid}'",
                    "recast" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing recast '#{uuid}'",
                    ">nyx" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing to-nyx '#{uuid}'",
                    "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing done '#{uuid}'",
                    ">ifcs" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/catalyst-objects-processing to-ifcs '#{uuid}'"
                }
            }
        }
end

objects = TheCacheWithLambdas::get("FC36D82E-77E2-4B2C-B3A7-23BDC7A7C441", lambda { makeCatalystObjects() }, 3600)

# -----------------------------------------------------------------------
# mark: be89bcf6-3bae-4872-ad1b-ea882aceddda
# We are no longer invalidating the cache after having 'done' an object, 
# therefore the cached data could have
# objects which are no longer valid. We filter them out.
objects = objects.select{|object| LucilleThisCore::isCurrentUUID(object["uuid"]) }
# -----------------------------------------------------------------------

puts JSON.generate(objects)

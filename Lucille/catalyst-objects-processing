#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

# --------------------------------------------------------------------

require_relative "Lucille.rb"

# -----------------------------------------------------------------------------

if ARGV[0] == "start" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    LXRunManagement::startLocation(location)
end

if ARGV[0] == "stop" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    timespan = LXRunManagement::stopLocation(location)
    LXCluster::processIncomingLocationTimespan(location, timespan)
end

if ARGV[0] == "open" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    Lucille::openLocation(location)
end

if ARGV[0] == "apply-next-to-text" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    exit if location[-4, 4] != ".txt"
    content = IO.read(location).strip
    content = Lucille::applyNextTransformationToContent(content)
    File.open(location, "w"){|f| f.puts(content) }
end

if ARGV[0] == "recast" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    LXRunManagement::stopLocation(location)
    timeline = nil
    loop {
        timelines = Lucille::timelines().reject{|timeline| timeline == "[Inbox]" }
        t = LucilleCore::selectEntityFromListOfEntitiesOrNull("timeline", timelines)
        if t then
            timeline = t
            break
        end
        t = LucilleCore::askQuestionAnswerAsString("timeline: ")
        if t.size>0 then
            timeline = t
            break
        end
    }
    Lucille::setLocationTimeline(location, timeline)
end

if ARGV[0] == "done" and ARGV[1] then
    location = ARGV[1]
    exit if !File.exists?(location)
    Lucille::doneLucilleLocation(location)
end

#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'drb/drb'

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"

require_relative "catalyst.rb"

# -----------------------------------------------------------------

class CatalystCLIUtils
    def self.cli(runId)
        mainschedule = {}
        mainschedule["archives-gc"] = Time.new.to_i + Random::rand*86400
        mainschedule["events-gc"]   = Time.new.to_i + Random::rand*86400
        mainschedule["requirements-off-notification"] = Time.new.to_i + Random::rand*3600*2
        loop {
            FlockDiskIO::loadFromEventsTimeline()
            standardlp = CommonsUtils::getStandardListingPosition()
            object = CommonsUtils::unifiedListing(standardlp).take(standardlp).last["object"]
            # --------------------------------------------------------------------------------
            # Sometimes a wave item that is an email, gets deleted by the Wave-Emails process.
            # In such a case they are still in Flock and should not be showed
            if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" then
                if object["schedule"][":wave-emails:"] then
                    if !File.exists?(object["item-data"]["folderpath"]) then
                        puts CommonsUtils::object2Line_v0(object)
                        puts "This email has been deleted, removing Flock item:"
                        TheFlock::removeObjectIdentifiedByUUID(object["uuid"])
                        EventsManager::commitEventToTimeline(EventsMaker::destroyCatalystObject(object["uuid"]))
                        next
                    end
                end
            end
            system("clear")
            if ( Time.new.to_i > mainschedule["archives-gc"] ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::archivesTimelineGarbageCollection()
                puts "Archives timeline garbage collection: #{lines.size}"
                lines.each{|line|
                    puts "    - #{line}"
                }
                LucilleCore::pressEnterToContinue() if lines.size>0
                mainschedule["archives-gc"] = Time.new.to_i + Random::rand*86400
            end
            if ( Time.new.to_i > mainschedule["events-gc"] ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::eventsTimelineGarbageCollection()
                puts "Events timeline garbage collection: #{lines.size}"
                lines.each{|line|
                    puts "    - #{line}"
                }
                LucilleCore::pressEnterToContinue() if lines.size>0
                mainschedule["events-gc"] = Time.new.to_i + Random::rand*86400
            end
            if ( Time.new.to_i > mainschedule["requirements-off-notification"] ) then
                if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
                    puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}"
                    LucilleCore::pressEnterToContinue()
                end
                mainschedule["requirements-off-notification"] = Time.new.to_i + Random::rand*3600*2
                next
            end
            puts "[#{standardlp}] #{CatalystCLIUtils::object2Line_v1(object)}"
            print "--> "
            command = STDIN.gets().strip
            if command=="+1" then
                CommonsUtils::setStandardListingPosition(CommonsUtils::getStandardListingPosition()+1)
                next
            end
            if command.start_with?(":") then

                token, rest = StringParser::decompose(command)

                if CommonsUtils::isInteger(token[1,token.size]) and rest.nil? then
                    # :<position>         # set the listing reference point
                    position = token[1,token.size].to_i
                    CommonsUtils::setStandardListingPosition([position, 0].max)
                    next
                end

                if CommonsUtils::isInteger(token[1,token.size]) and rest.index(" ").nil? then # Here we do a bas testing of whether the rest is a float
                    # :<position> <float> # set the ordinal of the object at this position
                    position = token[1,token.size].to_i
                    ordinal = rest.to_f
                    object = CommonsUtils::unifiedListing(position).take(position).last["object"]
                    Ordinals::register(object["uuid"], ordinal)
                    next
                end

                if token==":?" then
                    # :? <float> <description, multi-tokens> # creates a text object and give it that ordinal
                    ordinal, description = StringParser::decompose(rest)
                    xuuid = CommonsUtils::waveInsertNewItemDefaults(description)
                    Ordinals::register(xuuid, ordinal.to_f)
                    next
                end

                next

            end
            command = command.size>0 ? command : ( object["default-expression"] ? object["default-expression"] : "" )
            CommonsUtils::processObjectAndCommand(object, command)
            File.open("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/run-identifier.data", "w") {|f| f.write(runId) }
        }
    end
    def self.object2Line_v1(object)
        announce = object['announce'].strip
        announce = CommonsUtils::announceWithColor(announce, object)
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{requirementsAsString.green}",
            CommonsUtils::object2DonotShowUntilAsString(object),
            " (#{object["commands"].join(" ").red})",
            " \"#{defaultExpressionAsString.green}\""
        ].join()
    end
end

runId = SecureRandom.hex

FlockDiskIO::loadFromEventsTimeline()

Thread.new {
    loop {
        if CommonsUtils::isActiveInstance(runId) then
            CommonsUtils::emailSync(false)
        end
        sleep 1200
    }
}

CatalystCLIUtils::cli(runId)

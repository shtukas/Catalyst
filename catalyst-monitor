#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'drb/drb'
require 'thread'

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# -----------------------------------------------------------------

require_relative "NSXMiscLibraries/NSXCatalystUI.rb"
require_relative "NSXMiscLibraries/NSXConstants.rb"
require_relative "NSXMiscLibraries/NSXBob.rb"
require_relative "NSXMiscLibraries/NSXCatalystObjectsOperator.rb"
require_relative "NSXMiscLibraries/NSXData.rb"
require_relative "NSXMiscLibraries/NSXDisplayUtils.rb"
require_relative "NSXMiscLibraries/NSXGeneralCommandHandler.rb"
require_relative "NSXMiscLibraries/NSXGenericContents.rb"
require_relative "NSXMiscLibraries/NSXDoNotShowUntilDatetime.rb"
require_relative "NSXMiscLibraries/NSXEstateServices.rb"
require_relative "NSXMiscLibraries/NSXEmailClients.rb"
require_relative "NSXMiscLibraries/NSXEmailTrackingClaims.rb"
require_relative "NSXMiscLibraries/NSXFolderProbe.rb"
require_relative "NSXMiscLibraries/NSXLightThreadUtils.rb"
require_relative "NSXMiscLibraries/NSXMiscUtils.rb"
require_relative "NSXMiscLibraries/NSXRunner.rb"
require_relative "NSXMiscLibraries/NSXStreamsUtils.rb"
require_relative "NSXMiscLibraries/NSXStringParser.rb"

require_relative "NSXAgents/NSXAgentBabyNights.rb"
require_relative "NSXAgents/NSXAgentTodayNotes.rb"
require_relative "NSXAgents/NSXAgentHouse.rb"
require_relative "NSXAgents/NSXAgentLightThread.rb"
require_relative "NSXAgents/NSXAgentStreams.rb"
require_relative "NSXAgents/NSXAgentTheBridge.rb"
require_relative "NSXAgents/NSXAgentVienna.rb"
require_relative "NSXAgents/NSXAgentWave.rb"

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

loop {

    if NSXMiscUtils::trueNoMoreOftenThanNEverySeconds(nil, "cb3b93db-797f-43f6-a94d-4fbe96e490f", 3600) then
        NSXStreamsUtils::sendOrphanStreamItemsToInbox()
    end

    if NSXMiscUtils::trueNoMoreOftenThanNEverySeconds(nil, "4021fd4d-8276-4523-b52f-491dd504e949", 86400) then
        NSXEstateServices::archivesTimelineGarbageCollection(true)
    end

    if NSXMiscUtils::trueNoMoreOftenThanNEverySeconds(nil, "3651fd6f-1144-4dd0-85bf-1509ec71acf6", 86400) then
        NSXStreamsUtils::allStreamsItemsEnumerator()
        .each{|item|
            next if item["emailTrackingClaim"].nil?
            next if item["emailTrackingClaim"]["status"] != "dead"
            next if item["emailTrackingClaim"]["lastStatusUpdateUnixtime"] < (Time.new.to_i - 86400*30) # We keep the dead ones for 30 days
            puts JSON.pretty_generate(item)
            NSXStreamsUtils::destroyItem(item["filename"])
        }
    end

    begin
        NSXMiscUtils::emailSync(true)
    rescue SocketError
        puts "-> Could not retrieve emails"
    end
    
    sleep 1200
}


#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/SectionsType0141.rb"
# SectionsType0141::contentToSections(text)

# -------------------------------------------------------------------------

def sectionToUUID(section)
    "#{Time.new.to_s[0,10]}-#{Digest::SHA1.hexdigest(section)}"
end

def metric(uuid, indx)
    metric = KeyValueStore::getOrNull(nil, "#{Time.new.to_s[0, 10]}:950e862e-21db-419a-ae60-5b3ff050987a:#{uuid}")
    if metric then
        return metric.to_f
    else
        metric = 0.71 - indx.to_f/1000
        KeyValueStore::set(nil, "#{Time.new.to_s[0, 10]}:950e862e-21db-419a-ae60-5b3ff050987a:#{uuid}", metric)
        return metric
    end
end

# -----------------------------------------------------------------------------

content = IO.read("/Users/pascal/Desktop/Lucille.txt").split('@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b').map{|part| part.strip }[1]

objects = SectionsType0141::contentToSections(content)
    .map
    .with_index{|section, indx|
        sectionuuid = sectionToUUID(section)
        {
            "uuid"           => sectionuuid,
            "contentItem"    => {
                "type" => "line-and-body",
                "line" => "[Desktop] " + section.strip.lines.to_a.first,
                "body" => "[Desktop] " + section.strip
            },
            "metric"          => metric(sectionuuid, indx),
            "commands"        => [">lucille"],
            "defaultCommand"  => "done",
            "shell-redirects" => {
                ">lucille" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/DesktopFile/catalyst-objects-processing tolucille #{sectionuuid}",
                "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/DesktopFile/catalyst-objects-processing done #{sectionuuid}"
            }
        }
    }

puts JSON.generate(objects)

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Ping.rb"
=begin 
    Ping::put(uuid, weight)
    Ping::totalOverTimespan(uuid, timespanInSeconds)
    Ping::totalToday(uuid)
=end

require_relative "Wave.rb"

# -----------------------------------------------------------------------------

def openItem(obj)
    text = obj["description"]
    puts text
    if text.lines.to_a.size == 1 and text.start_with?("http") then
        url = text
        if Wave::isLucille18() then
            system("open '#{url}'")
        else
            system("open -na 'Google Chrome' --args --new-window '#{url}'")
        end
        return
    end
    if text.lines.to_a.size > 1 then
        LucilleCore::pressEnterToContinue()
        return
    end
end

if ARGV[0] == 'start' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    openItem(obj)
    if LucilleCore::askQuestionAnswerAsBoolean("-> done ? ", true) then
        Wave::performDone2(obj)
    end
    exit
end

if ARGV[0] == 'open' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    time1 = Time.new.to_f
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    openItem(obj)
    exit
end

if ARGV[0] == 'done' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    Wave::performDone2(obj)
    exit
end

if ARGV[0] == 'recast' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    schedule = Wave::makeScheduleObjectInteractivelyOrNull()
    exit if schedule.nil?
    obj["schedule"] = schedule
    Nyx::commitToDisk(obj)
    exit
end

if ARGV[0] == 'description' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    obj["description"] = CatalystCommon::editTextUsingTextmate(obj["description"])
    Nyx::commitToDisk(obj)
    exit
end

if ARGV[0] == 'destroy' and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    obj = Nyx::getOrNull(uuid)
    exit if obj.nil?
    if LucilleCore::askQuestionAnswerAsBoolean("Do you want to destroy this item ? : ") then
        Nyx::destroy(obj["uuid"])
        exit
    end
    exit
end
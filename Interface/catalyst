#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'time'
require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Common.rb"

# -----------------------------------------------------------------

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystFsck.rb"

require_relative "NSXCatalystObjectsOperator.rb"
require_relative "NSXCatalystUI.rb"
require_relative "NSXDisplayUtils.rb"
require_relative "NSXGeneralCommandHandler.rb"
require_relative "NSXGeneralSearch.rb"
require_relative "NSXEstateServices.rb"
require_relative "NSXMiscUtils.rb"

# -------------------------------------------------------------------------

CATALYST_RUN_HASH = SecureRandom.hex
CATALYST_CODE_FOLDERPATH = File.dirname(File.dirname(__FILE__)) 
STARTING_CODE_HASH = NSXEstateServices::locationHashRecursively(CATALYST_CODE_FOLDERPATH)

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

NSXEstateServices::binT1mel1neGarbageCollectionEnvelop(true)

if ARGV[0] and ARGV[0] == "todo" then

    Thread.new {
        loop {
            sleep 120

            NSXCatalystObjectsOperator::cacheUpdate()

            NSXCatalystObjectsOperator::getCatalystListingObjectsOrderedFast()
                .select{|object| object["isRunning"] and object["isDone"] }
                .first(1)
                .each{|object|
                    NSXMiscUtils::onScreenNotification("Catalyst Interface", "An object is done")
                }

            sleep 5

            NSXCatalystObjectsOperator::getCatalystListingObjectsOrderedFast()
                .select{|object| object["isRunningForLong"] }
                .first(1)
                .each{|object|
                    NSXMiscUtils::onScreenNotification("Catalyst Interface", "An object is running for long")
                }

            sleep 5

            objects = NSXCatalystObjectsOperator::getCatalystListingObjectsOrderedFast()
            hasRunningGuardianWork = objects.any?{|object| object["uuid"] == "5c81927e-c4fb-4f8d-adae-228c346c8c7d" and object["isRunning"] }
            hasWaveItems = objects.any?{|object| object["x-interface:isWave"] }
            if hasRunningGuardianWork and hasWaveItems then
                NSXMiscUtils::onScreenNotification("Catalyst Interface", "Wave items during Guardian Work")
            end
        }
    }

    Thread.new {
        loop {
            sleep 600
            NSXCatalystObjectsOperator::cacheUpdate()
        }
    }

    NSXCatalystUI::standardUILoop()

    exit
end

if ARGV[0] and ARGV[0] == "data" then
    loop {

        if STARTING_CODE_HASH != NSXEstateServices::locationHashRecursively(CATALYST_CODE_FOLDERPATH) then
            puts "Code change detected. Exiting."
            return
        end

        NSXCatalystUI::operations()
    }
    exit
end


# -------------------------------------------------------------------------

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'time'
require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Common.rb"

# -----------------------------------------------------------------

require_relative "NSXCatalystObjectsOperator.rb"
require_relative "NSXCatalystUI.rb"
require_relative "NSXCuration.rb"
require_relative "NSXDisplayUtils.rb"
require_relative "NSXGeneralSearch.rb"
require_relative "NSXEstateServices.rb"
require_relative "NSXMiscUtils.rb"

require_relative "Floats.rb"

# -------------------------------------------------------------------------

CATALYST_RUN_HASH = SecureRandom.hex
CATALYST_CODE_FOLDERPATH = File.dirname(File.dirname(__FILE__)) 
STARTING_CODE_HASH = NSXEstateServices::locationHashRecursively(CATALYST_CODE_FOLDERPATH)

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

Thread.new {
    loop {
        sleep 5
        NSXCatalystObjectsOperator::getCatalystListingObjectsOrdered()
            .select{|object| object["isRunningForLong"] }
            .first(1)
            .each{|object|
                NSXMiscUtils::onScreenNotification("Catalyst Interface", "An object is running for long")
            }
        sleep 60
    }
}

Thread.new {
    loop {
        sleep 60
        Asteroids::updateOperationalCache()
        ProgrammableBooleans::resetTrueNoMoreOften("5a56e54d-c24d-4ae9-a8ae-f95729bd010f")
        sleep 600
    }
}

NSXCatalystUI::standardUILoop()

# -------------------------------------------------------------------------

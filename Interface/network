#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'time'
require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Common.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DataIntegrityOfficer.rb"

# -----------------------------------------------------------------

require_relative "NSXCatalystObjectsOperator.rb"
require_relative "NSXCatalystUI.rb"
require_relative "NSXDisplayUtils.rb"
require_relative "NSXGeneralCommandHandler.rb"
require_relative "NSXEstateServices.rb"
require_relative "NSXMiscUtils.rb"

# -------------------------------------------------------------------------

loop {
    system("clear")
    items = []

    items << [
        "OpenCycles", 
        lambda { NSXCatalystUI::performOpenCyclesDisplay() }
    ]
    items << [
        "Latest Timelines", 
        lambda { NSXCatalystUI::performLastestTimelinesDisplay() }
    ]
    items << [
        "Latest Cliques", 
        lambda { NSXCatalystUI::performLastestCliquesDisplay() }
    ]
    items << [
        "General Navigation", 
        lambda { NSXCatalystUI::performGeneralNavigationDisplay() }
    ]

    items << [
        "Makers", 
        lambda { NSXCatalystUI::performMakersDisplay() }
    ]

    items << [
        "Management", 
        lambda { NSXCatalystUI::performManagementDisplay() }
    ]

    items << [
        "Applications", 
        lambda { NSXCatalystUI::performAppsDisplay() }
    ]

    items << nil

    items << [
        "Applications generation speed", 
        lambda { 
            puts "Applications generation speed report"
            NSXCatalystObjectsCommon::applicationNames()
                .map{|appname| "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/#{appname}/x-catalyst-objects" }
                .map{|source|
                    t1 = Time.new.to_f
                    JSON.parse(`#{source}`)
                    t2 = Time.new.to_f
                    {
                        "source" => source,
                        "timespan" => t2-t1 
                    }
                }
                .sort{|o1, o2| o1["timespan"]<=>o2["timespan"] }
                .reverse
                .each{|object|
                    puts "    - #{object["source"]}: #{"%.3f" % object["timespan"]}"
                }
            LucilleCore::pressEnterToContinue()
        }
    ]

    items << [
        "UI generation speed", 
        lambda { 
            t1 = Time.new.to_f
            NSXCatalystObjectsOperator::getCatalystListingObjectsOrdered()
                .each{|object| NSXDisplayUtils::objectDisplayStringForCatalystListing(object, true, 1) } # All in focus at position 1
            t2 = Time.new.to_f
            puts "UI generation speed: #{(t2-t1).round(3)} seconds"
            LucilleCore::pressEnterToContinue()
        }
    ]

    status = LucilleCore::menuItemsWithLambdas(items)
    break if !status
}

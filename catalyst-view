#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'drb/drb'
require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"
require_relative "catalyst.rb"
# -----------------------------------------------------------------

class CatalystViewUtils
    def self.viewloop()
        positionDisplay = lambda {|standardlp, position|
            if standardlp==position then
                "[* #{"%2d" % position}]"
            else
                "[  #{"%2d" % position}]"
            end
        }
        objectToLineOrdinalListing = lambda {|object, ordinal, position, standardlp|
            "#{positionDisplay.call(standardlp, position)} [#{("%.3f" % ordinal)}] #{CommonsUtils::object2Line_v0(object)[8,CommonsUtils::screenWidth()-28]}"
        }
        objectToLineMainListing = lambda {|object, position, standardlp|
            "#{positionDisplay.call(standardlp, position)} #{CommonsUtils::object2Line_v0(object)[0,CommonsUtils::screenWidth()-9]}"
        }
        objectToGenericLine = lambda {|p, position, standardlp|
            if p["type"]=="ordinal" then
                return objectToLineOrdinalListing.call(p["object"], p["ordinal"], position, standardlp)
            end
            if p["type"]=="main" then
                return objectToLineMainListing.call(p["object"], position, standardlp)
            end            
        }
        loop {
            FlockDiskIO::loadFromEventsTimeline()
            standardlp = CommonsUtils::getStandardListingPosition()
            screenleft = CommonsUtils::screenHeight()-3
            structure = CommonsUtils::getUnifiedListing(screenleft)
            system("clear")
            if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
                puts "REQUIREMENTS: OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
                screenleft = screenleft - 1
            end      
            puts ""
            numberOfOrdinals = structure.select{|p| p["type"]=="ordinal" }.size 
            if numberOfOrdinals>0 then
                screenleft = screenleft - 1
            end
            structure.take(screenleft).each_with_index{|p, index|
                position = index+1
                if numberOfOrdinals>0 and (position-1)==numberOfOrdinals then
                    puts ""
                end
                str = objectToGenericLine.call(p, position, standardlp)
                object = p["object"]
                if object["is-running"] then
                    str = str.green
                end
                puts str
            }
            sleep 10
        }
    end
end

CatalystViewUtils::viewloop()


Cubes are data carriers. They allow NSDataType2s to mutate.

The notion of cube family was introduced when I was working on introducing mutation of asteroids. Turns out that an asteroid can have more than one independant cubes, but then we only want to show the latest version of a given one, hence the notion of a family. When we issue a replacement cube we replace the cubes of the same family. 

When a cube is created we need to specifiy its family name, either randomly chosen or given since the newly created cubes is meant to replace anybody of the same family.  

Cube

{
    "uuid"         : String
    "nyxNxSet"     : "0f555c97-3843-4dfe-80c8-714d837eba69"
    "unixtime"     : Float # Unixtime with decimals
    "type"         : "line"
    "line"         : String
}

{
    "uuid"         : String
    "nyxNxSet"     : "0f555c97-3843-4dfe-80c8-714d837eba69"
    "unixtime"     : Float # Unixtime with decimals
    "type"         : "url"
    "url"          : String
}

{
    "uuid"         : String
    "nyxNxSet"     : "0f555c97-3843-4dfe-80c8-714d837eba69"
    "unixtime"     : Float # Unixtime with decimals
    "type"         : "text"
    "namedhash"    : String (Reference to a blob)
}

{
    "uuid"         : String
    "nyxNxSet"     : "0f555c97-3843-4dfe-80c8-714d837eba69"
    "unixtime"     : Float # Unixtime with decimals
    "type"         : "aion-point"
    "namedhash"    : String (Librarian managed, accessed using the Desk)
}

{
    "uuid"         : String
    "nyxNxSet"     : "0f555c97-3843-4dfe-80c8-714d837eba69"
    "unixtime"     : Float # Unixtime with decimals
    "type"         : "unique-name"
    "name"         : String # Use Atlas to find them
}

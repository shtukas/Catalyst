#!/usr/bin/ruby

# encoding: UTF-8
require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require "time"

# -------------------------------------------------------------------------------------

# NSXAgentStreams::getObjects()

class NSXAgentStreams

    # NSXAgentStreams::agentuuid()
    def self.agentuuid()
        "d2de3f8e-6cf2-46f6-b122-58b60b2a96f1"
    end

    # NSXAgentStreams::getObjects()
    def self.getObjects()
        # This agent doesn't generate its own objects but it handles the commands. 
        # The objects are generated by the LightThreads's agent
        # When a command is executed we reload the NSXAgentLightThread's objects
        # NSXAgentLightThread calls the stream objects with the right metric.
        return []
    end

    # NSXAgentStreams::stopObject(object)
    def self.stopObject(object)
        streamItemUUID = object["data"]["stream-item"]["uuid"]
        timespanInSeconds = NSXStreamsUtils::stopStreamItem(streamItemUUID)
        NSXStreamsUtils::stopPostProcessing(streamItemUUID)
        lightThreadUUID = object["data"]["light-thread"]["uuid"]
        NSXLightThreadUtils::issueLightThreadTimeRecordItem(lightThreadUUID, Time.new.to_i, timespanInSeconds)
    end

    def self.processObjectAndCommand(object, command)
        if command=="open" then
            NSXStreamsUtils::viewItem(object["data"]["stream-item"]["filename"])
            return ["nothing"]          
        end
        if command=="numbers" then
            puts "  stream item:"
            streamItemUUID = object["data"]["stream-item"]["uuid"]
            item = NSXStreamsUtils::getStreamItemByUUIDOrNull(streamItemUUID)
            if item and item["run-data"] then
                timeInSeconds = item["run-data"].each{|datum|  
                    puts "    - #{Time.at(datum[0]).to_s} : #{ (datum[1].to_f/3600).round(2) } hours"
                }
            end
            puts "  light thread:"
            lightThreadUUID = object["data"]["light-thread"]["uuid"]
            NSXLightThreadUtils::getLightThreadTimeRecordItems(lightThreadUUID)
                .each{|item|
                    puts "    - #{Time.at(item["unixtime"]).to_s} : #{ (item["timespan"].to_f/3600).round(2) } hours"
                }
            LucilleCore::pressEnterToContinue()
            return ["nothing"]
        end
        if command=="start" then
            NSXStreamsUtils::startStreamItem(object["data"]["stream-item"]["uuid"])
            return ["reload-agent-objects", NSXAgentLightThread::agentuuid()]
        end
        if command=="stop" then
            NSXAgentStreams::stopObject(object)
            return ["reload-agent-objects", NSXAgentLightThread::agentuuid()]
        end
        if command=="done" then
            NSXAgentStreams::stopObject(object)
            NSXStreamsUtils::destroyItem(object["data"]["stream-item"]["filename"])
            NSXCatalystObjectsOperator::processAgentProcessorSignal(["remove", object["uuid"]])          
            return ["reload-agent-objects", NSXAgentLightThread::agentuuid()]
        end
        if command==">xstream" then
            itemuuid = object["data"]["stream-item"]["uuid"]
            globalPosition = LucilleCore::selectEntityFromListOfEntitiesOrNull("position relatively to stream:", ["front", "back"])
            newOrdinal = (globalPosition == "front") ? NSXStreamsUtils::newFrontPositionOrdinalForXStream() : NSXStreamsUtils::newLastPositionOrdinalForXStream()
            NSXStreamsUtils::moveToXStreamAtOrdinal(itemuuid, newOrdinal)
            return ["reload-agent-objects", NSXAgentLightThread::agentuuid()]
        end
        ["nothing"]
    end

    def self.interface()

    end

end
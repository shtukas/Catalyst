#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Ping.rb"
=begin 
    Ping::put(uuid, weight)
    Ping::total24hours(uuid)
    Ping::totalToday(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Mercury.rb"
=begin
    Mercury::postValue(channel, value)
    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTargets.rb"

# --------------------------------------------------------------------

require_relative "InFlightControlSystem.rb"

# -----------------------------------------------------------------------------

def stop(claim)
    uuid = claim["uuid"]
    timespan = Runner::stop(uuid)
    return if timespan.nil?
    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running

    puts "Sending #{timespan} seconds to ifcs #{uuid}"
    Bank::put(uuid, timespan)

    message = {
        "itemuuid" => claim["itemuuid"],
        "timespan" => timespan
    }

    puts "Posting message: 00E77F58-3E94-45BF-B42C-4CFEC2CBB8CD / #{message}"
    Mercury::postValue("00E77F58-3E94-45BF-B42C-4CFEC2CBB8CD", message)
end

def open_(claim)
    itemuuid = claim["itemuuid"]
    item = InFlightControlSystem::getTodoItemOrNull(itemuuid)
    return if item.nil?
    CatalystStandardTargets::openTarget(todo["target"])
end

if ARGV[0] == "start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    Runner::start(uuid)
    open_(claim)
end

if ARGV[0] == "open" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    open_(claim)
end

if ARGV[0] == "stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?
    stop(claim)
end

if ARGV[0] == "done" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    stop(claim)
    InFlightControlSystem::destroy(uuid)

    puts "Adding 1 to todo items done today"
    Ping::put("AEBAFC58-A70B-4623-A9C9-A00FF6BAAD0A", 1)
end

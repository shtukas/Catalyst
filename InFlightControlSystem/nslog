#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "InFlightControlSystem.rb"


# -------------------------------------------------------------------------

exit
InFlightControlSystem::claims()
.each{|uuid|
    puts uuid
    description = InFlightControlSystem::getDescription(uuid)
    puts description
    position = InFlightControlSystem::getPosition(uuid)
    puts position
    payloadType = InFlightControlSystem::getPayloadType(uuid)
    puts payloadType
    if payloadType == "url" then
        next
        aetherfilepath = InFlightControlSystem::uuid2aetherfilepath(uuid)
        url = AetherKVStore::getOrNull(aetherfilepath, "67c2db721728")
        target = {
            "type" => "url",
            "url"  => url
        }
        puts JSON.pretty_generate(target)
        InFlightControlSystem::issueClaim(uuid, description, target, position)
    end
    if payloadType == "text" then
        next
        aetherfilepath = InFlightControlSystem::uuid2aetherfilepath(uuid)
        text = AetherKVStore::getOrNull(aetherfilepath, "472ec67c0dd6")
        filename = "#{uuid}-f588c9d2.txt"
        filepath = "/Users/pascal/Galaxy/DataBank/CoreData/Files/#{filename}"
        puts filepath
        File.open(filepath, "w"){|f| f.puts(text) }
        target = {
            "type"      => "file",
            "filename"  => filename
        }
        puts JSON.pretty_generate(target)
        InFlightControlSystem::issueClaim(uuid, description, target, position)
    end
    if payloadType == "aionpoint" then
        aetherfilepath = InFlightControlSystem::uuid2aetherfilepath(uuid)
        foldername = "#{uuid}-d500c9d3"
        folderpath = "/Users/pascal/Galaxy/DataBank/CoreData/Directories/#{foldername}"
        FileUtils.mkdir(folderpath)
        puts folderpath
        AetherAionOperations::exportReferenceAtFolder(aetherfilepath, "1815ea639314", folderpath)
        target = {
            "type"        => "folder",
            "foldername"  => foldername
        }
        puts JSON.pretty_generate(target)
        InFlightControlSystem::issueClaim(uuid, description, target, position)
    end
}
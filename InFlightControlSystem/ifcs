#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

# encoding: UTF-8

require_relative "InFlightControlSystem.rb"

def descriptionExended(item, nsize)
    if itemIsTopActiveItem(item["uuid"]) then
        "(#{"%6.3f" % item["position"]}) (#{(itemIsRunning(item) ? "running" : "").ljust(7)}) #{item["description"].ljust(nsize)} (#{"%6.2f" % (getItemLiveTimespan(item["uuid"]).to_f/3600)} hours)"
    else
        "(#{"%6.3f" % item["position"]}) (#{(itemIsRunning(item) ? "running" : "").ljust(7)}) #{item["description"].ljust(nsize)}"
    end
end

loop {
    system('clear')
    puts ""

    itxs = []

    nsize = getItems()
            .reject{|item| item["uuid"] == waveuuid() }
            .map{|item| item["description"].size }
            .max

    itemsOrderedByPosition().each{|item|
        itxs << [ descriptionExended(item, nsize), lambda { itemDive(item) } ]
    }

    status = LucilleCore::menuItemsWithLambdas(itxs)
    break if status.nil?
}





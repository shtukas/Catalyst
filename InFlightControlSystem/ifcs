#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

# encoding: UTF-8

require_relative "InFlightControlSystem.rb"

def descriptionExended(item, nsize)
    if itemIsTopActiveItem(item["uuid"]) then
        "(#{"%6.3f" % item["position"]}) #{item["description"].ljust(nsize)} (#{"%6.2f" % (getItemLiveTimespan(item["uuid"]).to_f/3600)} hours)"
    else
        "(#{"%6.3f" % item["position"]}) #{item["description"].ljust(nsize)}"
    end
end

def itemDive(item)
    loop {
        puts JSON.pretty_generate(item)
        oxs = [ 
            "start", 
            "stop",
            "open",
            "set description",
            "set position",
            "suspend temporarily",
            item["uuid"] == waveuuid() ? "destroy" : nil
        ].compact
        ox = LucilleCore::selectEntityFromListOfEntitiesOrNull("ifcs", oxs)
        return if ox.nil?
        if ox == "start" then
            startItem(item["uuid"])
        end
        if ox == "stop" then
            stopItem(item["uuid"])
        end
        if ox == "open" then
            if item["uuid"] == waveuuid() then
                puts "It's not possible to open Wave"
                LucilleCore::pressEnterToContinue()
                next
            end
            lucilleLocationBasename = item["lucilleLocationBasename"]
            system("/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Lucille/lucille-open-location-basename '#{lucilleLocationBasename}'")
        end
        if ox == "set description" then
            item["description"] = LucilleCore::askQuestionAnswerAsString("description: ")
            saveItem(item)
        end
        if ox == "set position" then
            item["position"] = LucilleCore::askQuestionAnswerAsString("position: ").to_f
            saveItem(item)
        end
        if ox == "suspend temporarily" then
            timespanInHours = LucilleCore::askQuestionAnswerAsString("time in hours: ").to_f
            item["DoNotShowUntilUnixtime"] = Time.new.to_i + timespanInHours*3600
            saveItem(item)
        end
        if ox == "destroy" then
            uuid = item["uuid"]
            destroyItem(uuid)
        end
    }
end

loop {
    system('clear')
    puts ""

    itxs = []

    nsize = getItems()
            .reject{|item| item["uuid"] == waveuuid() }
            .map{|item| item["description"].size }
            .max

    itemsOrderedByPosition().each{|item|
        itxs << [ descriptionExended(item, nsize), lambda { itemDive(item) } ]
    }

    status = LucilleCore::menuItemsWithLambdas(itxs)
    break if status.nil?
}





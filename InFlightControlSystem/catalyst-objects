#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require_relative "InFlightControlSystem.rb"

# --------------------------------------------------------------------

objects = []

if Time.new.hour < 9 and !getItems().any?{|item| itemIsRunning(item) } then
    puts '[]'
    exit
end

def metric(item, isRunning)
    return 1 if isRunning
    isDeficient = (getItemLiveTimespanTopItemsDifferentialInHoursOrNull(item["uuid"]) || 0) <= 0
    isDeficient ? 0.75 : 0
end

getTopActiveItemsOrderedByTimespan()
    .map{|item|
        isRunning = itemIsRunning(item)
        metric = metric(item, isRunning)
        defaultCommand = isRunning ? "stop" : "start"
        d1 = getItemLiveTimespanTopItemsDifferentialInHoursOrNull(item["uuid"])
        d2 = d1 ? " (#{d1.round(2)} hours)" : ""
        d3 = isRunning ? " (running for #{((Time.new.to_i - getStartUnixtimeOrNull(item["uuid"])).to_f/3600).round(2)} hours)": ""
        object = {
            "uuid" => item["uuid"],
            "contentItem" => {
                "type" => "line",
                "line" => "[In Flight Control System] (#{"%6.3f" % item["position"]}) #{getItemDescription(item)}#{d2}#{d3}",
            },
            "metric" => metric,
            "commands" => ["menu", !itemIsWave(item) ? "destroy" : nil].compact,
            "defaultCommand" => defaultCommand,
            "isRunning" => isRunning,
            "shell-redirects" => {
                "menu"    => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing menu '#{item["uuid"]}'",
                "destroy" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing destroy '#{item["uuid"]}'",
                "start"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing start '#{item["uuid"]}'",
                "stop"    => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing stop '#{item["uuid"]}'"
            },
            "meta:ifcs:isCatalystDive" => itemIsWave(item)
        }
        objects << object
    }
    .compact

puts JSON.generate(objects)

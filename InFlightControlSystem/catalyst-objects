#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require_relative "InFlightControlSystem.rb"

# --------------------------------------------------------------------

objects = []

def metric(item, isRunning, counter)
    isRunning ? 1 : 0.75-counter.to_f/1000
end

counter = -1

getTopActiveItemsOrderedByTimespan()
    .map{|item|
        counter = counter + 1
        isRunning = itemIsRunning(item)
        metric = metric(item, isRunning, counter)
        defaultCommand = isRunning ? "stop" : "start"
        d1 = getItemLiveTimespanTopItemsDifferentialInHoursOrNull(item["uuid"])
        d2 = d1 ? " (#{d1.round(2)} hours)" : ""
        object = {
            "uuid" => SecureRandom.uuid,
            "contentItem" => {
                "type" => "line",
                "line" => "[In Flight Control System] (#{"%6.3f" % item["position"]}) #{item["description"]}#{d2}",
            },
            "metric" => metric,
            "commands" => ["open", "set-description", !itemIsWave(item) ? "destroy" : nil].compact,
            "defaultCommand" => defaultCommand,
            "isRunning" => isRunning,
            "shell-redirects" => {
                "set-description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing set-description '#{item["uuid"]}'",
                "open"            => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing open '#{item["uuid"]}'",
                "destroy"         => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing destroy '#{item["uuid"]}'",
                "start"           => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing start '#{item["uuid"]}'",
                "stop"            => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/InFlightControlSystem/catalyst-objects-processing stop '#{item["uuid"]}'"
            },
            "meta:ifcs:isWave" => itemIsWave(item)
        }
        objects << object
    }
    .compact

puts JSON.generate(objects)

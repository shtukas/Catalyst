#!/usr/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'time'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'drb/drb'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

TODO_PATH_TO_DATA_FOLDER = "/Users/pascal/Galaxy/DataBank/Todo/Data-Timeline"
TODO_CATALYST_INBOX_TIMELINE_NAME = "Catalyst Inbox"

class Estate

    # Estate::l22()
    def self.l22()
        "#{Time.new.strftime("%Y%m%d-%H%M%S-%6N")}"
    end

    # Estate::tnodeEnumerator()
    def self.tnodeEnumerator()
        # Here we rely on the geometry of the folder. 
        # If we did our regular Find., we would pickup JSON objects from contents
        Enumerator.new do |tnodes|
            Dir.entries(TODO_PATH_TO_DATA_FOLDER)
                .select{|filename| filename[-5, 5] == ".json" }
                .map{|filename| "#{TODO_PATH_TO_DATA_FOLDER}/#{filename}" }
                .each{|filepath|
                    tnode = JSON.parse(IO.read(filepath))
                    tnodes << tnode
                }
        end
    end

    # Estate::tNodeFilepath(uuid)
    def self.tNodeFilepath(uuid)
        "#{TODO_PATH_TO_DATA_FOLDER}/#{uuid}.json"
    end

    # Estate::destroyTNode(tnode)
    def self.destroyTNode(tnode)
        puts "Estate::destroyTNode is not implemented yet"
        LucilleCore::pressEnterToContinue()
    end

    # Estate::locationBasenameToDataTimelineLocation(name)
    def self.locationBasenameToDataTimelineLocation(name)
        "#{TODO_PATH_TO_DATA_FOLDER}/#{name}"
    end

end

class TNode

    # ----------------------------------------------------
    # Interactive Constructions

    # TNode::makeTNodeTargetInteractivelyOrNull()
    def self.makeTNodeTargetInteractivelyOrNull()
        type = LucilleCore::selectEntityFromListOfEntitiesOrNull("type", ["line", "text", "url", "unique name", "permadir"])
        return nil if type.nil?
        if type == "line" then
            return {
                "uuid" => SecureRandom.uuid,
                "type" => "line-2A35BA23",
                "line" => LucilleCore::askQuestionAnswerAsString("line: ")
            }
        end
        if type == "text" then
            filename = "#{Estate::l22()}.txt"
            filecontents = Interface::editTextUsingTextmate("")
            File.open("#{TODO_PATH_TO_DATA_FOLDER}/#{filename}", "w"){|f| f.puts(filecontents) }
            return {
                "uuid"     => SecureRandom.uuid,
                "type"     => "text-A9C3641C",
                "filename" => filename
            }
        end
        if type == "url" then
            return {
                "uuid" => SecureRandom.uuid,
                "type" => "url-01EFB604",
                "url"  => LucilleCore::askQuestionAnswerAsString("url: ")
            }
        end
        if type == "unique name" then
            return {
                "uuid" => SecureRandom.uuid,
                "type" => "unique-name-11C4192E",
                "name" => LucilleCore::askQuestionAnswerAsString("unique name: ")
            }
        end
        if type == "permadir" then
            foldername = Estate::l22()
            folderpath = "#{TODO_PATH_TO_DATA_FOLDER}/#{foldername}"
            FileUtils.mkpath(folderpath)
            system("open '#{folderpath}'")
            return {
                "uuid"       => SecureRandom.uuid,
                "type"       => "perma-dir-AAD08D8B",
                "foldername" => foldername
            }
        end
    end

    # TNode::makeTNodeTargetsAtLeastOne()
    def self.makeTNodeTargetsAtLeastOne()
        targets = []
        while targets.size == 0 do
            targets << TNode::makeTNodeTargetInteractivelyOrNull()
            targets = targets.compact
        end
        loop {
            if LucilleCore::askQuestionAnswerAsBoolean("Another target? ") then
                targets << TNode::makeTNodeTargetInteractivelyOrNull()
                targets = targets.compact
            else
                break
            end
        }
        targets
    end

    # TNode::makeClassificationItemInteractivelyOrNull()
    def self.makeClassificationItemInteractivelyOrNull()
        type = LucilleCore::selectEntityFromListOfEntitiesOrNull("type", ["tag", "timeline"])
        return nil if type.nil?
        if type == "tag" then
            return {
                "uuid"  => SecureRandom.uuid,
                "type"  => "tag-8ACC01B9",
                "tag"   => LucilleCore::askQuestionAnswerAsString("tag: ")
            }
        end
        if type == "timeline" then
            puts "Timelines:"
            CoreData::timelines().each{|timeline| puts "    - #{timeline}" }
            return {
                "uuid"     => SecureRandom.uuid,
                "type"     => "timeline-49D07018",
                "timeline" => LucilleCore::askQuestionAnswerAsString("timeline: ")
            }
        end
    end

    # TNode::makeClassificationItemsAtLeastOne()
    def self.makeClassificationItemsAtLeastOne()
        items = []
        while items.size == 0 do
            items << TNode::makeClassificationItemInteractivelyOrNull()
            items = items.compact
        end
        loop {
            if LucilleCore::askQuestionAnswerAsBoolean("Another item? ") then
                items << TNode::makeTNodeTargetInteractivelyOrNull()
                items = items.compact
            else
                break
            end
        }
        items
    end

    # TNode::makeNewTNode()
    def self.makeNewTNode()
        uuid = Estate::l22()
        description = LucilleCore::askQuestionAnswerAsString("description: ")
        tnode = {
            "uuid"              => uuid,
            "creationTimestamp" => Time.new.to_f,
            "description"       => description,
            "targets"           => TNode::makeTNodeTargetsAtLeastOne(),
            "classification"    => TNode::makeClassificationItemsAtLeastOne()
        }
        puts JSON.pretty_generate(tnode)
        File.open(Estate::tNodeFilepath(uuid), "w"){|f| f.puts(JSON.pretty_generate(tnode)) }
    end

end

class CoreData

    # CoreData::timelines()
    def self.timelines()
        Estate::tnodeEnumerator()
            .map{|tnode| tnode["classification"] }
            .flatten
            .select{|item| item["type"] == "timeline-49D07018" }
            .map{|item| item["timeline"] }
            .uniq
    end

    # CoreData::timelinesInIncreasingActivityTime()
    def self.timelinesInIncreasingActivityTime()
        extractTimelinesFromTNode = lambda {|tnode|
            tnode["classification"]
                .select{|item| item["type"] == "timeline-49D07018" }
                .map{|item| item["timeline"] }
        }
        map1 = Estate::tnodeEnumerator().reduce({}){|map2, tnode|
            timelines = extractTimelinesFromTNode.call(tnode)
            timelines.each{|timeline|
                if map2[timeline].nil? then
                    map2[timeline] = tnode["creationTimestamp"]
                else
                    map2[timeline] = [map2[timeline], tnode["creationTimestamp"]].max
                end
            }
            map2
        }
        map1
            .to_a
            .sort{|p1, p2| p1[1]<=>p2[1] }
            .map{|pair| pair[0] }
    end

    # CoreData::tNodeIsOnThisTimeline(tnode, timeline)
    def self.tNodeIsOnThisTimeline(tnode, timeline)
        tnode["classification"].any?{|item| item["type"] == "timeline-49D07018" and item["timeline"] == timeline }
    end

    # CoreData::getTimelineOrdered(timeline)
    def self.getTimelineOrdered(timeline)
        Estate::tnodeEnumerator()
            .select{|tnode| CoreData::tNodeIsOnThisTimeline(tnode, timeline) }
            .sort{|tn1, tn2| tn1["creationTimestamp"] <=> tn2["creationTimestamp"] }
    end
end

class Interface

    # Interface::editTextUsingTextmate(text)
    def self.editTextUsingTextmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)
    end

    # Interface::targetToString(target)
    def self.targetToString(target)
        if target["type"] == "line-2A35BA23" then
            return "line: #{target["line"]}"
        end
        if target["type"] == "text-A9C3641C" then
            return "text (#{IO.read(Estate::locationBasenameToDataTimelineLocation(target["filename"])).lines.count} lines)"
        end
        if target["type"] == "url-01EFB604" then
            return "url: #{target["url"]}"
        end
        if target["type"] == "unique-name-11C4192E" then
            return "unique name: #{target["name"]}"
        end
        if target["type"] == "perma-dir-AAD08D8B" then
            return "foldername: #{target["foldername"]}"
        end
        raise "[error: 706ce2f5]"
    end

    # Interface::classificationItemToString(item)
    def self.classificationItemToString(item)
        if item["type"] == "tag-8ACC01B9" then
            return "tag: #{item["tag"]}"
        end
        if item["type"] == "timeline-49D07018" then
            return "timeline: #{item["timeline"]}"
        end
        raise "[error: 44ccb03c]"
    end

    # Interface::diveTarget(tnodeuuid, target)
    def self.diveTarget(tnodeuuid, target)
        puts "Target: #{Interface::targetToString(target)}"
        operations = [
            "open", 
            "remove/destroy from permanode"
        ]
        operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation: ", operations)
        return if operation.nil?
        if operation == "open" then
            puts "operation not implemented yet"
            LucilleCore::pressEnterToContinue()
        end
        if operation == "remove/destroy from permanode" then
            puts "operation not implemented yet"
            LucilleCore::pressEnterToContinue()
        end
    end

    # Interface::diveClassificationItem(tnodeuuid, item)
    def self.diveClassificationItem(tnodeuuid, item)
        puts "Item: #{Interface::classificationItemToString(item)}"
        operations = [
            "remove/destroy from permanode"
        ]
        operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation: ", operations)
        return if operation.nil?
        if operation == "remove/destroy from permanode" then
            puts "operation not implemented yet"
            LucilleCore::pressEnterToContinue()
        end
    end

    # Interface::diveTargets(tnodeuuid, targets)
    def self.diveTargets(tnodeuuid, targets)
        puts "Interface::diveTargets is not implemented yet"
        LucilleCore::pressEnterToContinue()
    end

    # Interface::diveClassificationItems(tnodeuuid, items)
    def self.diveClassificationItems(tnodeuuid, items)
        puts "Interface::diveClassificationItems is not implemented yet"
        LucilleCore::pressEnterToContinue()
    end

    # Interface::tNodeDive(tnode)
    def self.tNodeDive(tnode)
        puts "tnode:"
        puts "    uuid: #{tnode["uuid"]}"
        puts "    description: #{tnode["description"]}"
        puts "    targets:"
        tnode["targets"].each{|target|
            puts "        #{Interface::targetToString(target)}"
        }
        puts "    classification items:"
        tnode["classification"].each{|item|
            puts "        #{Interface::classificationItemToString(item)}"
        }
        operations = [
            "dive targets",
            "dive classification items",
            "destroy tnode"
        ]
        operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", operations)
        return if operation.nil?
        if operation == "dive targets" then
            Interface::diveTargets(tnodeuuid, tnode["targets"])
        end
        if operation == "dive classification items" then
            Interface::diveClassificationItems(tnodeuuid, tnode["classification"])
        end
        if operation == "destroy tnode" then
            if LucilleCore::askQuestionAnswerAsBoolean("Do you want to destroy this item? ") then
                Estate::destroyTNode(tnode)
            end
        end
    end

    # Interface::timelineDive(timeline)
    def self.timelineDive(timeline)
        loop {
            puts "Timeline: #{timeline}"
            tnodes = CoreData::getTimelineOrdered(timeline)
            tnode = LucilleCore::selectEntityFromListOfEntitiesOrNull("tnode: ", tnodes, lambda{|tnode| tnode["description"] })
            return if tnode.nil?
            Interface::tNodeDive(tnode)
        }
    end

    # Interface::timelinesDive()
    def self.timelinesDive()
        loop {
            timelines = CoreData::timelinesInIncreasingActivityTime().reverse
            timeline = LucilleCore::selectEntityFromListOfEntitiesOrNull("timeline: ", timelines)
            return if timeline.nil?
            Interface::timelineDive(timeline)
        }
    end

    # Interface::ui()
    def self.ui()
        loop {
            operations = [
                "make new item",
                "view",
                "view most recent items",
                "timelines dive"
            ]
            operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", operations)
            return if operation.nil?
            if operation == "make new item" then
                TNode::makeNewTNode()
            end
            if operation == "view" then
                Estate::tnodeEnumerator().each{|tnode|
                    puts tnode["description"]
                }
            end
            if operation == "view most recent items" then

            end
            if operation == "timelines dive" then
                Interface::timelinesDive()
            end
        }
    end

end

# --------------------------------------------------------------------
# nslog

# --------------------------------------------------------------------

Interface::ui()



#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTargets.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require_relative "Core/Core.rb"

# --------------------------------------------------------------------

loop {
    system("clear")
    puts "Todo üë©‚Äçüíª"
    options = [
        "create new item",
        "items dive",
        "time report"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", options)
    break if option.nil?
    if option == "create new item" then
        target = CatalystStandardTargets::issueNewTargetInteractivelyOrNull()
        next if target.nil?
        projectname = Items::selectProjectNameInteractivelyOrNull()
        projectuuid = nil
        if projectname.nil? then
            projectname = LucilleCore::askQuestionAnswerAsString("project name: ")
            projectuuid = SecureRandom.uuid
        else
            projectuuid = Items::projectname2projectuuidOrNUll(projectname)
            # We are not considering the case null
        end
        description = LucilleCore::askQuestionAnswerAsString("todo item description: ")
        item = Items::issueNewItem(projectname, projectuuid, description, target)
        puts JSON.pretty_generate(item)
    end
    if option == "items dive" then
        loop {
            projectname = LucilleCore::selectEntityFromListOfEntitiesOrNull("project name", Items::projectNames())
            break if projectname.nil?
            items = Items::itemsForProjectName(projectname)
            item = LucilleCore::selectEntityFromListOfEntitiesOrNull("item", items, lambda{|item| Items::itemToString(item) })
            Items::diveItem(item)
        }
    end
    if option == "time report" then
        Items::projectNames().each{|projectname|
            projectuuid = Items::projectname2projectuuidOrNUll(projectname)
            puts "#{projectname.ljust(50)} #{(Bank::total(projectuuid).to_f/3600).round(2)} hours"
        }
        LucilleCore::pressEnterToContinue()
    end
}

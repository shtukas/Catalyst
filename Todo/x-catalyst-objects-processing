#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

# --------------------------------------------------------------------

require_relative "Core/Core.rb"

# -----------------------------------------------------------------------------

if ARGV[0] == "start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    item = Items::getOrNull(uuid)
    exit if item.nil?

    Runner::start(uuid)
    CatalystStandardTargets::openTarget(item["target"])

    if LucilleCore::askQuestionAnswerAsBoolean("-> done ? ", false) then
        timespan = Runner::stop(uuid)
        exit if timespan.nil?
        timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
        Items::receiveRunTimespan(item, timespan, true)
        Items::destroy(item["uuid"])
    end
end

if ARGV[0] == "open" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    item = Items::getOrNull(uuid)
    exit if item.nil?
    CatalystStandardTargets::openTarget(item["target"])
end

if ARGV[0] == "stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    item = Items::getOrNull(uuid)
    exit if item.nil?

    timespan = Runner::stop(uuid)
    exit if timespan.nil?

    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    Items::receiveRunTimespan(item, timespan, true)
end

if ARGV[0] == "done" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    item = Items::getOrNull(uuid)
    exit if item.nil?

    timespan = Runner::stop(uuid)
    if !timespan.nil? then
        timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
        Items::receiveRunTimespan(item, timespan, true)
    end

    Items::destroy(item["uuid"])
end

if ARGV[0] == "dive" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    item = Items::getOrNull(uuid)
    exit if item.nil?

    Items::diveItem(item)
end

if ARGV[0] == "ifcs-start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    Runner::start(uuid)

    item = Items::getOrNull(claim["itemuuid"])
    exit if item.nil?
    CatalystStandardTargets::openTarget(item["target"])
end

if ARGV[0] == "ifcs-open" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    item = Items::getOrNull(claim["itemuuid"])
    exit if item.nil?
    CatalystStandardTargets::openTarget(item["target"])
end

if ARGV[0] == "ifcs-stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    timespan = Runner::stop(uuid)
    exit if timespan.nil?

    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    item = Items::getOrNull(claim["itemuuid"])

    exit if item.nil?
    Items::receiveRunTimespan(item, timespan, true)
end

if ARGV[0] == "ifcs-done" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    claim = InFlightControlSystem::getOrNull(uuid)
    exit if claim.nil?

    timespan = Runner::stop(uuid)
    if !timespan.nil? then
        timespan = [timespan, 3600*2].min # To avoid problems after leaving things running

        item = Items::getOrNull(claim["itemuuid"])
        if item.nil? then
            Items::receiveRunTimespan(item, timespan, true)
        end
    end

    Items::destroy(claim["itemuuid"])
    InFlightControlSystem::destroy(uuid)
end

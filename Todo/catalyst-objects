#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'time'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Todo.rb"

# --------------------------------------------------------------------

# We start by collecting the objects in the Inbox

TodoXWalksCore::remove2FromDataset1ThePointsWithObsoleteTimelines()
TodoXWalksCore::limit2SizeOfDataset1()

# --------------------------------------------------------------------

class MetricHelper
    def initialize(base)
        @base = base
        @counter = 0
    end
    def metric()
        @counter = @counter + 1
        @base - @counter.to_f/1000
    end
end

def tnodeToCatalystObject(tnode, announce, metricHelper)
    isRunning = TodoRunsUtils::isRunning(tnode["uuid"])
    commands = 
        if isRunning then
            ["stop", "done", "recast", "tonyx"]
        else
            ["start", "done", "recast", "tonyx"]
        end
    defaultCommand = 
        if isRunning then
            "stop"
        else
            "start"
        end
    {
        "uuid"           => tnode["uuid"],
        "agentuid"       => nil,
        "contentItem"    => {
            "type" => "line",
            "line" => announce
        },
        "metric"         => isRunning ? 1 : metricHelper.metric(),
        "commands"       => commands,
        "defaultCommand" => defaultCommand,
        "isDone"         => nil,
        "isRunning"      => isRunning,
        "shell-redirects" => {
            "start"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/catalyst-objects-processing start '#{tnode["uuid"]}'",
            "stop"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/catalyst-objects-processing stop '#{tnode["uuid"]}'",
            "done"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/catalyst-objects-processing done '#{tnode["uuid"]}'",
            "recast" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/catalyst-objects-processing recast '#{tnode["uuid"]}'",
            "tonyx"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/catalyst-objects-processing tonyx '#{tnode["uuid"]}'"
        }
    }
end

# --------------------------------------------------------------------

$objects = []

tnodes = TodoXEstate::getTNodes()

# --------------------------------------------------------------------

metricHelper = MetricHelper.new(0.30)
timeline = TodoXWalksCore::getTimelineWithLowestTimespan(TodoXWalksCore::get3TNodesTimelines(tnodes), TodoXWalksCore::timeline2TimeMapping())
tnodes
    .select{|tnode|
        tnode["classification"][0]["timeline"] == timeline
    }
    .sort{|tnode1, tnode2|
        tnode1["creationTimestamp"] <=> tnode2["creationTimestamp"]
    }
    .each{|tnode|
        announce = "[todo] [walk @ #{timeline}] " + TodoXUserInterface::targetToString(tnode["targets"][0])
        $objects << tnodeToCatalystObject(tnode, announce, metricHelper)
    }

# --------------------------------------------------------------------

metricHelper = MetricHelper.new(0.31)
TodoXUserInterface::getIFCSItems()
.each{|item|
    next if item["x-is-todo-item"].nil?
    tnodeuuid = item["x-is-todo-item"]
    tnode = TodoXEstate::getTNodeByUUIDOrNull(tnodeuuid)
    next if tnode.nil?
    announce = "[todo] [ifcs] " + TodoXUserInterface::targetToString(tnode["targets"][0])
    $objects << tnodeToCatalystObject(tnode, announce, metricHelper)
}

# --------------------------------------------------------------------

puts JSON.generate($objects)


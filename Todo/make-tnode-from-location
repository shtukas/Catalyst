#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'time'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
# Digest::SHA256.hexdigest 'message'  
# Digest::SHA256.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Todo.rb"

# --------------------------------------------------------------------

location1 = ARGV[0]
exit if !File.exist?(location1)

foldername2 = TodoXUtils::l22()
folderpath2 = "/Users/pascal/Desktop/#{foldername2}"
FileUtils.mkdir(folderpath2)

LucilleCore::copyFileSystemLocation(location1, folderpath2)

uuid = SecureRandom.uuid

todofilename = "#{TodoXUtils::l22()}.zeta"

tnode = {
    "uuid"              => uuid,
    "filename"          => todofilename,
    "creationTimestamp" => Time.new.to_f,
    "description"       => File.basename(location1),
    "target"            => TodoXEstate::dummyTarget(),
    "timeline"          => "[Inbox]"
}
TodoXEstate::firstTimeCommitTNodeToDisk(tnode)

# ---------------------------------------------------------------
# We can only create the target after the tnode has been commited
# to disk because some targets require the zeta file to already
# exist in order to be created since the data is stored inside the
# zeta file.

# We used to create the timeline above, but we are now doing 
# it afer for a more natural workflow.
# --------------------------------------------------------------

tnode["target"] = TodoXTMakers::makeTNodeTargetPermadirUsingSourceDirectory(uuid, folderpath2)

tnode["timeline"] = TodoXTMakers::interactively2SelectOneTimelinePossiblyNew(TodoXCoreData::timelinesInIncreasingActivityTime().reverse)

TodoXEstate::reCommitTNodeToDisk(tnode)

LucilleCore::removeFileSystemLocation(folderpath2)

# Now we need to return the path to the todo zeta file.

puts TodoXEstate::repositoryFilenameToFilepath(todofilename)


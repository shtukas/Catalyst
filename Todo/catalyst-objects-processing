#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'time'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'
require 'thread'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/BTreeSets.rb"
=begin
    BTreeSets::values(repositorylocation or nil, setuuid: String): Array[Value]
    BTreeSets::set(repositorylocation or nil, setuuid: String, valueuuid: String, value)
    BTreeSets::getOrNull(repositorylocation or nil, setuuid: String, valueuuid: String): nil | Value
    BTreeSets::destroy(repositorylocation, setuuid: String, valueuuid: String)
=end

# --------------------------------------------------------------------

require_relative "Todo.rb"

# -----------------------------------------------------------------------------

if ARGV[0] == "start" and ARGV[1] then
    todouuid = ARGV[1]
    TodoRunsUtils::startTodo(todouuid)
    tnode = TodoXEstate::getTNodeByUUIDOrNull(todouuid)
    exit if tnode.nil?
    TodoXUserInterface::optimizedOpenTNodeUniqueTargetOrNothing(tnode)
end

if ARGV[0] == "stop" and ARGV[1] then
    todouuid = ARGV[1]
    TodoRunsUtils::stopTodo(todouuid)
end

if ARGV[0] == "done" and ARGV[1] then
    todouuid = ARGV[1]
    TodoRunsUtils::stopTodo(todouuid)
    tnode = TodoXEstate::getTNodeByUUIDOrNull(todouuid)
    exit if tnode.nil?
    TodoXEstate::destroyTNode(tnode)
end

if ARGV[0] == "recast" and ARGV[1] then
    uuid = ARGV[1]
    TodoRunsUtils::stopTodo(uuid)
    TodoXUserInterface::recastTNodeIdentifiedByUUID(uuid)
end

if ARGV[0] == "tonyx" and ARGV[1] then
    uuid = ARGV[1]
    TodoRunsUtils::stopTodo(uuid)
    tnode = TodoXEstate::getTNodeByUUIDOrNull(uuid)
    if tnode.nil? then
        puts "Could not find tnode with uuid: '#{uuid}'"
        LucilleCore::pressEnterToContinue()
        exit
    end
    puts TodoXUserInterface::targetToString(tnode["targets"][0])
    nyxItem = TodoXNyxConverter::transmuteTodoItemIntoNyxObject(tnode, TodoXEstate::pathToNyxYmir())
    filename = "#{TodoXUtils::l22()}.json"
    filepath = YmirEstate::makeNewYmirLocationForBasename(TodoXEstate::pathToNyxYmir(), filename)
    puts JSON.pretty_generate(nyxItem)
    File.open(filepath, "w"){|f| f.puts(JSON.pretty_generate(nyxItem)) }
    TodoXEstate::destroyTNode(tnode)
end

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require_relative "Todo.rb"

# -------------------------------------------------------------------------

def itemToCatalystObject(item, basemetric, indx)

    defaultCommand = lambda {|isRunning|
        isRunning ? "stop" : "start"
    }

    uuid = item["uuid"]
    isRunning = Runner::isRunning(uuid)
    isRunningForLong = ((Runner::runTimeInSecondsOrNull(uuid) || 0) > 3600)

    metric = basemetric - indx.to_f/1000
    metric = 1 if Runner::isRunning(uuid)

    KeyValueStore::set(nil, "11e20bd2-ee24-48f3-83bb-485ff9396800:#{uuid}", Items::itemToString(item))
        # Used by TimePods

    {
        "uuid"           => uuid,
        "application"    => "Todo",
        "contentItem"    => {
            "type" => "line",
            "line" => Items::itemToString(item)
        },
        "metric"         => metric,
        "commands"       => ["start", "open", "stop", "done", "description", "dive", "push", "re-project", ">network"],
        "defaultCommand" => defaultCommand.call(isRunning),
        "isRunning"      => isRunning,
        "shell-redirects" => {
            "start"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing start '#{uuid}'",
            "open"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing open '#{uuid}'",
            "stop"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing stop '#{uuid}'",
            "done"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing done '#{uuid}'",
            "description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing description '#{uuid}'",
            "push"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing reset-reference-time '#{uuid}'",
            "re-project"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing change-project '#{uuid}'",
            ">network"    => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing recast-as-clique '#{uuid}'",
            "dive"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/x-catalyst-objects-processing dive '#{uuid}'"
        },
        "isRunningForLong" => isRunningForLong,
        "x-todo:item" => item
    }
end

# -------------------------------------------------------------------------

while (link = Mercury::getFirstValueOrNull("F771D7FE-1802-409D-B009-5EB95BA89D86")) do
    target = {
        "type" => "url",
        "url"  => link
    }
    item = {
        "uuid"          => SecureRandom.uuid,
        "creationtime"  => Time.new.to_f,
        "referencetime" => Time.new.to_f,
        "projectname"   => "Infinity",
        "projectuuid"   => "0219fd54bd5841008b18c414a5b2dea331bad1c5",
        "description"   => link,
        "target"        => target
    }
    Items::save(item)
    Mercury::deleteFirstValue("F771D7FE-1802-409D-B009-5EB95BA89D86")
end

# -------------------------------------------------------------------------

objects = []

# -------------------------------------------------------------------------

# First, we display all the Inbox items in order.

Items::items()
    .select{|item| item["projectuuid"] == "44caf74675ceb79ba5cc13bafa102509369c2b53" } # Inbox
    .sort{|i1, i2| 
        i1["referencetime"] <=> i2["referencetime"] }
    .each_with_index {|item, indx|
        objects << itemToCatalystObject(item, 0.85, indx)
    }

# -------------------------------------------------------------------------

# Now we select a project and work with the first 3 items

def getFocus()
    locationKey = CatalystCommon::getNewValueEveryNSeconds("069aeb21-bce5-4ea2-aa03-230a4c354729", 2.71828*3600) # e hours
    focus = KeyValueStore::getOrNull(nil, locationKey)
    if focus then
        return JSON.parse(focus)
    end
    focus = Items::projectsTimeDistribution()
                .sort{|i1, i2|
                    i1["timeInHours"] <=> i2["timeInHours"]
                }
                .first
    KeyValueStore::set(nil, locationKey, JSON.generate(focus))
    focus
end

focus = getFocus()

# focus : {
#     "projectname" : String,
#     "projectuuid" : String,
#     "timeInHours" : Float
# }

items1 = Items::items().select{|item| Runner::isRunning(item["uuid"]) }
items2 = Items::items()
            .select{|item| item["projectuuid"] == focus["projectuuid"] }
            .select{|item| !Runner::isRunning(item["uuid"]) } # running object have already been taken in items1
            .sort{|i1, i2| i1["referencetime"] <=> i2["referencetime"] }
            .first(3)
            .sort{|i1, i2| Bank::total(i1["uuid"]) <=> Bank::total(i2["uuid"]) }

timeInPingInHours = Ping::totalOverTimespan("ed4a67ee-c205-4ea4-a135-f10ea7782a7f", 86400).to_f/3600
basemetric = 
    if timeInPingInHours < 1 then
        0.66 - 0.10*timeInPingInHours # 0.66 -> 0.56 after one hour
    else
        timeInPingInHours = timeInPingInHours - 1
        0.2 + 0.36*Math.exp(-timeInPingInHours) # 0.56 -> 0.20 landing
    end

(items1+items2)
    .each_with_index {|item, indx|
        objects << itemToCatalystObject(item, basemetric, indx)
    }

puts JSON.generate(objects)

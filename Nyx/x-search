#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTarget.rb"

require_relative "Nyx.rb"

# --------------------------------------------------------------------

def transform(item)
    itemToDescription = lambda{|item|
        if item["type"] == "point" then
            return item["point"]["description"]
        end
        if item["type"] == "tag" then
            return item["tag"]
        end
    }

    itemToUniqueId = lambda{|item|
        if item["type"] == "point" then
            return "pointuuid:#{item["point"]["uuid"]}"
        end
        if item["type"] == "tag" then
            return "tag:#{item["tag"]}"
        end
    }

    {
        # {"type"=>"tag", "tag"=>"Pascal Guardian Open Cycles"}
        "subsystem"   => "Nyx",
        "description" => itemToDescription.call(item),
        "uniqueId"    => itemToUniqueId.call(item)
    }
end

searchResults = []
searchPattern = ARGV[0]
if searchPattern then
    globalss = NyxSearch::nextGenSearchFragmentToGlobalSearchStructure(searchPattern)
    globalss.each{|item|
        searchResults << transform(item)
    }
end
puts JSON.generate(searchResults)
exit


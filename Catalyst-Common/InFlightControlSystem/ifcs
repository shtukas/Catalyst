#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "InFlightControlSystem.rb"


# -------------------------------------------------------------------------

def itemToString(item)
        targetuid = item["targetuid"]        
        runTime = InFlightControlSystem::runTimeInSecondsOrNull(targetuid)
        runTimeAsString = runTime ? " (running for #{(runTime.to_f/3600).round(2)} hours)" : "" 
        ordinal = IFCS::getCurrentOrdinalForTargetOrNull(targetuid)
        expectation = IFCS::targetuidWithOrdinalTo24HoursTimeExpectationInSeconds(targetuid, ordinal)
        "position: #{"%6.3f" % item["position"]} | ordinal: #{ordinal} | expect: #{"%6.3f" % (expectation.to_f/3600)} hours | time: #{"%6.3f" % (IFCS::getTargetTimeInSeconds(targetuid).to_f/3600)} | metric: #{"%6.3f" % IFCS::targetToMetric(targetuid)} | #{item["description"]} #{runTimeAsString}"
end

def printSummary()
    IFCS::itemsOrderedByPosition()
        .each{|item| puts itemToString(item) }
end

def selectItemOrNull()
    toString = lambda{|item| itemToString(item) }
    puts "Select item to start"
    LucilleCore::selectEntityFromListOfEntitiesOrNull("item", IFCS::itemsOrderedByPosition(), toString)
end

loop {
    system("clear")
    printSummary()
    puts ""
    operations = [
        "start item",
        "unregister item"
    ]
    operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", operations)
    break if operation.nil?
    if operation == "start item" then
        item = selectItemOrNull()
        next if item.nil?
        InFlightControlSystem::start(item["targetuid"])
    end
    if operation == "unregister item" then
        item = selectItemOrNull()
        filepath = item["filepath"]
        puts filepath
        FileUtils.rm(filepath)
    end
}

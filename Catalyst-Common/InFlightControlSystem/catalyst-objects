#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "InFlightControlSystem.rb"


# -------------------------------------------------------------------------

items = [ IFCS::getDiveItem(), IFCS::getGGWItem() ]

if !IFCS::isOperating() and items.none?{|item| InFlightControlSystem::isRunning(item["targetuid"]) } then
    puts "[]"
    exit
end

objects = []

def itemToCatalystItem(item)
    targetuid = item["targetuid"]
    isRunning = InFlightControlSystem::isRunning(targetuid)
    runTime = InFlightControlSystem::runTimeInSecondsOrNull(targetuid)
    runTimeAsString = runTime ? " (running for #{(runTime.to_f/3600).round(2)} hours)" : "" 
    {
        "uuid"            => targetuid,
        "contentItem"     => {
            "type" => "line",
            "line" => "[ifcs #{(IFCS::targetTimeDifferentialInSecondsOrNull(targetuid).to_f/3600).round(2)}] #{item["description"]}#{runTimeAsString}"
        },
        "metric"          => (IFCS::targetToMetricOrNull(targetuid) || 2.718),
        "commands"        => [],
        "isRunning"       => InFlightControlSystem::isRunning(targetuid),
        "defaultCommand"  => isRunning ? "stop" : "start",
        "shell-redirects" => {
            "start"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst-Common/InFlightControlSystem/catalyst-objects-processing start '#{targetuid}'",
            "stop"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst-Common/InFlightControlSystem/catalyst-objects-processing stop '#{targetuid}'",
        },
        "item" => item
    }
end

objects << items.map{|item| itemToCatalystItem(item) }

puts JSON.generate(objects)

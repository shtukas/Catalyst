#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

def imports()
    LucilleCore::locationsAtFolder("/Users/pascal/Desktop/Nx50 Inbox").each{|location|
        break if Nx50s::isFull()
        puts location
        Nx50s::importLocationAsNewAionPointNx50(location)
        LucilleCore::removeFileSystemLocation(location)
        sleep 1
    }

    system("#{File.dirname(__FILE__)}/../../vienna-import")

    Nx50s::maintenance()
end

Thread.new {
    loop {
        sleep 300
        imports()
    }
}

getItems = lambda {
    UIServices::ns16s()
}

processItems = lambda {|items|

    system("clear")

    showNumbers = KeyValueStore::flagIsTrue(nil, "b08cad0a-3c7f-42ad-95d6-91f079adb2ba")

    status = Anniversaries::dailyBriefingIfNotDoneToday()
    return "ns:loop" if status

    vspaceleft = Utils::screenHeight()-6

    puts ""

    items.each_with_index{|item, indx|
        indexStr   = "(#{"%3d" % indx})"
        if showNumbers and item["metric"] then
            x0 = item["metric"][0]
            x1 = item["metric"][1]
            numbersStr = " ( #{x0.ljust(14)}, #{(x1 and x1 > 0) ? "%5.3f" % x1 : "     "} )"
        else
            numbersStr = ""
        end

        announce   = "#{indexStr}#{numbersStr} #{item["announce"]}"
        break if ((indx > 0) and ((vspaceleft - Utils::verticalSize(announce)) < 0))
        puts announce
        vspaceleft = vspaceleft - Utils::verticalSize(announce)
    }
    puts "listing: new wave / ondate / calendar item / quark / todo / work item / project | ondates | anniversaries | calendar | waves | projects | work | numbers on/off | exit".yellow
    if !items.empty? then
        puts "top    : .. (access top) | select / expose / start / done (<n>) | [] (Priority.txt) | <datecode> | done".yellow
    end

    command = LucilleCore::askQuestionAnswerAsString("> ")

    return "ns:loop" if command == ""

    if (unixtime = Utils::codeToUnixtimeOrNull(command.gsub(" ", ""))) then
        item = items[0]
        return "ns:loop" if item.nil? 
        DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
        return "ns:loop"
    end

    # -- listing -----------------------------------------------------------------------------

    if Interpreting::match("..", command) then
        UIServices::accessItem(items[0])
        return "ns:loop"
    end

    if Interpreting::match("select *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        UIServices::accessItem(items[ordinal])
        return "ns:loop"
    end

    if Interpreting::match("expose *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        return "ns:loop" if item.nil?
        puts JSON.pretty_generate(item)
        LucilleCore::pressEnterToContinue()
        return "ns:loop"
    end

    if Interpreting::match("access", command) then
        UIServices::accessItem(items[0])
        return "ns:loop"
    end

    if Interpreting::match("start *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        UIServices::accessItem(items[ordinal])
        return "ns:loop"
    end

    if Interpreting::match("done", command) then
        item = items[0]
        return "ns:loop" if item.nil? 
        return "ns:loop" if item["done"].nil?
        item["done"].call()
        return "ns:loop"
    end

    if Interpreting::match("done *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        return "ns:loop" if item.nil?
        return "ns:loop" if item["done"].nil?
        item["done"].call()
        return "ns:loop"
    end

    if Interpreting::match("new project", command) then
        Projects::interactivelyCreateNewProject()
        return "ns:loop"
    end

    if Interpreting::match("new ondate", command) then
        Nx31s::interactivelyIssueNewOrNull()
        return "ns:loop"
    end

    if Interpreting::match("new wave", command) then
        Waves::issueNewWaveInteractivelyOrNull()
        return "ns:loop"
    end

   if Interpreting::match("new todo", command) then
        line = LucilleCore::askQuestionAnswerAsString("line (empty to abort) : ")
        return "ns:loop" if line == ""
        nx50 = {
            "uuid"        => SecureRandom.uuid,
            "schema"      => "Nx50",
            "unixtime"    => Time.new.to_i,
            "description" => line,
            "contentType" => "Line",
            "payload"     => ""
        }
        puts JSON.pretty_generate(nx50)
        CoreDataTx::commit(nx50)
        return "ns:loop"
    end

    if Interpreting::match("new quark", command) then
        Quarks::interactivelyIssueNewOrNull()
        return "ns:loop"
    end

    if Interpreting::match("new work item", command) then
        Work::interactvelyIssueNewItem()
        return "ns:loop"
    end

    if Interpreting::match("new calendar item", command) then
        Calendar::interactivelyIssueNewCalendarItem()
        return "ns:loop"
    end

    if Interpreting::match("waves", command) then
        Waves::main()
        return "ns:loop"
    end

    if Interpreting::match("anniversaries", command) then
        Anniversaries::main()
        return "ns:loop"
    end

    if Interpreting::match("calendar", command) then
        Calendar::main()
        return "ns:loop"
    end

    if Interpreting::match("projects", command) then
        Projects::main()
        return "ns:loop"
    end

    if Interpreting::match("ondates", command) then
        Nx31s::main()
        return "ns:loop"
    end

    if Interpreting::match("work", command) then
        Work::main()
        return "ns:loop"
    end

    if Interpreting::match("numbers on", command) then
        KeyValueStore::setFlagTrue(nil, "b08cad0a-3c7f-42ad-95d6-91f079adb2ba")
        return "ns:loop"
    end

    if Interpreting::match("numbers off", command) then
        KeyValueStore::setFlagFalse(nil, "b08cad0a-3c7f-42ad-95d6-91f079adb2ba")
        return "ns:loop"
    end

    # -- top -----------------------------------------------------------------------------

    if Interpreting::match("[]", command) then
        item = items[0]
        next if item.nil? 
        next if item["[]"].nil?
        item["[]"].call()
        return "ns:loop"
    end

    if Interpreting::match("exit", command) then
        return "ns:exit"
    end

    "ns:loop"
}

UIServices::programmableListingDisplay(getItems, processItems)

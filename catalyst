#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'drb/drb'
require 'thread'

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# -----------------------------------------------------------------

require_relative "NSXMiscLibraries/NSXConstants.rb"
require_relative "NSXMiscLibraries/NSXBob.rb"
require_relative "NSXMiscLibraries/NSXCatalystObjectsOperator.rb"
require_relative "NSXMiscLibraries/NSXData.rb"
require_relative "NSXMiscLibraries/NSXDisplayUtils.rb"
require_relative "NSXMiscLibraries/NSXGeneralCommandHandler.rb"
require_relative "NSXMiscLibraries/NSXGenericContents.rb"
require_relative "NSXMiscLibraries/NSXDoNotShowUntilDatetime.rb"
require_relative "NSXMiscLibraries/NSXCatalystDevOps.rb"
require_relative "NSXMiscLibraries/NSXEmailClients.rb"
require_relative "NSXMiscLibraries/NSXEmailTrackingClaims.rb"
require_relative "NSXMiscLibraries/NSXFolderProbe.rb"
require_relative "NSXMiscLibraries/NSXLightThreadUtils.rb"
require_relative "NSXMiscLibraries/NSXMiscUtils.rb"
require_relative "NSXMiscLibraries/NSXRunner.rb"
require_relative "NSXMiscLibraries/NSXStreamsUtils.rb"
require_relative "NSXMiscLibraries/NSXStringParser.rb"

require_relative "NSXAgents/NSXAgentBabyNights.rb"
require_relative "NSXAgents/NSXAgentTodayNotes.rb"
require_relative "NSXAgents/NSXAgentHouse.rb"
require_relative "NSXAgents/NSXAgentLightThread.rb"
require_relative "NSXAgents/NSXAgentStreams.rb"
require_relative "NSXAgents/NSXAgentTheBridge.rb"
require_relative "NSXAgents/NSXAgentVienna.rb"
require_relative "NSXAgents/NSXAgentWave.rb"

# -------------------------------------------------------------------------

CATALYST_RUN_HASH = SecureRandom.hex
CATALYST_CODE_FOLDERPATH = File.dirname(__FILE__) 
CATALYST_INBOX_DROPOFF_FOLDERPATH = "/Users/pascal/Desktop/Catalyst-Inbox"

class CatalystDevOps

    # CatalystDevOps::collectInboxPackage()
    def self.collectInboxPackage()
        Dir.entries(CATALYST_INBOX_DROPOFF_FOLDERPATH)
            .select{|filename| filename[0, 1] != '.' }
            .map{|filename| "#{CATALYST_INBOX_DROPOFF_FOLDERPATH}/#{filename}" }
            .each{|sourcelocation|
                genericItem = NSXGenericContents::issueItemLocationMoveOriginal(sourcelocation)
                NSXStreamsUtils::issueItemAtNextOrdinalUsingGenericContentsItem("03b79978bcf7a712953c5543a9df9047", genericItem) # Inbox
            }
    end

    # CatalystDevOps::locationHashRecursively(location)
    def self.locationHashRecursively(location)
        if File.file?(location) then
            Digest::SHA1.hexdigest("#{location}:#{Digest::SHA1.file(location).hexdigest}")
        else
            trace = Dir.entries(location)
                .reject{|filename| filename.start_with?(".") }
                .map{|filename| "#{location}/#{filename}" }
                .map{|location| CatalystDevOps::locationHashRecursively(location) }
                .join("::")
            Digest::SHA1.hexdigest(trace)
        end
    end

end

class CatalystUI

    # CatalystUI::stringOrFirstString(content_type)
    def self.stringOrFirstString(content_type)
        if content_type.class.to_s == "String" then
            content_type
        else
            content_type.first
        end
    end

    # CatalystUI::objectShouldTriggerOnScreenNotification(object)
    def self.objectShouldTriggerOnScreenNotification(object)
        object["agentuid"] == "d2de3f8e-6cf2-46f6-b122-58b60b2a96f1" and object["data"]["stream-item"]["streamuuid"] == "03b79978bcf7a712953c5543a9df9047"
    end

    # CatalystUI::cardinalForTakingAllTheRunnings(objects)
    def self.cardinalForTakingAllTheRunnings(objects, cardinal = 0)
        objects = objects.clone
        if objects.any?{|object| object["isRunning"] } then
            CatalystUI::cardinalForTakingAllTheRunnings(objects[1, objects.size], cardinal+1)
        else
            cardinal
        end
    end

    # CatalystUI::performPrimaryDisplayWithCatalystObjects(displayObjects)
    def self.performPrimaryDisplayWithCatalystObjects(displayObjects)

        system("clear")

        while displayObjects.size>0 and NSXMiscUtils::objectIsAutoDone(displayObjects.first) do
            puts "-> processing auto done".green
            NSXGeneralCommandHandler::processCommand(displayObjects.first, "done")
            displayObjects = displayObjects.drop(1)
            return
        end
        
        verticalSpaceLeft = NSXMiscUtils::screenHeight()-2 # 2 for prompt and last empty line

        if displayObjects.size==0 then
            puts "No objects found"
            print "--> "
            command = STDIN.gets().strip
            NSXGeneralCommandHandler::processCommand(nil, command)
            return
        end

        performanceReportExecutableFilepath = "/Galaxy/LucilleOS/Binaries/month-performance"
        if !File.exists?(performanceReportExecutableFilepath) then
            puts "I can see the performance report executable filepath"
            LucilleCore::pressEnterToContinue()
            return
        else
            report = `#{performanceReportExecutableFilepath}`
            report = JSON.parse(report)
            if report["rent-percentage"] < 110 then
                puts "Month performance: #{report["rent-percentage"]} %".yellow
                verticalSpaceLeft = verticalSpaceLeft - 1
            end
        end

        standardlp = NSXMiscUtils::getStandardListingPosition()
        focusobject = nil

        displayObjects
            .first([CatalystUI::cardinalForTakingAllTheRunnings(displayObjects), verticalSpaceLeft].max)
            .each_with_index{|object, indx|
                position = indx+1
                if (position>1 and verticalSpaceLeft<=0) then
                    next
                end
                if position == standardlp then
                    focusobject = object
                end 
                displayStr = NSXDisplayUtils::objectToStringForCatalystListing(object, position, standardlp)
                verticalSize = NSXDisplayUtils::verticalSize(displayStr)
                puts displayStr
                verticalSpaceLeft = verticalSpaceLeft - verticalSize

            }

        if focusobject.nil? and (standardlp>1) then
            NSXMiscUtils::setStandardListingPosition(1)
            return
        end

        if focusobject.nil? then
            puts "Nothing to do for the moment (^_^)"
        end

        # -----------------------------------------------------------------------------------

        print "--> "
        endOfPrintTime = Time.new.to_f
        command = STDIN.gets().strip
        commandTime = Time.new.to_f
        if command=='' and (commandTime - endOfPrintTime) < 0.5 then
            return
        end

        # -----------------------------------------------------------------------------------

        if command == "" and NSXMiscUtils::objectIsDoneOnEmptyCommand(focusobject) then
            NSXGeneralCommandHandler::processCommand(focusobject, "done")
            return
        end

        if command == "done" then
            NSXGeneralCommandHandler::processCommand(focusobject, "done")
            return
        end

        if command.start_with?("'") then
            position = command[1,9].strip.to_i
            return if position==0
            return if position > displayObjects.size
            object = displayObjects[position-1]
            NSXDisplayUtils::doPresentObjectInviteAndExecuteCommand(object)
            return
        end

        NSXGeneralCommandHandler::processCommand(focusobject, command)
    end

    # CatalystUI::standardUILoop()
    def self.standardUILoop()
        loop {
            if STARTING_CODE_HASH != CatalystDevOps::locationHashRecursively(CATALYST_CODE_FOLDERPATH) then
                puts "Code change detected. Exiting."
                return
            end
            CatalystDevOps::collectInboxPackage()
            objects = NSXCatalystObjectsOperator::catalystObjectsForMainListing()
            CatalystUI::performPrimaryDisplayWithCatalystObjects(objects)
        }
    end

end

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

STARTING_CODE_HASH = CatalystDevOps::locationHashRecursively(CATALYST_CODE_FOLDERPATH)

# -------------------------------------------------------------------------

NSXStreamsUtils::sendOrphanStreamItemsToInbox()

# -------------------------------------------------------------------------

# Removing old dead emails

NSXStreamsUtils::allStreamsItemsEnumerator()
.each{|item|
    next if item["emailTrackingClaim"].nil?
    next if item["emailTrackingClaim"]["status"] != "dead"
    next if item["emailTrackingClaim"]["lastStatusUpdateUnixtime"] < (Time.new.to_i - 86400*30) # We keep the dead ones for 30 days
    puts JSON.pretty_generate(item)
    NSXStreamsUtils::destroyItem(item["filename"])
}

# -------------------------------------------------------------------------

# Archives Timeline Garbage Collection

if NSXMiscUtils::isLucille18() then
    NSXCatalystDevOps::archivesTimelineGarbageCollection(false)
end

# -------------------------------------------------------------------------

# Catalyst Interruption Screen Notification.

Thread.new {
    loop {
        sleep 130
        if NSXCatalystObjectsOperator::catalystObjectsForMainListing().any?{|object| CatalystUI::objectShouldTriggerOnScreenNotification(object) } then
            NSXMiscUtils::onScreenNotification("Catalyst", "Interruption")
        end
    }
}

# -------------------------------------------------------------------------

# Email Sync

Thread.new {
    return if !NSXMiscUtils::isLucille18()
    sleep 30
    loop {
        NSXMiscUtils::emailSync(false)
        sleep 1200
    }
}

# -------------------------------------------------------------------------

CatalystUI::standardUILoop()


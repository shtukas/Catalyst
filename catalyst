#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

def imports()
    LucilleCore::locationsAtFolder("/Users/pascal/Desktop/Nx50 Inbox").each{|location|
        #puts location
        Nx50s::importLocationAsNewAionPointNx50(location)
        LucilleCore::removeFileSystemLocation(location)
        sleep 1
    }

    system("#{File.dirname(__FILE__)}/../../vienna-import")

    Nx50s::maintenance()
end

Thread.new {
    loop {
        sleep 300
        imports()
    }
}

getItems = lambda {
    UIServices::ns16s()
}

processItems = lambda {|items|

    accessItem = lambda { |item| 
        return if item.nil? 
        return if item["access"].nil?
        item["access"].call()
    }

    system("clear")

    status = Anniversaries::dailyBriefingIfNotDoneToday()
    return "ns:loop" if status

    vspaceleft = Utils::screenHeight()-9

    puts ""

    CoreDataTx::getObjectsBySchema("NxFloat").each{|float|
        puts "☀️  #{float["description"]}"
        vspaceleft = vspaceleft - Utils::verticalSize(float["description"])
    }

    puts ""

    items.each_with_index{|item, indx|
        indexStr   = "(#{"%3d" % indx})"
        announce   = "#{indexStr} #{item["announce"]}"
        break if ((indx > 0) and ((vspaceleft - Utils::verticalSize(announce)) < 0))
        puts announce
        vspaceleft = vspaceleft - Utils::verticalSize(announce)
    }

    [
        [Work::todayTimeCompletionRatio(),  "- Work::todayTimeCompletionRatio() : #{Work::todayTimeCompletionRatio().round(2)}"],
        [Waves::todayDoneCountRatio(),      "- Waves::todayDoneCountRatio()     : #{Waves::todayDoneCountRatio().round(2)} (#{Bank::valueAtDate("WAVES-DONE-IMPACT-8F82-BFB47E4541A2", Utils::today())}, #{Waves::dailyDoneCountAverage()})"],
        [Nx50s::todayTimeCompletionRatio(), "- Nx50s::todayTimeCompletionRatio(): #{Nx50s::todayTimeCompletionRatio().round(2)}"]
    ]
        .sort{|x1, x2| x1[0]<=>x2[0] }
        .each{|x| puts x[1].yellow }

    puts "- Nx50s: #{CoreDataTx::getObjectsBySchema("Nx50").size} items; completion log: #{Nx50s::completionLogSize(1)}, #{Nx50s::completionLogSize(7)}, #{Nx50s::completionLogSize(30)}".yellow

    if !items.empty? then
        puts "top : .. | select (<n>) | done (<n>) | <datecode> | [] (Priority.txt) | ,, (floats) | '' (extended menu) | exit".yellow
    end

    command = LucilleCore::askQuestionAnswerAsString("> ")

    return "ns:loop" if command == ""

    if (unixtime = Utils::codeToUnixtimeOrNull(command.gsub(" ", ""))) then
        item = items[0]
        return "ns:loop" if item.nil? 
        DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
        puts "Hidden until: #{Time.at(unixtime).to_s}"
        return "ns:loop"
    end

    # -- listing -----------------------------------------------------------------------------

    if Interpreting::match("..", command) then
        accessItem.call(items[0])
        return "ns:loop"
    end

    if (ordinal = Interpreting::readAsIntegerOrNull(command)) then
        accessItem.call(items[ordinal])
        return "ns:loop"
    end

    if Interpreting::match("select *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        accessItem.call(items[ordinal])
        return "ns:loop"
    end

    if Interpreting::match("done", command) then
        item = items[0]
        return "ns:loop" if item.nil? 
        return "ns:loop" if item["done"].nil?
        item["done"].call()
        return "ns:loop"
    end

    if Interpreting::match("done *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        return "ns:loop" if item.nil?
        return "ns:loop" if item["done"].nil?
        item["done"].call()
        return "ns:loop"
    end

    # -- top -----------------------------------------------------------------------------

    if Interpreting::match("[]", command) then
        item = items[0]
        next if item.nil? 
        next if item["[]"].nil?
        item["[]"].call()
        return "ns:loop"
    end

    if Interpreting::match("''", command) then
        UIServices::operationalInterface()
        return "ns:loop"
    end

    if Interpreting::match(",,", command) then
        NxFloat::main()
    end

    if Interpreting::match("floats", command) then
        NxFloat::main()
    end

    if Interpreting::match("exit", command) then
        return "ns:exit"
    end

    "ns:loop"
}

UIServices::programmableListingDisplay(getItems, processItems)

#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'drb/drb'
require 'thread'

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# -----------------------------------------------------------------

require_relative "NSXMiscLibraries/NSXCatalystUI.rb"
require_relative "NSXMiscLibraries/NSXConstants.rb"
require_relative "NSXMiscLibraries/NSXBob.rb"
require_relative "NSXMiscLibraries/NSXCatalystObjectsOperator.rb"
require_relative "NSXMiscLibraries/NSXData.rb"
require_relative "NSXMiscLibraries/NSXDisplayUtils.rb"
require_relative "NSXMiscLibraries/NSXGeneralCommandHandler.rb"
require_relative "NSXMiscLibraries/NSXGenericContents.rb"
require_relative "NSXMiscLibraries/NSXDoNotShowUntilDatetime.rb"
require_relative "NSXMiscLibraries/NSXEstateServices.rb"
require_relative "NSXMiscLibraries/NSXEmailClients.rb"
require_relative "NSXMiscLibraries/NSXEmailTrackingClaims.rb"
require_relative "NSXMiscLibraries/NSXFolderProbe.rb"
require_relative "NSXMiscLibraries/NSXLightThreadUtils.rb"
require_relative "NSXMiscLibraries/NSXMiscUtils.rb"
require_relative "NSXMiscLibraries/NSXRunner.rb"
require_relative "NSXMiscLibraries/NSXStreamsUtils.rb"
require_relative "NSXMiscLibraries/NSXStringParser.rb"

require_relative "NSXAgents/NSXAgentBabyNights.rb"
require_relative "NSXAgents/NSXAgentTodayNotes.rb"
require_relative "NSXAgents/NSXAgentHouse.rb"
require_relative "NSXAgents/NSXAgentLightThread.rb"
require_relative "NSXAgents/NSXAgentStreams.rb"
require_relative "NSXAgents/NSXAgentTheBridge.rb"
require_relative "NSXAgents/NSXAgentVienna.rb"
require_relative "NSXAgents/NSXAgentWave.rb"

# -------------------------------------------------------------------------

CATALYST_RUN_HASH = SecureRandom.hex
CATALYST_CODE_FOLDERPATH = File.dirname(__FILE__) 
CATALYST_INBOX_DROPOFF_FOLDERPATH = "/Users/pascal/Desktop/Catalyst-Inbox"

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

STARTING_CODE_HASH = NSXEstateServices::locationHashRecursively(CATALYST_CODE_FOLDERPATH)

# -------------------------------------------------------------------------

NSXStreamsUtils::sendOrphanStreamItemsToInbox()

# -------------------------------------------------------------------------

# Removing old dead emails

NSXStreamsUtils::allStreamsItemsEnumerator()
.each{|item|
    next if item["emailTrackingClaim"].nil?
    next if item["emailTrackingClaim"]["status"] != "dead"
    next if item["emailTrackingClaim"]["lastStatusUpdateUnixtime"] < (Time.new.to_i - 86400*30) # We keep the dead ones for 30 days
    puts JSON.pretty_generate(item)
    NSXStreamsUtils::destroyItem(item["filename"])
}

# -------------------------------------------------------------------------

# Archives Timeline Garbage Collection

if NSXMiscUtils::isLucille18() then
    NSXEstateServices::archivesTimelineGarbageCollection(true)
end

# -------------------------------------------------------------------------

# Catalyst Interruption Screen Notification.

Thread.new {
    loop {
        sleep 130
        if NSXCatalystObjectsOperator::catalystObjectsForMainListing().any?{|object| NSXCatalystUI::objectShouldTriggerOnScreenNotification(object) } then
            NSXMiscUtils::onScreenNotification("Catalyst", "Interruption")
        end
    }
}

# -------------------------------------------------------------------------

# Email Sync

Thread.new {
    return if !NSXMiscUtils::isLucille18()
    sleep 30
    loop {
        NSXMiscUtils::emailSync(false)
        sleep 1200
    }
}

# -------------------------------------------------------------------------

NSXCatalystUI::standardUILoop()


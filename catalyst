#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"
require_relative "catalyst.rb"
# -----------------------------------------------------------------

# CatalystInterfaceUtils::commandLineStreamInterface()

class CatalystInterfaceUtils

    def self.object2Line_v1(object)
        announce = object['announce'].strip
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        part1 = 
            [
                "(#{"%.3f" % object["metric"]})",
                " [#{object["uuid"]}]",
                " #{announce}",
            ].join()
        if object["is-running"] then
            part1 = part1.green
        end
        part2 = 
            [
                "#{requirementsAsString.green}",
                CommonsUtils::object2DonotShowUntilAsString(object),
                " (#{object["commands"].join(" ").red})",
                " \"#{defaultExpressionAsString.green}\""
            ].join()
        part1 + part2
    end

    def self.positionOfLastRunningItemOrZero(objects)
        return 0 if objects.none?{ |object| object["is-running"] }
        while !objects.last["is-running"] do
            objects.pop
        end
        objects.size
    end

    def self.displayObject(object, standardlp)
        if standardlp then
            puts "[  #{"%2d" % standardlp}] #{CatalystInterfaceUtils::object2Line_v1(object)}"
        else
            puts CatalystInterfaceUtils::object2Line_v1(object)
        end
    end

    def self.positionDisplay(standardlp, position)
        if standardlp and position and standardlp==position then
            "[* #{"%2d" % position}]"
        else
            if position then
                "[  #{"%2d" % position}]"
            else
                "[]"
            end
        end
    end

    def self.objectToLineMainListing(object, position, standardlp)
        "#{CatalystInterfaceUtils::positionDisplay(standardlp, position)} #{CommonsUtils::object2Line_v0(object)[0,CommonsUtils::screenWidth()-9]}"
    end

    def self.objectToLineMainListingLambdaWithColour(object, position, standardlp)
        str = CatalystInterfaceUtils::objectToLineMainListing(object, position, standardlp)
        if object["metric"]>1 then
            str = str.yellow
        end
        if object["is-running"] then
            str = str.green
        end
        str
    end

    def self.nextMetric0928()
        objects = CommonsUtils::generalFlockUpgradeThenOrderedDisplayObjects()
            .select{|object| CommonsUtils::hasMetricOverride(object["uuid"]) }
        return 5 if objects.size == 0
        0.5*objects.map{|object| object["metric"] }.min + 0.5
    end

    def self.executeCommandAgainstObject(object, command, standardlp, displayobjects)
        if command=="." then
            
        end
        if command=="+" then
            CommonsUtils::setStandardListingPosition(CommonsUtils::getStandardListingPosition()+1)
            return
        end
        if command.start_with?("metric") and !command.start_with?("metric:") then
            _, metric = StringParser::decompose(command)
            # We currently assume that it's either a float or 'next'
            metric = 
                if metric == "next" then
                    CatalystInterfaceUtils::nextMetric0928()
                else
                    metric.to_f
                end
            CommonsUtils::setMetricOverride(object["uuid"], metric)
            CommonsUtils::setStandardListingPosition(CommonsUtils::getStandardListingPosition()+1)
            return
        end
        if command.start_with?(":") then
            token, rest = StringParser::decompose(command)
            position = nil
            if token == ":this" then
                position = standardlp
            end
            if CommonsUtils::isInteger(token[1,token.size]) then
                position = token[1,token.size].to_i
            end
            return if position.nil?
            # At that point the target position is known.
            if rest.nil? then
                # :<position>         # set the listing reference point
                CommonsUtils::setStandardListingPosition([position, 0].max)
                return
            end
            if rest.start_with?("metric") then
                _, metric = rest.split(" ")
                o = displayobjects.take(position).last
                return if o.nil?
                CommonsUtils::setMetricOverride(o["uuid"], metric.to_f)
                return
            end
            command = rest
            o = displayobjects.take(position).last
            return if o.nil?
            CommonsUtils::processObjectAndCommand(o, command)
            return
        end
        command = command.size>0 ? command : ( object["default-expression"] ? object["default-expression"] : "" )
        CommonsUtils::processObjectAndCommand(object, command)
    end

    def self.processObjectForMetricRequirement(object, displayobjects)
        system("clear")
        displayobjects
            .select{|object| object["metric"]>1 }
            .each{|object| 
                puts CatalystInterfaceUtils::objectToLineMainListingLambdaWithColour(object, nil, nil) 
            }
        puts ""
        puts "Middle of week day:"
        puts "Processing object for metric requirements (do, postpone, or metric <metric>):"
        command = CatalystInterfaceUtils::doDisplayObjectAndPromptAndReturnCommand(object, nil)
        CatalystInterfaceUtils::executeCommandAgainstObject(object, command, nil, nil)
    end

    def self.doDisplayObjectAndPromptAndReturnCommand(object, standardlp)
        CatalystInterfaceUtils::displayObject(object, standardlp)
        print "--> "
        command = STDIN.gets().strip
        command
    end

    def self.displayLoop(codehash)
        loop {
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("7e6a229e-8464-4f33-9b8d-9cfbe5a4af41", "0").to_i ) and CommonsUtils::isLucille18() then
                puts "Archives timeline garbage collection..."
                CatalystDevOps::archivesTimelineGarbageCollection()
                FKVStore::set("7e6a229e-8464-4f33-9b8d-9cfbe5a4af41", Time.new.to_i + Random::rand*86400)
                next
            end
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("9dcc9a69-cd99-48de-82af-f25d4d382df5", "0").to_i ) and CommonsUtils::isLucille18() then
                puts "Events timeline garbage collection..."
                CatalystDevOps::eventsTimelineGarbageCollection()
                FKVStore::set("9dcc9a69-cd99-48de-82af-f25d4d382df5", Time.new.to_i + Random::rand*86400)
                next
            end
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("e138267d-2aff-4a34-99bf-e396e0ddb6cb", "0").to_i ) then
                if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
                    puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}"
                    LucilleCore::pressEnterToContinue()
                end
                FKVStore::set("e138267d-2aff-4a34-99bf-e396e0ddb6cb", Time.new.to_i + Random::rand*3600*2)
                next
            end

            system("clear")
            averageDailyCommitmentInHours, doneInHours, percentageDone = ProjectsCore::projectsTimes()
            puts "Average project time: #{"%.2f" % ProjectsCore::averageDailyCommitmentInHours()} hours/day ( #{"%.2f" % percentageDone} % done )"
            puts ""

            standardlp = CommonsUtils::getStandardListingPosition()
            displayobjects = CommonsUtils::generalFlockUpgradeThenOrderedDisplayObjects()

            # -----------------------------------------------------------------------------------
            # [] Between 10am and 4pm, week days, anything with a metric >= 0.2 that doesn't have a metric override, should be reviewd and a metric added to it
            if CommonsUtils::isWeekDay() and Time.new.hour >= 10 and Time.new.hour < 16 then
                displayobjectsx = CommonsUtils::generalFlockUpgradeThenOrderedDisplayObjects()
                    .select{|object| object["metric"] >= 0.5 }
                if displayobjectsx.any?{|object| !CommonsUtils::hasMetricOverride(object["uuid"]) } then
                    object = displayobjectsx.select{|object| !CommonsUtils::hasMetricOverride(object["uuid"]) }.first
                    CatalystInterfaceUtils::processObjectForMetricRequirement(object, displayobjects)
                    next
                end
            end
            # -----------------------------------------------------------------------------------

            object = displayobjects.clone.take(standardlp).last

            # --------------------------------------------------------------------------------
            if Bob::agentuuid2AgentData(object["agent-uid"]).nil? then
                LucilleCore::pressEnterToContinue()
                EventsManager::commitEventToTimeline(EventsMaker::destroyCatalystObject(object["uuid"]))
                TheFlock::removeObjectIdentifiedByUUID(object["uuid"])
                next
            end
            # --------------------------------------------------------------------------------

            # --------------------------------------------------------------------------------
            # Sometimes a wave item that is an email, gets deleted by the EmailClients process.
            # In such a case they are still in Flock and should not be showed
            if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" then
                if object["schedule"][":wave-emails:"] then
                    if !File.exists?(object["item-data"]["folderpath"]) then
                        TheFlock::removeObjectIdentifiedByUUID(object["uuid"])
                        EventsManager::commitEventToTimeline(EventsMaker::destroyCatalystObject(object["uuid"]))
                        next
                    end
                end
            end
            # --------------------------------------------------------------------------------

            # --------------------------------------------------------------------------------
            # Listing display
            amountToDisplay = [ CommonsUtils::screenHeight()-7, self.positionOfLastRunningItemOrZero(displayobjects.clone) ].max
            displayobjectsx = displayobjects.clone.take(amountToDisplay)
            if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
                puts "REQUIREMENTS: OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
            end
            position = 0
            if displayobjectsx.any?{|object| object["metric"]>1 } then
                while displayobjectsx.any?{|object| object["metric"]>1 } do
                    xobject = displayobjectsx.shift
                    position = position+1
                    puts CatalystInterfaceUtils::objectToLineMainListingLambdaWithColour(xobject, position, standardlp)
                end
                if displayobjectsx.any?{|object| object["metric"]<=1 } then
                    puts ""
                end
            end
            displayobjectsx.each{|object|
                position = position+1
                puts CatalystInterfaceUtils::objectToLineMainListingLambdaWithColour(object, position, standardlp)
            }
            # --------------------------------------------------------------------------------

            puts ""

            command = CatalystInterfaceUtils::doDisplayObjectAndPromptAndReturnCommand(object, standardlp)

            if codehash != CommonsUtils::codeHash() then
                puts "Source code hash changed. Exiting!"
                exit
            end

            CatalystInterfaceUtils::executeCommandAgainstObject(object, command, standardlp, displayobjects.clone)

        }
    end
end

codehash = CommonsUtils::codeHash()
FlockDiskIO::loadFromEventsTimeline()

Thread.new {
    loop {
        if CommonsUtils::isLucille18() then
            CommonsUtils::emailSync(false)
        end
        sleep 1200
    }
}

Thread.new {
    loop {
        ProjectsCore::projectsUUIDs()
            .each{|projectuuid| 
                if Chronos::isRunning(projectuuid) and TimeStructuresOperator::projectLiveRatioDoneOrNull(projectuuid)>1 then
                    system("terminal-notifier -title 'Catalyst Project Monitor' -message '#{ProjectsCore::projectUUID2NameOrNull(projectuuid)} is done'")
                    sleep 2
                end
            }

        Dir.entries("/Galaxy/DataBank/Catalyst/Agents-Data/project-time")
            .select{|filename| filename[-5, 5]=='.json' }
            .map{|filename| "/Galaxy/DataBank/Catalyst/Agents-Data/project-time/#{filename}" }
            .map{|filepath| JSON.parse(IO.read(filepath)) }
            .each{|object|
                uuid = object["uuid"]
                projectuuid = object["project-uuid"]
                hours = object["commitment-in-hours"]
                doneTimeInSeconds = Chronos::summedTimespansWithDecayInSecondsLiveValue(uuid, 1)
                doneRatio = (doneTimeInSeconds.to_f/3600).to_f/hours
                if doneRatio > 1 then
                    system("terminal-notifier -title 'Catalyst Project Mini Time Monitor' -message '#{ProjectsCore::projectUUID2NameOrNull(projectuuid)} is done'")
                    sleep 2
                end
            }

        ProjectsCore::localTimeStructuresDataFiles().each{|data|
            projectuuid = data["projectuuid"]
            referenceTimeStructure = data["reference-time-structure"]
            data["local-commitments"]
                .each{|item|
                    next if !Chronos::isRunning(item["uuid"])
                    timestructure = {}
                    timestructure["time-unit-in-days"] = referenceTimeStructure["time-unit-in-days"]
                    timestructure["time-commitment-in-hours"] = referenceTimeStructure["time-commitment-in-hours"] * item["timeshare"]
                    timedoneInHours, timetodoInHours, ratio = TimeStructuresOperator::doneMetricsForTimeStructure(item["uuid"], timestructure)
                    if ratio > 1 then
                        system("terminal-notifier -title 'Catalyst Sub-Project ' -message 'project: #{ProjectsCore::projectUUID2NameOrNull(projectuuid)} / sub: #{item["description"]} is done'")
                        sleep 2
                    end
                }
        }

        Dir.entries("/Galaxy/DataBank/Catalyst/Agents-Data/floating-time-structures")
            .select{|filename| filename[-5, 5]=='.json' }
            .map{|filename| "/Galaxy/DataBank/Catalyst/Agents-Data/floating-time-structures/#{filename}" }
            .map{|filepath| [filepath, JSON.parse(IO.read(filepath))] }
            .map{|data|
                filepath, packet = data
                # object: { :uuid, :description, :timestructure }
                uuid = packet["uuid"]
                next if !Chronos::isRunning(uuid)
                description = packet["description"]
                timestructure = packet["timestructure"]
                timedoneInHours, timetodoInHours, ratio = TimeStructuresOperator::doneMetricsForTimeStructure(uuid, timestructure)
                if ratio > 1 then
                    system("terminal-notifier -title 'Catalyst Sub-Project ' -message 'floating time structures: #{description} is done'")
                    sleep 2
                end
            }

        sleep 60
    }
}

CatalystInterfaceUtils::displayLoop(codehash)

#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"

require_relative "Wave-Emails.rb"
require_relative "Commons.rb"

require_relative "Agent-GuardianTime.rb"
require_relative "Agent-Kimchee.rb"
require_relative "Agent-Ninja.rb"
require_relative "Agent-Projects.rb"
require_relative "Agent-Stream.rb"
require_relative "Agent-TimeCommitments.rb"
require_relative "Agent-Today.rb"
require_relative "Agent-Vienna.rb"
require_relative "Agent-Wave.rb"

# ----------------------------------------------------------------------

# Mercury::putshelp()
# Mercury::fDoNotShowUntilDateTimeTransform()
# Mercury::isInteger(str)
# Mercury::emailSync(verbose)
# Mercury::screenHeight()
# Mercury::screenWidth()
# Mercury::editTextUsingTextmate(text)
# Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
# Mercury::object2Line_v0(object)
# Mercury::object2Line_v1(object)
# Mercury::interactiveDisplayObjectAndProcessCommand(object)
# Mercury::takeWorkspaceSizeOrUpToFirstNewObject(workspaceSize, previousObjects, allObjectsLeft, allObjectsSelected = [])
# Mercury::processObjectAndCommand(object, command)
# Mercury::main2()

class Mercury

    def self.putshelp()
        puts "Special General Commands (view)"
        puts "    help"
        puts "    top"
        puts "    search <pattern>"
        puts "    l:show"
        puts "    r:on <requirement>"
        puts "    r:off <requirement>"
        puts "    r:show [requirement] # optional parameter # shows all the objects of that requirement"
        puts ""
        puts "File"
        puts "    file new"
        puts "    file open"
        puts ""
        puts "Special General Commands (inserts)"
        puts "    wave: <description>"
        puts "    stream: <description>"
        puts "    project: <description>"
        puts ""
        puts "Special General Commands (special circumstances)"
        puts "    clear # clear the screen"
        puts "    interface # run the interface of a given agent"
        puts "    lib # Invoques the Librarian interactive"
        puts ""
        puts "Special Object Commands:"
        puts "    (+)datetimecode"
        puts "    expose # pretty print the object"
        puts "    !today"
        puts "    l:add"
        puts "    r:add <requirement>"
        puts "    r:remove <requirement>"
        puts "    command ..."

    end

    def self.fDoNotShowUntilDateTimeTransform()
        $flock["objects"] = $flock["objects"].map{|object|
            if !$flock["do-not-show-until-datetime-distribution"][object["uuid"]].nil? and (Time.new.to_s < $flock["do-not-show-until-datetime-distribution"][object["uuid"]]) and object["metric"]<=1 then
                # The second condition in case we start running an object that wasn't scheduled to be shown today (they can be found through search)
                object["do-not-show-until-datetime"] = $flock["do-not-show-until-datetime-distribution"][object["uuid"]]
                object["metric"] = 0
            end
            if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" and object["schedule"]["do-not-show-until-datetime"] and (Time.new.to_s < object["schedule"]["do-not-show-until-datetime"]) and object["metric"]<=1 then
                # The second condition in case we start running an object that wasn't scheduled to be shown today (they can be found through search)
                object["do-not-show-until-datetime"] = object["schedule"]["do-not-show-until-datetime"]
                object["metric"] = 0
            end
            object
        }
    end

    def self.isInteger(str)
        str.to_i.to_s == str
    end

    def self.emailSync(verbose)
        begin
            newEmailCount = GeneralEmailClient::sync(JSON.parse(IO.read("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/guardian-relay.json")), verbose)
            if newEmailCount>0 then
                #puts "Retrieved #{newEmailCount} new emails"
            end
            OperatorEmailClient::download(JSON.parse(IO.read("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/operator.json")), verbose)
        rescue
        end
    end

    def self.screenHeight()
        `/usr/bin/env tput lines`.to_i
    end

    def self.screenWidth()
        `/usr/bin/env tput cols`.to_i
    end

    def self.editTextUsingTextmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)
    end

    def self.processItemDescriptionPossiblyAsTextEditorInvitation(description)
        if description=='text' then
            editTextUsingTextmate("")
        else
            description
        end
    end

    def self.object2Line_v0(object)
        announce = object['announce'].lines.first.strip
        if object["metric"]>1 then
            announce = announce.green
        end
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{doNotShowUntilAsString}",
        ].join()
    end

    def self.object2Line_v1(object)
        announce = object['announce'].strip
        if object["metric"]>1 then
            announce = announce.green
        end
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{requirementsAsString.green}",
            "#{doNotShowUntilAsString}",
            " (#{object["commands"].join(" ").red})",
            " \"#{defaultExpressionAsString.green}\""
        ].join()
    end

    def self.interactiveDisplayObjectAndProcessCommand(object)
        print Mercury::object2Line_v1(object) + " : "
        givenCommand = STDIN.gets().strip
        command = givenCommand.size>0 ? givenCommand : ( object["default-expression"] ? object["default-expression"] : "" )
        Mercury::processObjectAndCommand(object, command)
    end

    def self.processObjectAndCommand(object, expression)

        # no object needed

        if expression == 'help' then
            Mercury::putshelp()
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == 'clear' then
            system("clear")
            return
        end

        if expression == "interface" then
            LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("agent", PrimaryOperator::agents(), lambda{ |agent| agent["agent-name"] })["interface"].call()
            return
        end

        if expression == 'info' then
            puts "CatalystDevOps::getArchiveTimelineSizeInMegaBytes(): #{CatalystDevOps::getArchiveTimelineSizeInMegaBytes()}".green
            puts "Todolists:".green
            puts "    Stream count : #{( count1 = Stream::getUUIDs().size )}".green
            puts "    Vienna count : #{(count3 = $viennaLinkFeeder.links().count)}".green
            puts "    Total        : #{(count1+count3)}".green
            puts "Requirements:".green
            puts "    On  : #{(RequirementsOperator::getAllRequirements() - RequirementsOperator::getCurrentlyUnsatisfiedRequirements()).join(", ")}".green
            puts "    Off : #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".green
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == 'lib' then
            LibrarianExportedFunctions::librarianUserInterface_librarianInteractive()
            return
        end

        if expression == 'file new' then
            filename = LucilleCore::askQuestionAnswerAsString("Name: ")
            filepath = "#{CATALYST_COMMON_DATABANK_FOLDERPATH}/TextFiles/#{filename}.txt"
            FileUtils.touch(filepath)
            system("open '#{filepath}'")
            return
        end

        if expression == 'file open' then
            filepaths = Dir.entries("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/TextFiles").select{|filename| filename[-4, 4]==".txt" }.map{|filename| "#{CATALYST_COMMON_DATABANK_FOLDERPATH}/TextFiles/#{filename}" }
            return if filepaths.size==0
            filepath = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("open:", filepaths, lambda{ |filepath| File.basename(filepath) })
            return if filepath.nil?
            system("open '#{filepath}'")
            return
        end

        if expression.start_with?("l:add") then
            command, maybedomain = expression.split(" ").map{|t| t.strip }
            domain = 
                if maybedomain.size>0 then
                    maybedomain
                else
                    LucilleCore::interactivelySelectValueStringFromListOfValueStringsOrCreateNewValueString("domain", Lava::domains())
                end
            return if domain.nil?
            object[":lava:"] = { "domain" => domain , "ordinal" => Time.new.to_i }
            EventsManager::commitEventToTimeline(EventsMaker::catalystObject(object))
            FlockTransformations::addOrUpdateObject(object)
            FKVStore::set("0cda77d7-1c03-4adb-9e36-655df4ff0d8d:#{domain}", Time.new.to_i)
            return
        end

        if expression.start_with?("l:show") then
            showDomainInLoop = lambda {|domain|
                loop {
                    xobjects = $flock["objects"]
                                .select{|object| object[":lava:"] }
                                .select{|object| object[":lava:"]["domain"]==domain }
                                .sort{|o1, o2| o1[":lava:"]["ordinal"]<=>o2[":lava:"]["ordinal"] }
                    xobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", xobjects, lambda{ |object| Mercury::object2Line_v0(object) })
                    break if xobject.nil?
                    Mercury::interactiveDisplayObjectAndProcessCommand(xobject)
                }
            }
            command, maybedomain = expression.split(" ").map{|t| t.strip }
            if maybedomain and maybedomain.size>0 then
                showDomainInLoop.call(maybedomain)
            else
                loop {
                    domain = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("domain", Lava::domains())
                    break if domain.nil?
                    showDomainInLoop.call(domain)
                }
            end
            return
        end

        if expression.start_with?('wave:') then
            description = expression[5, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = Wave::issueNewItemWithDescriptionInteractive(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression.start_with?('stream:') then
            description = expression[7, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = Stream::issueNewItemWithDescription(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression.start_with?('project:') then
            description = expression[13, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = Projects::issueNewItemWithDescription(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression.start_with?('swat:') then
            description = expression[5, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = SWAT::issueNewItemWithDescription(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression.start_with?("r:on") then
            command, requirement = expression.split(" ").map{|t| t.strip }
            RequirementsOperator::setSatisfifiedRequirement(requirement)
            return
        end

        if expression.start_with?("r:off") then
            command, requirement = expression.split(" ").map{|t| t.strip }
            RequirementsOperator::setUnsatisfiedRequirement(requirement)
            return
        end

        if expression.start_with?("r:show") then
            command, requirement = expression.split(" ").map{|t| t.strip }
            if requirement.nil? or requirement.size==0 then
                requirement = RequirementsOperator::selectRequirementFromExistingRequirementsOrNull()
            end
            loop {
                requirementObjects = $flock["objects"].select{ |object| RequirementsOperator::getObjectRequirements(object['uuid']).include?(requirement) }
                selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", requirementObjects, lambda{ |object| Mercury::object2Line_v0(object) })
                break if selectedobject.nil?
                Mercury::interactiveDisplayObjectAndProcessCommand(selectedobject)
            }
            return
        end

        if expression.start_with?("search") then
            pattern = expression[6,expression.size].strip
            loop {
                searchobjects = $flock["objects"].select{|object| Mercury::object2Line_v0(object).downcase.include?(pattern.downcase) }
                break if searchobjects.size==0
                selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", searchobjects, lambda{ |object| Mercury::object2Line_v0(object) })
                break if selectedobject.nil?
                Mercury::interactiveDisplayObjectAndProcessCommand(selectedobject)
            }
            return
        end

        return if object.nil?

        # object needed

        if expression == '!today' then
            TodayOrNotToday::notToday(object["uuid"])
            return
        end

        if expression == 'expose' then
            puts JSON.pretty_generate(object)
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression.start_with?('+') then
            code = expression
            if (datetime = CommonsUtils::codeToDatetimeOrNull(code)) then
                $flock["do-not-show-until-datetime-distribution"][object["uuid"]] = datetime
                EventsManager::commitEventToTimeline(EventsMaker::doNotShowUntilDateTime(object["uuid"], datetime))
            end
            return
        end

        if expression.start_with?("r:add") then
            command, requirement = expression.split(" ").map{|t| t.strip }
            RequirementsOperator::addRequirementToObject(object['uuid'],requirement)
            return
        end

        if expression.start_with?("r:remove") then
            command, requirement = expression.split(" ").map{|t| t.strip }
            RequirementsOperator::removeRequirementFromObject(object['uuid'],requirement)
            return
        end

        if expression.size > 0 then
            tokens = expression.split(" ").map{|t| t.strip }
            .each{|command|
                PrimaryOperator::agentuuid2AgentData(object["agent-uid"])["object-command-processor"].call(object, command)
            }
        else
            PrimaryOperator::agentuuid2AgentData(object["agent-uid"])["object-command-processor"].call(object, "")
        end
    end

    def self.main2(runId)
        workspaceSize = 1
        mainschedule = {}
        mainschedule["archives-gc"] = Time.new.to_i + Random::rand*86400
        mainschedule["events-gc"]   = Time.new.to_i + Random::rand*86400
        mainschedule["lava-domains-review"] = Time.new.to_i + Random::rand*3600*6
        mainschedule["requirements-off-notification"] = Time.new.to_i + Random::rand*3600*2
        loop {
            PrimaryOperator::generalUpgrade()
            TodayOrNotToday::transform()
            RequirementsOperator::transform()
            Mercury::fDoNotShowUntilDateTimeTransform()
            $flock["objects"].map{|object|
                next if object[":lava:"].nil?
                object["metric"] = 0
            }
            $flock["objects"] = $flock["objects"].sort{|o1,o2| o1['metric']<=>o2['metric'] }.reverse
            system("clear")
            puts  "LAVA            : #{Lava::domains().join(", ")}".yellow
            puts  "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
            print "Files           : ".yellow
            filenames = Dir.entries("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/TextFiles")
                .select{|filename| filename[-4, 4]==".txt" }
                .map{|filename| filename[0, filename.size-4] }
            puts filenames.join(", ").yellow
            dayprogression = {
                "projects" => ( GenericTimeTracking::adaptedTimespanInSeconds(CATALYST_COMMON_PROJECTS_AGENT_METRIC_GENERIC_TIME_TRACKING_KEY).to_f/3600 ).to_f/3,
                "stream"   => ( GenericTimeTracking::adaptedTimespanInSeconds(CATALYST_COMMON_STREAM_AGENT_METRIC_GENERIC_TIME_TRACKING_KEY).to_f/3600 ).to_f/3
            }
            if dayprogression["projects"] >= 1 and dayprogression["stream"] >= 1 then
                puts "DAY PROGRESSION : Cleared for night".green
            else
                puts "DAY PROGRESSION : Projects: #{ (100*dayprogression["projects"]).to_i } % ; Stream: #{ (100*dayprogression["stream"]).to_i } %".red
            end
            if ( Time.new.to_i > mainschedule["archives-gc"] ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::archivesTimelineGarbageCollection()
                puts "Archives timeline garbage collection: #{lines.size}"
                lines.each{|line|
                    puts "    - #{line}"
                }
                LucilleCore::pressEnterToContinue() if lines.size>0
                mainschedule["archives-gc"] = Time.new.to_i + Random::rand*86400
            end
            if ( Time.new.to_i > mainschedule["events-gc"] ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::eventsTimelineGarbageCollection()
                puts "Events timeline garbage collection: #{lines.size}"
                lines.each{|line|
                    puts "    - #{line}"
                }
                LucilleCore::pressEnterToContinue() if lines.size>0
                mainschedule["events-gc"] = Time.new.to_i + Random::rand*86400
            end
            if ( Time.new.to_i > mainschedule["lava-domains-review"] ) then
                Lava::domains().each{|domain|
                    puts ""
                    puts "Showing #{domain}"
                    loop {
                        xobjects = $flock["objects"]
                                    .select{|object| object[":lava:"] }
                                    .select{|object| object[":lava:"]["domain"]==domain }
                                    .sort{|o1, o2| o1[":lava:"]["ordinal"]<=>o2[":lava:"]["ordinal"] }
                        break if xobjects.empty?
                        xobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", xobjects, lambda{ |object| Mercury::object2Line_v0(object) })
                        break if xobject.nil?
                        Mercury::interactiveDisplayObjectAndProcessCommand(xobject)
                    }
                }
                mainschedule["lava-domains-review"] = Time.new.to_i + Random::rand*3600*6
                next
            end
            if ( Time.new.to_i > mainschedule["requirements-off-notification"] ) then
                puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}"
                LucilleCore::pressEnterToContinue()
                mainschedule["requirements-off-notification"] = Time.new.to_i + Random::rand*3600*2
                next
            end
            objectselected = $flock["objects"].take(workspaceSize).last.clone
            $flock["objects"].take(workspaceSize).each_with_index{|o, index|
                string =
                    if o["uuid"]==objectselected["uuid"] then
                        "#{"%2d" % (index+1)} [*] #{Mercury::object2Line_v1(o)}"
                    else
                        "#{"%2d" % (index+1)}     #{Mercury::object2Line_v0(o)}"
                    end
                puts string
            }
            print "--> "
            givenCommand = STDIN.gets().strip
            if givenCommand=="+" then
                workspaceSize = workspaceSize+1
                next
            end
            if givenCommand=="-" then
                workspaceSize = [workspaceSize-1, 1].max
                next
            end
            if Mercury::isInteger(givenCommand) then
                workspaceSize = [givenCommand.to_i, 1].max
                next
            end
            command = givenCommand.size>0 ? givenCommand : ( objectselected["default-expression"] ? objectselected["default-expression"] : "" )
            Mercury::processObjectAndCommand(objectselected, command)
            File.open("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/run-identifier.data", "w") {|f| f.write(runId) }
        }
    end
end

# -----------------------------------------------------------------

runId = SecureRandom.hex

Thread.new {
    loop {
        sleep 300
        FlockLoader::loadFlockFromDisk()
    }
}

Thread.new {
    loop {
        if CommonsUtils::isActiveInstance(runId) then
            Mercury::emailSync(false)
        end
        sleep 1200
    }
}

Mercury::main2(runId)

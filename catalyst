#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"

require_relative "Wave-Emails.rb"
require_relative "Commons.rb"

require_relative "Agent-Wave.rb"
require_relative "Agent-Ninja.rb"
require_relative "Agent-Stream.rb"
require_relative "Agent-Today.rb"
require_relative "Agent-TimeCommitments.rb"
require_relative "Agent-GuardianTime.rb"
require_relative "Agent-Kimchee.rb"
require_relative "Agent-Vienna.rb"
require_relative "Agent-OpenProjects.rb"

# ----------------------------------------------------------------------

# Saturn::agents()
# Saturn::agentuuid2AgentData(agentuuid)
# Saturn::generalUpgrade()
# Saturn::processObjectAndCommand(object, command)

class Saturn

    def self.loadFlockFromDisk()
        EventsManager::eventsEnumerator().each{|event|
            if event["event-type"] == "Catalyst:Catalyst-Object:1" then
                object = event["object"]
                $flock["objects"].reject!{|o| o["uuid"]==object["uuid"] }
                $flock["objects"] << object
                next
            end
            if event["event-type"] == "Catalyst:Destroy-Catalyst-Object:1" then
                objectuuid = event["object-uuid"]
                $flock["objects"].reject!{|o| o["uuid"]==objectuuid }
                next
            end
            if event["event-type"] == "Catalyst:Metadata:DoNotShowUntilDateTime:1" then
                $flock["do-not-show-until-datetime-distribution"][event["object-uuid"]] = event["datetime"]
                next
            end
            if event["event-type"] == "Flock:KeyValueStore:Set:1" then
                $flock["kvstore"][event["key"]] = event["value"]
                next
            end
            raise "Don't know how to interpret event: \n#{JSON.pretty_generate(event)}"
        }
    end

    def self.agents()
        [
            {
                "agent-name"      => "GuardianTime",
                "agent-uid"       => "11fa1438-122e-4f2d-9778-64b55a11ddc2",
                "general-upgrade" => lambda { GuardianTime::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| GuardianTime::processObjectAndCommand(object, command) },
                "interface"       => lambda{ GuardianTime::interface() }
            },
            {
                "agent-name"      => "Kimchee",
                "agent-uid"       => "b343bc48-82db-4fa3-ac56-3b5a31ff214f",
                "general-upgrade" => lambda { Kimchee::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Kimchee::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Kinchee::interface() }
            },
            {
                "agent-name"      => "Ninja",
                "agent-uid"       => "d3d1d26e-68b5-4a99-a372-db8eb6c5ba58",
                "general-upgrade" => lambda { Ninja::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Ninja::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Ninja::interface() }
            },
            {
                "agent-name"      => "OpenProjects",
                "agent-uid"       => "30ff0f4d-7420-432d-b75b-826a2a8bc7cf",
                "general-upgrade" => lambda { OpenProjects::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| OpenProjects::processObjectAndCommand(object, command) },
                "interface"       => lambda{ OpenProjects::interface() }
            },
            {
                "agent-name"      => "Stream",
                "agent-uid"       => "73290154-191f-49de-ab6a-5e5a85c6af3a",
                "general-upgrade" => lambda { Stream::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Stream::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Stream::interface() }
            },
            {
                "agent-name"      => "TimeCommitments",
                "agent-uid"       => "03a8bff4-a2a4-4a2b-a36f-635714070d1d",
                "general-upgrade" => lambda { TimeCommitments::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| TimeCommitments::processObjectAndCommand(object, command) },
                "interface"       => lambda{ TimeCommitments::interface() }
            },
            {
                "agent-name"      => "Today",
                "agent-uid"       => "f989806f-dc62-4942-b484-3216f7efbbd9",
                "general-upgrade" => lambda { Today::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Today::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Today::interface() }
            },
            {
                "agent-name"      => "Vienna",
                "agent-uid"       => "2ba71d5b-f674-4daf-8106-ce213be2fb0e",
                "general-upgrade" => lambda { Vienna::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Vienna::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Vienna::interface() }
            },
            {
                "agent-name"      => "Wave",
                "agent-uid"       => "283d34dd-c871-4a55-8610-31e7c762fb0d",
                "general-upgrade" => lambda { Wave::generalUpgrade() },
                "object-command-processor"  => lambda{ |object, command| Wave::processObjectAndCommand(object, command) },
                "interface"       => lambda{ Wave::interface() }
            }
        ]
    end

    def self.agentuuid2AgentData(agentuuid)
        Saturn::agents()
            .select{|agentinterface| agentinterface["agent-uid"]==agentuuid }
            .first
    end

    def self.generalUpgrade()
        Saturn::agents().each{|agentinterface| agentinterface["general-upgrade"].call() }
    end

    def self.processObjectAndCommand(object, expression)

        # no object needed

        if expression == 'help' then
            Mercury::putshelp()
            LucilleCore::pressEnterToContinue()
        end

        if expression == 'clear' then
            system("clear")
        end

        if expression=="interface" then
            LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("agent", Saturn::agents(), lambda{ |agent| agent["agent-name"] })["interface"].call()
        end

        if expression == 'info' then
            puts "CatalystDevOps::getArchiveSizeInMegaBytes(): #{CatalystDevOps::getArchiveSizeInMegaBytes()}".green
            puts "Todolists:".green
            puts "    Stream count : #{( count1 = Stream::getUUIDs().size )}".green
            puts "    Vienna count : #{(count3 = Vienna::getUnreadLinks().count)}".green
            puts "    Total        : #{(count1+count3)}".green
            puts "Requirements:".green
            puts "    On  : #{(RequirementsOperator::getAllRequirements() - RequirementsOperator::getCurrentlyUnsatisfiedRequirements()).join(", ")}".green
            puts "    Off : #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".green
            LucilleCore::pressEnterToContinue()
        end

        if expression == 'lib' then
            LibrarianExportedFunctions::librarianUserInterface_librarianInteractive()
        end

        if expression.start_with?('wave:') then
            description = expression[5, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = Wave::issueNewItemFromDescriptionInteractive(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
        end

        if expression.start_with?('stream:') then
            description = expression[7, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = Stream::issueNewItemFromDescription(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
        end

        if expression.start_with?('open-project:') then
            description = expression[13, expression.size].strip
            description = Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = OpenProjects::issueNewItemFromDescription(description)
            puts "created item: #{folderpath}"
            LucilleCore::pressEnterToContinue()
        end

        if expression.start_with?("r:on") then
            command, requirement = expression.split(" ")
            RequirementsOperator::setSatisfifiedRequirement(requirement)
        end

        if expression.start_with?("r:off") then
            command, requirement = expression.split(" ")
            RequirementsOperator::setUnsatisfiedRequirement(requirement)
        end

        if expression.start_with?("r:show") then
            command, requirement = expression.split(" ")
            if requirement.size==0 then
                requirement = RequirementsOperator::selectRequirementFromExistingRequirementsOrNull()
            end
            loop {
                requirementObjects = Saturn::fGeneralUpgrade().select{ |object| RequirementsOperator::getObjectRequirements(object['uuid']).include?(requirement) }
                selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", requirementObjects, lambda{ |object| Mercury::object2Line_v0(object) })
                break if selectedobject.nil?
                Mercury::interactiveDisplayObjectAndProcessCommand(selectedobject)
            }
        end

        if expression.start_with?("search") then
            pattern = expression[6,expression.size].strip
            loop {
                searchobjects = Saturn::fGeneralUpgrade().select{|object| Mercury::object2Line_v0(object).downcase.include?(pattern.downcase) }
                break if searchobjects.size==0
                selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", searchobjects, lambda{ |object| Mercury::object2Line_v0(object) })
                break if selectedobject.nil?
                Mercury::interactiveDisplayObjectAndProcessCommand(selectedobject)
            }
        end

        return if object.nil?

        # object needed

        if expression == '!today' then
            TodayOrNotToday::notToday(object["uuid"])
        end

        if expression == 'expose' then
            puts JSON.pretty_generate(object)
            LucilleCore::pressEnterToContinue()
        end

        if expression.start_with?('+') then
            code = expression
            if (datetime = Jupiter::codeToDatetimeOrNull(code)) then
                $flock["do-not-show-until-datetime-distribution"][object["uuid"]] = datetime
                EventsManager::commitEventToTimeline(EventsMaker::doNotShowUntilDateTime(object["uuid"], datetime))
            end
        end

        if expression.start_with?("r:add") then
            command, requirement = expression.split(" ")
            RequirementsOperator::addRequirementToObject(object['uuid'],requirement)
        end

        if expression.start_with?("r:remove") then
            command, requirement = expression.split(" ")
            RequirementsOperator::removeRequirementFromObject(object['uuid'],requirement)
        end

        if expression.size > 0 then
            tokens = expression.split(" ").map{|t| t.strip }
            .each{|command|
                Saturn::agentuuid2AgentData(object["agent-uid"])["object-command-processor"].call(object, command)
            }
        else
            Saturn::agentuuid2AgentData(object["agent-uid"])["object-command-processor"].call(object, "")
        end
    end
end

# Mercury::fDoNotShowUntilDateTimeTransform()
# Mercury::isInteger(str)
# Mercury::emailSyncOnSchedule(verbose)
# Mercury::screenHeight()
# Mercury::screenWidth()
# Mercury::putshelp()
# Mercury::editTextUsingTextmate(text)
# Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
# Mercury::object2Line_v0(object)
# Mercury::object2Line_v1(object)
# Mercury::interactiveDisplayObjectAndProcessCommand(object)
# Mercury::takeWorkspaceSizeOrUpToFirstNewObject(workspaceSize, previousObjects, allObjectsLeft, allObjectsSelected = [])
# Mercury::main2()

class Mercury

    def self.fDoNotShowUntilDateTimeTransform()
        $flock["objects"] = $flock["objects"].map{|object|
            if !$flock["do-not-show-until-datetime-distribution"][object["uuid"]].nil? and (Time.new.to_s < $flock["do-not-show-until-datetime-distribution"][object["uuid"]]) then
                object["do-not-show-until-datetime"] = $flock["do-not-show-until-datetime-distribution"][object["uuid"]]
                object["metric"] = 0
            end
            if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" and object["schedule"]["do-not-show-until-datetime"] and (Time.new.to_s < object["schedule"]["do-not-show-until-datetime"]) then
                object["do-not-show-until-datetime"] = object["schedule"]["do-not-show-until-datetime"]
                object["metric"] = 0
            end
            object
        }
    end

    def self.isInteger(str)
        str.to_i.to_s == str
    end

    def self.emailSyncOnSchedule(verbose)
        if LucilleCore::trueNoMoreOftenThanNEverySeconds_v2(CATALYST_COMMON_XCACHE_REPOSITORY, "29a504de-7985-493b-b809-332357bda3a7", 1200) then
            begin
                newEmailCount = GeneralEmailClient::syncEmailDataWithServer(JSON.parse(IO.read("#{CATALYST_COMMON_DATA_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/guardian-relay.json")), verbose)
                if newEmailCount>0 then
                    #puts "Retrieved #{newEmailCount} new emails"
                end
                OperatorEmailDownloader::syncEmailDataWithServer(JSON.parse(IO.read("#{CATALYST_COMMON_DATA_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/operator.json")), verbose)
                # We call again so that the clock restarts at the end of the process
                LucilleCore::trueNoMoreOftenThanNEverySecondsReset_v2(CATALYST_COMMON_XCACHE_REPOSITORY, "29a504de-7985-493b-b809-332357bda3a7")
            rescue
            end
        end
    end

    def self.screenHeight()
        `/usr/bin/env tput lines`.to_i
    end

    def self.screenWidth()
        `/usr/bin/env tput cols`.to_i
    end

    def self.putshelp()
        puts "Special General Commands (view)"
        puts "    help"
        puts "    top"
        puts "    search <pattern>"
        puts "    r:on <requirement>"
        puts "    r:off <requirement>"
        puts "    r:show [requirement] # optional parameter # shows all the objects of that requirement"
        puts "    c:show [collection]  # optional parameter # shows all the objects of that collection"
        puts ""
        puts "Special General Commands (inserts)"
        puts "    wave: <description>"
        puts "    stream: <description>"
        puts "    open-project: <description>"
        puts ""
        puts "Special General Commands (special circumstances)"
        puts "    clear # clear the screen"
        puts "    interface # run the interface of a given agent"
        puts "    lib # Invoques the Librarian interactive"
        puts ""
        puts "Special Object Commands:"
        puts "    expose # print the object"
        puts "    !today"
        puts "    r:add <requirement>"
        puts "    r:remove <requirement>"
        puts "    c:add [collection] # optional parameter # send to a collection"
        puts "    command ..."
        puts "    (+)datetimecode"
    end

    def self.editTextUsingTextmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)
    end

    def self.processItemDescriptionPossiblyAsTextEditorInvitation(description)
        if description=='text' then
            editTextUsingTextmate("")
        else
            description
        end
    end

    def self.object2Line_v0(object)
        announce = object['announce'].lines.first.strip
        if object["metric"]>1 then
            announce = announce.green
        end
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{doNotShowUntilAsString}",
        ].join()
    end

    def self.object2Line_v1(object)
        announce = object['announce'].strip
        if object["metric"]>1 then
            announce = announce.green
        end
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{requirementsAsString.green}",
            "#{doNotShowUntilAsString}",
            " (#{object["commands"].join(" ").red})",
            " \"#{defaultExpressionAsString.green}\""
        ].join()
    end

    def self.interactiveDisplayObjectAndProcessCommand(object)
        print Mercury::object2Line_v1(object) + " : "
        givenCommand = STDIN.gets().strip
        command = givenCommand.size>0 ? givenCommand : ( object["default-expression"] ? object["default-expression"] : "" )
        Saturn::processObjectAndCommand(object, command)
    end

    def self.main2()
        Saturn::loadFlockFromDisk()
        workspaceSize = 1
        loop {
            Saturn::generalUpgrade()
            TodayOrNotToday::transform()
            RequirementsOperator::transform()
            Mercury::fDoNotShowUntilDateTimeTransform()
            $flock["objects"] = $flock["objects"].sort{|o1,o2| o1['metric']<=>o2['metric'] }.reverse
            allrequirements = $flock["objects"].map{|object| RequirementsOperator::getObjectRequirements(object["uuid"]) }.flatten.uniq
            FKVStore::set("Externally-Set-All-Requirements-23922D81-25EB-4C19-845D-22D9475E2196", JSON.generate(allrequirements))
            system("clear")
            puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
            if LucilleCore::trueNoMoreOftenThanNEverySeconds_v2(CATALYST_COMMON_XCACHE_REPOSITORY, "68c517b7-1a10-430c-9ff7-58e05b0a3cd4", 3600) and Jupiter::isPrimaryComputer() then
                puts "Archives timeline garbage collection"
                CatalystDevOps::archivesGarbageCollection(true)
            end
            if LucilleCore::trueNoMoreOftenThanNEverySeconds_v2(CATALYST_COMMON_XCACHE_REPOSITORY, "68c517b7-1a10-430c-9ff7-58e05b0a3cd4", 86400) and Jupiter::isPrimaryComputer() then
                puts "xcache garbage collection"
                CatalystDevOps::xcacheGarbageCollection()
            end
            objectselected = $flock["objects"].take(workspaceSize).last.clone
            $flock["objects"].take(workspaceSize).each_with_index{|o, index|
                string =
                    if o["uuid"]==objectselected["uuid"] then
                        "#{"%2d" % (index+1)} [*] #{Mercury::object2Line_v1(o)}"
                    else
                        "#{"%2d" % (index+1)}     #{Mercury::object2Line_v0(o)}"
                    end
                puts string
            }
            print "--> "
            givenCommand = STDIN.gets().strip
            if givenCommand=="+" then
                workspaceSize = workspaceSize+1
                next
            end
            if givenCommand=="-" then
                workspaceSize = [workspaceSize-1, 1].max
                next
            end
            if Mercury::isInteger(givenCommand) then
                workspaceSize = [givenCommand.to_i, 1].max
                next
            end
            if givenCommand.start_with?(":") then
                suffix = givenCommand[1,givenCommand.size]
                if Mercury::isInteger(suffix) then
                    objectselected = objectsall.drop(suffix.to_i-1).first.clone
                    if objectselected then
                        Mercury::interactiveDisplayObjectAndProcessCommand(objectselected)
                    end
                end
                next
            end
            command = givenCommand.size>0 ? givenCommand : ( objectselected["default-expression"] ? objectselected["default-expression"] : "" )
            Saturn::processObjectAndCommand(objectselected, command)
        }
    end
end

# -----------------------------------------------------------------

if false and Jupiter::isPrimaryComputer() then
    Thread.new {
        sleep 6
        Mercury::emailSyncOnSchedule(false)
        loop {
            sleep 1200
            Mercury::emailSyncOnSchedule(false)
        }
    }
end

Mercury::main2()
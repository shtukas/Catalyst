#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'drb/drb'
require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"
require_relative "catalyst.rb"
# -----------------------------------------------------------------

# CatalystInterfaceUtils::commandLineInterface(runId)
# CatalystInterfaceUtils::commandLineStreamInterface(runId)

class CatalystInterfaceUtils
    def self.object2Line_v1(object)
        announce = object['announce'].strip
        announce = CommonsUtils::announceWithColor(announce, object)
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        part1 = 
            [
                "(#{"%.3f" % object["metric"]})",
                " [#{object["uuid"]}]",
                " #{announce}",
            ].join()
        if object["is-running"] then
            part1 = part1.green
        end
        part2 = 
            [
                "#{requirementsAsString.green}",
                CommonsUtils::object2DonotShowUntilAsString(object),
                " (#{object["commands"].join(" ").red})",
                " \"#{defaultExpressionAsString.green}\""
            ].join()
        part1 + part2
    end
    def self.positionOfLastRunningItemOrZero(objects)
        return 0 if objects.none?{ |object| object["is-running"] }
        while !objects.last["is-running"] do
            objects.pop
        end
        objects.size
    end
    def self.putsListing()
        positionDisplay = lambda {|standardlp, position|
            if standardlp==position then
                "[* #{"%2d" % position}]"
            else
                "[  #{"%2d" % position}]"
            end
        }
        objectToLineMainListing = lambda {|object, position, standardlp|
            "#{positionDisplay.call(standardlp, position)} #{CommonsUtils::object2Line_v0(object)[0,CommonsUtils::screenWidth()-9]}"
        }
        standardlp = CommonsUtils::getStandardListingPosition()
        objects = CommonsUtils::generalFlockUpgradeThenflockOrderedDisplayObjects()
        amountToDisplay = [ CommonsUtils::screenHeight()-5, self.positionOfLastRunningItemOrZero(objects.clone) ].max
        objects = objects.take(amountToDisplay).select{|object| object["metric"] >= 0.2 }
        if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
            puts "REQUIREMENTS: OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
        end
        objects.each_with_index{|object, index|
            position = index+1
            str = objectToLineMainListing.call(object, position, standardlp)
            if object["is-running"] then
                str = str.green
            end
            puts str
        }
    end
    def self.getTopData()
        standardlp = CommonsUtils::getStandardListingPosition()
        object = CommonsUtils::getNthElementOfUnifiedListing(standardlp)

        # --------------------------------------------------------------------------------
        # Sometimes a wave item that is an email, gets deleted by the EmailClients process.
        # In such a case they are still in Flock and should not be showed
        if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" then
            if object["schedule"][":wave-emails:"] then
                if !File.exists?(object["item-data"]["folderpath"]) then
                    TheFlock::removeObjectIdentifiedByUUID(object["uuid"])
                    EventsManager::commitEventToTimeline(EventsMaker::destroyCatalystObject(object["uuid"]))
                    return CatalystInterfaceUtils::getTopData()
                end
            end
        end
        # --------------------------------------------------------------------------------

        [standardlp, object]
    end
    def self.commandLineInterface(runId)
        standardlp, object = self.getTopData()
        puts "[  #{"%2d" % standardlp}] #{CatalystInterfaceUtils::object2Line_v1(object)}"
        print "--> "
        command = STDIN.gets().strip
        if command=="." then
            return
        end
        if command=="+" then
            CommonsUtils::setStandardListingPosition(CommonsUtils::getStandardListingPosition()+1)
            return
        end
        if command.start_with?(":") then
            token, rest = StringParser::decompose(command)
            if token==":this" then
                if rest=="goto:project" then
                    ProjectsCore::addObjectUUIDToProjectInteractivelyChosen(object["uuid"])
                    return
                end
                return
            end 
            if CommonsUtils::isInteger(token[1,token.size]) then
                position = token[1,token.size].to_i
                if rest.nil? then
                    # :<position>         # set the listing reference point
                    CommonsUtils::setStandardListingPosition([position, 0].max)
                    return
                end
                if rest == "open" then
                    o = CommonsUtils::getNthElementOfUnifiedListing(position)["object"]
                    CommonsUtils::processObjectAndCommand(o, "open")
                    return
                end
                if rest == "done" then
                    o = CommonsUtils::getNthElementOfUnifiedListing(position)["object"]
                    CommonsUtils::processObjectAndCommand(o, "done")
                    return
                end
            end
            return
        end
        command = command.size>0 ? command : ( object["default-expression"] ? object["default-expression"] : "" )
        CommonsUtils::processObjectAndCommand(object, command)
    end
    def self.displayLoop(runId, codehash)
        loop {
            if codehash != CommonsUtils::codeHash() then
                puts "Source code hash changed. Exiting!"
                return
            end
            if !CommonsUtils::isActiveInstance(runId) then
                FlockDiskIO::loadFromEventsTimeline()
            end
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("7e6a229e-8464-4f33-9b8d-9cfbe5a4af41", "0").to_i ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::archivesTimelineGarbageCollection()
                puts "Archives timeline garbage collection:" if lines.size > 0
                lines.each{|line|
                    puts "    - #{line}"
                }
                FKVStore::set("7e6a229e-8464-4f33-9b8d-9cfbe5a4af41", Time.new.to_i + Random::rand*86400)
                LucilleCore::pressEnterToContinue() if lines.size > 0
                next
            end
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("9dcc9a69-cd99-48de-82af-f25d4d382df5", "0").to_i ) and CommonsUtils::isLucille18() then
                lines = CatalystDevOps::eventsTimelineGarbageCollection()
                puts "Events timeline garbage collection:" if lines.size > 0
                lines.each{|line|
                    puts "    - #{line}"
                }
                FKVStore::set("9dcc9a69-cd99-48de-82af-f25d4d382df5", Time.new.to_i + Random::rand*86400)
                LucilleCore::pressEnterToContinue() if lines.size > 0
                next
            end
            if ( Time.new.to_i > FKVStore::getOrDefaultValue("e138267d-2aff-4a34-99bf-e396e0ddb6cb", "0").to_i ) then
                if RequirementsOperator::getCurrentlyUnsatisfiedRequirements().size>0 then
                    puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}"
                    LucilleCore::pressEnterToContinue()
                end
                FKVStore::set("e138267d-2aff-4a34-99bf-e396e0ddb6cb", Time.new.to_i + Random::rand*3600*2)
                next
            end
            system("clear")
            puts ""
            CatalystInterfaceUtils::putsListing()
            puts ""
            CatalystInterfaceUtils::commandLineInterface(runId)
            File.open("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/run-identifier.data", "w") {|f| f.write(runId) }
        }
    end
end

runId = SecureRandom.hex
codehash = CommonsUtils::codeHash()

FlockDiskIO::loadFromEventsTimeline()

Thread.new {
    loop {
        if CommonsUtils::isActiveInstance(runId) then
            CommonsUtils::emailSync(false)
        end
        sleep 1200
    }
}

Thread.new {
    loop {
        TimePointsCore::getTimePoints()
            .each{|timepoint| 
                if timepoint["is-running"] and TimePointsCore::timePointToRatioDoneUpToDate(timepoint)>1 then
                    system("terminal-notifier -title 'Catalyst TimePointsCore' -message '#{timepoint["description"]} is done'")
                    sleep 2
                end
            }
        sleep 60
    }
}

CatalystInterfaceUtils::displayLoop(runId, codehash)

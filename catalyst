#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"
require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"

require_relative "Wave-Emails.rb"
require_relative "Commons.rb"

require_relative "Agent-Wave.rb"
require_relative "Agent-Ninja.rb"
require_relative "Agent-Stream.rb"
require_relative "Agent-Today.rb"
require_relative "Agent-TimeCommitments.rb"
require_relative "Agent-GuardianTime.rb"
require_relative "Agent-Kimchee.rb"
require_relative "Agent-Vienna.rb"
require_relative "Agent-OpenProjects.rb"

# ----------------------------------------------------------------------

# Mercury::fDoNotShowUntilDateTimeTransform()
# Mercury::isInteger(str)
# Mercury::emailSync(verbose)
# Mercury::screenHeight()
# Mercury::screenWidth()
# Mercury::putshelp()
# Mercury::editTextUsingTextmate(text)
# Mercury::processItemDescriptionPossiblyAsTextEditorInvitation(description)
# Mercury::object2Line_v0(object)
# Mercury::object2Line_v1(object)
# Mercury::interactiveDisplayObjectAndProcessCommand(object)
# Mercury::takeWorkspaceSizeOrUpToFirstNewObject(workspaceSize, previousObjects, allObjectsLeft, allObjectsSelected = [])
# Mercury::main2()

class Mercury

    def self.fDoNotShowUntilDateTimeTransform()
        $flock["objects"] = $flock["objects"].map{|object|
            if !$flock["do-not-show-until-datetime-distribution"][object["uuid"]].nil? and (Time.new.to_s < $flock["do-not-show-until-datetime-distribution"][object["uuid"]]) then
                object["do-not-show-until-datetime"] = $flock["do-not-show-until-datetime-distribution"][object["uuid"]]
                object["metric"] = 0
            end
            if object["agent-uid"]=="283d34dd-c871-4a55-8610-31e7c762fb0d" and object["schedule"]["do-not-show-until-datetime"] and (Time.new.to_s < object["schedule"]["do-not-show-until-datetime"]) then
                object["do-not-show-until-datetime"] = object["schedule"]["do-not-show-until-datetime"]
                object["metric"] = 0
            end
            object
        }
    end

    def self.isInteger(str)
        str.to_i.to_s == str
    end

    def self.emailSync(verbose)
        begin
            newEmailCount = GeneralEmailClient::syncEmailDataWithServer(JSON.parse(IO.read("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/guardian-relay.json")), verbose)
            if newEmailCount>0 then
                #puts "Retrieved #{newEmailCount} new emails"
            end
            OperatorEmailDownloader::syncEmailDataWithServer(JSON.parse(IO.read("#{CATALYST_COMMON_DATABANK_FOLDERPATH}/Agents-Data/Wave/Wave-Email-Config/operator.json")), verbose)
        rescue
        end
    end

    def self.screenHeight()
        `/usr/bin/env tput lines`.to_i
    end

    def self.screenWidth()
        `/usr/bin/env tput cols`.to_i
    end

    def self.putshelp()
        puts "Special General Commands (view)"
        puts "    help"
        puts "    top"
        puts "    search <pattern>"
        puts "    r:on <requirement>"
        puts "    r:off <requirement>"
        puts "    r:show [requirement] # optional parameter # shows all the objects of that requirement"
        puts "    c:show [collection]  # optional parameter # shows all the objects of that collection"
        puts ""
        puts "Special General Commands (inserts)"
        puts "    wave: <description>"
        puts "    stream: <description>"
        puts "    open-project: <description>"
        puts ""
        puts "Special General Commands (special circumstances)"
        puts "    clear # clear the screen"
        puts "    interface # run the interface of a given agent"
        puts "    lib # Invoques the Librarian interactive"
        puts ""
        puts "Special Object Commands:"
        puts "    expose # print the object"
        puts "    !today"
        puts "    r:add <requirement>"
        puts "    r:remove <requirement>"
        puts "    c:add [collection] # optional parameter # send to a collection"
        puts "    command ..."
        puts "    (+)datetimecode"
    end

    def self.editTextUsingTextmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)
    end

    def self.processItemDescriptionPossiblyAsTextEditorInvitation(description)
        if description=='text' then
            editTextUsingTextmate("")
        else
            description
        end
    end

    def self.object2Line_v0(object)
        announce = object['announce'].lines.first.strip
        if object["metric"]>1 then
            announce = announce.green
        end
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{doNotShowUntilAsString}",
        ].join()
    end

    def self.object2Line_v1(object)
        announce = object['announce'].strip
        if object["metric"]>1 then
            announce = announce.green
        end
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{announce}",
            "#{requirementsAsString.green}",
            "#{doNotShowUntilAsString}",
            " (#{object["commands"].join(" ").red})",
            " \"#{defaultExpressionAsString.green}\""
        ].join()
    end

    def self.interactiveDisplayObjectAndProcessCommand(object)
        print Mercury::object2Line_v1(object) + " : "
        givenCommand = STDIN.gets().strip
        command = givenCommand.size>0 ? givenCommand : ( object["default-expression"] ? object["default-expression"] : "" )
        AgentsManager::processObjectAndCommand(object, command)
    end

    def self.main2()
        workspaceSize = 1
        loop {
            AgentsManager::generalUpgrade()
            TodayOrNotToday::transform()
            RequirementsOperator::transform()
            Mercury::fDoNotShowUntilDateTimeTransform()
            $flock["objects"] = $flock["objects"].sort{|o1,o2| o1['metric']<=>o2['metric'] }.reverse
            system("clear")
            puts "REQUIREMENTS OFF: #{RequirementsOperator::getCurrentlyUnsatisfiedRequirements().join(", ")}".yellow
            if SecureRandom.random_number<0.01 and CommonsUtils::isPrimaryComputer() then
                puts "Archives timeline garbage collection"
                CatalystDevOps::archivesGarbageCollection(true)
            end
            if SecureRandom.random_number<0.01 and CommonsUtils::isPrimaryComputer() then
                puts "Events timeline garbage collection"
                CatalystDevOps::eventsTimelineGarbageCollection(true)
            end
            objectselected = $flock["objects"].take(workspaceSize).last.clone
            $flock["objects"].take(workspaceSize).each_with_index{|o, index|
                string =
                    if o["uuid"]==objectselected["uuid"] then
                        "#{"%2d" % (index+1)} [*] #{Mercury::object2Line_v1(o)}"
                    else
                        "#{"%2d" % (index+1)}     #{Mercury::object2Line_v0(o)}"
                    end
                puts string
            }
            print "--> "
            givenCommand = STDIN.gets().strip
            if givenCommand=="+" then
                workspaceSize = workspaceSize+1
                next
            end
            if givenCommand=="-" then
                workspaceSize = [workspaceSize-1, 1].max
                next
            end
            if Mercury::isInteger(givenCommand) then
                workspaceSize = [givenCommand.to_i, 1].max
                next
            end
            if givenCommand.start_with?(":") then
                suffix = givenCommand[1,givenCommand.size]
                if Mercury::isInteger(suffix) then
                    objectselected = $flock["objects"].drop(suffix.to_i-1).first.clone
                    if objectselected then
                        Mercury::interactiveDisplayObjectAndProcessCommand(objectselected)
                    end
                end
                next
            end
            command = givenCommand.size>0 ? givenCommand : ( objectselected["default-expression"] ? objectselected["default-expression"] : "" )
            AgentsManager::processObjectAndCommand(objectselected, command)
        }
    end
end

# -----------------------------------------------------------------

if CommonsUtils::isPrimaryComputer() then
    Thread.new {
        sleep 6
        Mercury::emailSync(false)
        loop {
            sleep 1200
            Mercury::emailSync(false)
        }
    }
end

Thread.new {
    loop {
        sleep 300
        FlockLoader::loadFlockFromDisk()
    }
}

Mercury::main2()

#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'drb/drb'
require 'thread'

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# -----------------------------------------------------------------

require_relative "NSXMiscLibraries/NSXConstants.rb"
require_relative "NSXMiscLibraries/NSXBob.rb"
require_relative "NSXMiscLibraries/NSXCatalystObjectsOperator.rb"
require_relative "NSXMiscLibraries/NSXData.rb"
require_relative "NSXMiscLibraries/NSXDisplayUtils.rb"
require_relative "NSXMiscLibraries/NSXGeneralCommandHandler.rb"
require_relative "NSXMiscLibraries/NSXGenericContents.rb"
require_relative "NSXMiscLibraries/NSXDoNotShowUntilDatetime.rb"
require_relative "NSXMiscLibraries/NSXCatalystDevOps.rb"
require_relative "NSXMiscLibraries/NSXEmailClients.rb"
require_relative "NSXMiscLibraries/NSXFolderProbe.rb"
require_relative "NSXMiscLibraries/NSXLightThreadUtils.rb"
require_relative "NSXMiscLibraries/NSXMiscUtils.rb"
require_relative "NSXMiscLibraries/NSXStreamsUtils.rb"
require_relative "NSXMiscLibraries/NSXStringParser.rb"

require_relative "NSXAgents/NSXAgentBabyNights.rb"
require_relative "NSXAgents/NSXAgentTodayNotes.rb"
require_relative "NSXAgents/NSXAgentHouse.rb"
require_relative "NSXAgents/NSXAgentLightThread.rb"
require_relative "NSXAgents/NSXAgentNinja.rb"
require_relative "NSXAgents/NSXAgentStreams.rb"
require_relative "NSXAgents/NSXAgentVienna.rb"
require_relative "NSXAgents/NSXAgentWave.rb"

# -------------------------------------------------------------------------

class Timer
    def initialize(name)
        @name = name
        @times = []
        @startedTime = nil
    end
    def start()
        if @startedTime.nil? then
            @startedTime = Time.new.to_f
        else 
            raise "Trying to start an already started timer"
        end
    end
    def stop()
        if @startedTime.nil? then
            raise "Trying to stop a non started timer"
        else
            @times << Time.new.to_f - @startedTime
            @startedTime = nil
        end
    end
    def printTimes()
        puts "#{@name}: #{@times.join(", ")}"
    end
end

def specialProcessing1(focusobject)
    system("clear")
    puts focusobject["announce"]
    stringOrFirst = lambda{|stuff|
        if stuff.class.to_s == "String" then
            stuff
        else
            stuff.first
        end
    }
    putsOrNot = lambda {|contents|
        return false if contents.include?("Seen on [PROD]")
        return false if contents.include?("PRbuilds results")
        return false if (contents.include?("Merged") and contents.include?("into master."))
        puts ""
        puts "-- begin -----------------------------------------------"
        puts contents
        puts "--- end ------------------------------------------------"
        puts ""
        true
    }
    emailFilename = focusobject["data"]["generic-contents-item"]["email-filename"]
    filepath = NSXGenericContents::resolveFilenameToFilepathOrNull(emailFilename)
    somethingWasDisplayed = false
    mail = Mail.read(filepath)
    if mail.multipart? then
        mail.parts.each{|part|
            if stringOrFirst.call(part.content_type).start_with?("text/plain") then
                somethingWasDisplayed = putsOrNot.call(part.decoded) or somethingWasDisplayed
            end
        }
    else
        somethingWasDisplayed = putsOrNot.call(mail.body.decoded) or somethingWasDisplayed
    end
    if somethingWasDisplayed then
        print "Type 'open' to open the email or nothing to discard: "
        answer = STDIN.gets().strip
        if answer == "open" then
            NSXGeneralCommandHandler::processCommand(focusobject, "open")
        end
        if answer == "" then
            NSXGeneralCommandHandler::processCommand(focusobject, "done")
        end
    else
        NSXGeneralCommandHandler::processCommand(focusobject, "done")
    end
end

def objectIsInterruption(object)
    object["announce"].include?("LightThreadStreamItem") and object["announce"].include?("X-Interruption")
end

def shouldDisplayObject(object)
    if object["agent-uid"] == "201cac75-9ecc-4cac-8ca1-2643e962a6c6" and object["announce"].start_with?("LightThread: X-Interruption") then
        return false
    end
    if object["agent-uid"] == "201cac75-9ecc-4cac-8ca1-2643e962a6c6" and object["announce"].start_with?("LightThread: X-Must All Be Done Today") then
        return false
    end
    true
end

# -------------------------------------------------------------------------
# nslog

# -------------------------------------------------------------------------

Thread.new {
    loop {
        sleep 130
        if NSXCatalystObjectsOperator::catalystObjectsForMainListing().any?{|object| objectIsInterruption(object) } then
            NSXMiscUtils::onScreenNotification("Catalyst", "Interruption")
        end
    }
}

Thread.new {
    return if !NSXMiscUtils::isLucille18()
    loop {
        sleep 140 
        if NSXMiscUtils::trueNoMoreOftenThanNEverySeconds(nil, "17e6377e-0ee6-4e38-80cf-40f40ca9cae9", 86400) then
            NSXCatalystDevOps::archivesTimelineGarbageCollection(false)
        end
    }
}

Thread.new {
    return if !NSXMiscUtils::isLucille18()
    sleep 30
    loop {
        NSXMiscUtils::emailSync(false)
        sleep 1200
    }
}

# -------------------------------------------------------------------------

loop {

    WaveDevOps::collectWave()
    NSXStreamsUtils::pickUpXStreamDropOff()
    NSXLightThreadUtils::lightThreads()
        .each{|lightThread| 
            targetFolderpath = lightThread["targetFolderpath"]
            if targetFolderpath.nil? or !File.exists?(targetFolderpath) then
                targetFolderpath = LucilleCore::askQuestionAnswerAsString("I could not find a target folder for LightThread '#{lightThread["description"]}'. Target folderpath: ")
                lightThread["targetFolderpath"] = targetFolderpath
                NSXLightThreadUtils::commitLightThreadToDisk(lightThread)
            end
        }

    displayScreenSizeLeft = NSXMiscUtils::screenHeight() - 6

    system("clear")

    print "Agents: "
    puts NSXBob::agents().map{|agentdata| agentdata["agent-name"] }.join(", ")
    puts NSXGeneralCommandHandler::specialObjectCommandsAsString()

    puts ""
    standardlp = NSXMiscUtils::getStandardListingPosition()
    focusobject = nil
    NSXCatalystObjectsOperator::catalystObjectsForMainListing()
        .select{|object| shouldDisplayObject(object) }
        .each_with_index{|object, indx|
            position = indx+1
            next if displayScreenSizeLeft <= 0 
            if position == standardlp then
                focusobject = object
            end 
            string =  NSXDisplayUtils::objectToStringForCatalystListing(object, position, standardlp)
            displayScreenSizeLeft = displayScreenSizeLeft - string.lines.to_a.count
            puts string
        }

    if focusobject.nil? and (standardlp>1) then
        NSXMiscUtils::setStandardListingPosition(1)
        next
    end

    if focusobject.nil? then
        puts "Nothing to do for the moment (^_^)"
    end

    # -----------------------------------------------------------------------------------
    # Special Processing

    if focusobject and focusobject["announce"].include?("Delivery Status Notification (Failure)") then
        NSXGeneralCommandHandler::processCommand(focusobject, "done")
        next
    end

    if focusobject and
        focusobject["agent-uid"] == "d2de3f8e-6cf2-46f6-b122-58b60b2a96f1" and
        focusobject["data"]["generic-contents-item"]["email-subject"].start_with?("Declined:") then
        NSXGeneralCommandHandler::processCommand(focusobject, "done")
        next
    end

    if focusobject and focusobject["announce"].include?("notifications@github.com")
        specialProcessing1(focusobject)
        next
    end

    if focusobject and focusobject["announce"].include?("noreply@github.com")
        specialProcessing1(focusobject)
    end

    # -----------------------------------------------------------------------------------

    puts ""
    print "--> "
    command = STDIN.gets().strip

    if command == "" then
        next
    end

    if ( agentdata = NSXBob::getAgentDataByAgentNameOrNull(command) ) then
        agentdata["interface"].call()
        next
    end

    if ( command == "..") and focusobject and focusobject["default-expression"] then
        command = focusobject["default-expression"]
    end

    if command == ',,' then
        command = '+1 hour'
    end

    if command == ';;' then
        command = 'open; done'
    end

    if focusobject["commands-lambdas"] and focusobject["commands-lambdas"][command] then
        focusobject["commands-lambdas"][command].call(focusobject)
        next
    end

    NSXGeneralCommandHandler::processCommand(focusobject, command)

}


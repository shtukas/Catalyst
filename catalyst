#!/usr/bin/ruby

# encoding: UTF-8
require 'json'
require 'date'
require 'colorize'
require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"
require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'
require 'drb/drb'
require 'thread'

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/Iphetra.rb"
=begin
    Iphetra::commitObjectToDisk(repositoryRootFolderPath, setuuid, object)
    Iphetra::getObjectByUUIDOrNull(repositoryRootFolderPath, setuuid, objectuuid)
    Iphetra::getObjects(repositoryRootFolderPath, setuuid)
=end

require "/Galaxy/Software/Misc-Common/Ruby-Libraries/LucilleCore.rb"

# -----------------------------------------------------------------

require_relative "NSXMiscLibraries/NSXConstants.rb"
require_relative "NSXMiscLibraries/NSXBob.rb"
require_relative "NSXMiscLibraries/NSXDayNotes.rb"
require_relative "NSXMiscLibraries/NSXDataOperators.rb"
require_relative "NSXMiscLibraries/NSXDisplayOperator.rb"
require_relative "NSXMiscLibraries/NSXGeneralCommandHandler.rb"
require_relative "NSXMiscLibraries/NSXDoNotShowUntilDatetime.rb"
require_relative "NSXMiscLibraries/NSXCatalystDevOps.rb"
require_relative "NSXMiscLibraries/NSXEmailClients.rb"
require_relative "NSXMiscLibraries/NSXDefcon.rb"
require_relative "NSXMiscLibraries/NSXFolderProbe.rb"
require_relative "NSXMiscLibraries/NSXLightThreadUtils.rb"
require_relative "NSXMiscLibraries/NSXMiscUtils.rb"
require_relative "NSXMiscLibraries/NSXStringParser.rb"

require_relative "NSXAgents/NSXAgentBabyNights.rb"
require_relative "NSXAgents/NSXAgentHouse.rb"
require_relative "NSXAgents/NSXAgentLightThread.rb"
require_relative "NSXAgents/NSXAgentNinja.rb"
require_relative "NSXAgents/NSXAgentVienna.rb"
require_relative "NSXAgents/NSXAgentWave.rb"
require_relative "NSXAgents/NSXAgentWIS.rb"

# -------------------------------------------------------------------------

class Timer
    def initialize(name)
        @name = name
        @times = []
        @startedTime = nil
    end
    def start()
        if @startedTime.nil? then
            @startedTime = Time.new.to_f
        else 
            raise "Trying to start an already started timer"
        end
    end
    def stop()
        if @startedTime.nil? then
            raise "Trying to stop a non started timer"
        else
            @times << Time.new.to_f - @startedTime
            @startedTime = nil
        end
    end
    def printTimes()
        puts "#{@name}: #{@times.join(", ")}"
    end
end

# -------------------------------------------------------------------------
# nslog


# -------------------------------------------------------------------------
=begin

The Task system

A task is essentially a lambda and a period in seconds

Task(taskUniqueId, period, lambda, name)

We put the tasks into an array and loop over that array. 

This ensures that
    - only one task run at any given time
    - that there is enough pause between two tasks and
    - that we run the tasks roughtly as often as they should run.

Tasks are run only on Lucille18

=end

# Task(taskUniqueId, period, lambda, name)

if NSXMiscUtils::isLucille18() then

    $THETASKS = []
    $THETASKS << [
        "49429DCB",
        86400,
        lambda {
             NSXCatalystDevOps::archivesTimelineGarbageCollection(false)
        },
        "NSXCatalystDevOps::archivesTimelineGarbageCollection(false)"
    ]
    $THETASKS << [
        "69429DCB",
        1200,
        lambda {
             NSXMiscUtils::emailSync(false)
        },
        "NSXMiscUtils::emailSync(false)"
    ]

    $THETASKSINDEX = 0
    $THETASKSSHEDULING = NSXSystemDataKeyValueStore::getOrDefaultValue("b0e73fa2-f035-4833-8945-b55f9463d87d", {})

    Thread.new {
        sleep 60
        loop {
            $THETASKSINDEX = ($THETASKSINDEX+1) % $THETASKS.size
            task = $THETASKS[$THETASKSINDEX]
            if Time.new.to_i - ( $THETASKSSHEDULING[task[0]] || 0 ) > task[1] then
                #puts "Task: #{task[3]}"
                task[2].call()
                $THETASKSSHEDULING[task[0]] = Time.new.to_i
                NSXSystemDataKeyValueStore::set("b0e73fa2-f035-4833-8945-b55f9463d87d", $THETASKSSHEDULING)
            end
            sleep 60
        }
    }

end

# -------------------------------------------------------------------------

NSXCatalystObjectsOperator::reloadObjectsFromAgents()

# -------------------------------------------------------------------------

Thread.new {
    loop {
        sleep 120
        Iphetra::resetInMemoryData()
        NSXBob::agents()
        .each{|agentinterface|
            objects = agentinterface["get-objects"].call()
            NSXCatalystObjectsOperator::getObjects()
            .each{|object|
                next if object["agent-uid"] != agentinterface["agent-uid"]
                NSXCatalystObjectsOperator::deleteObjectFromInMemory(object["uuid"])
            }
            objects.each{|object| NSXCatalystObjectsOperator::putObject(object) }
        }
    }
}

# -------------------------------------------------------------------------

$defconMonitorData = {}
$defconMonitorData["last-display-defcon-37cc040b"] = nil

Thread.new {
    loop {
        sleep 70
        next if $defconMonitorData["last-display-defcon-37cc040b"].nil?
        if NSXDisplayOperator::flockObjectsProcessedForCatalystDisplay()[0] < $defconMonitorData["last-display-defcon-37cc040b"] then
            NSXMiscUtils::issueScreenNotification("Catalyst", "Lowering DEFCON")
        end
    }
}

# -------------------------------------------------------------------------

loop {

    displayScreenSizeReductionIndex = 7

    system("clear")

    print "Agents: "
    puts NSXBob::agents().map{|agentdata| agentdata["agent-name"] }.join(", ")
    puts NSXGeneralCommandHandler::specialObjectCommandsAsString()

    dayNotes = NSXDayNotes::displayOrNull()
    if dayNotes then
        dayNotesSize = NSXMiscUtils::screenHeight()/4
        puts ""
        puts dayNotes.lines.first(dayNotesSize).join().green
        displayScreenSizeReductionIndex = displayScreenSizeReductionIndex + dayNotesSize + 1
    end

    puts ""
    standardlp = NSXMiscUtils::getStandardListingPosition()
    focusobject = NSXDisplayOperator::printScreen(displayScreenSizeReductionIndex, standardlp)

    if focusobject.nil? and (standardlp>1) then
        NSXMiscUtils::setStandardListingPosition(1)
        next
    end

    if focusobject.nil? then
        puts "Nothing to do for the moment (^_^)"
    end

    puts ""
    print "--> "
    command = STDIN.gets().strip

    if command == "" then
        next
    end

    if ( agentdata = NSXBob::getAgentDataByAgentNameOrNull(command) ) then
        agentdata["interface"].call()
        next
    end

    if ( command == "..") and focusobject and focusobject["default-expression"] then
        command = focusobject["default-expression"]
    end

    if command == ';;' then
        command = 'open; done'
    end

    NSXGeneralCommandHandler::processCommand(focusobject, command)

    if command=="open" and focusobject and focusobject["schedule"] and focusobject["schedule"][":wave-email:"] then
        if (command = LucilleCore::askQuestionAnswerAsString("Additional command? : ")).size>0 then
            NSXGeneralCommandHandler::processCommand(focusobject, command)
        end
    end

}


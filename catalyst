#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

Thread.new {
    loop {
        sleep 120
        if ProgrammableBooleans::trueNoMoreOftenThanEveryNSeconds("f5f52127-c140-4c59-85a2-8242b546fe1f", 3600) then
            system("#{File.dirname(__FILE__)}/../../vienna-import")
        end
    }
}

loop {

    Utils::importFromLucilleInbox()
    Anniversaries::dailyBriefingIfNotDoneToday()

    if ProgrammableBooleans::trueNoMoreOftenThanEveryNSeconds("3e15e448-25e2-4d03-a2b4-e5f23a9af461", 600) then
        puts "MarblesFsck::fsck()"
        MarblesFsck::fsck()
    end

    puts "-- listing ----------------------------"

    vspaceleft = Utils::screenHeight()-4

    items = UIServices::catalystNS16s()
                .select{|item| DoNotShowUntil::isVisible(item["uuid"]) }

    items.each_with_index{|item, indx|
        announce = "(#{"%3d" % indx}) #{item["announce"]}"
        next if (vspaceleft - Utils::verticalSize(announce)) < 0
        puts announce
        vspaceleft = vspaceleft - Utils::verticalSize(announce)
    }

    puts "listing: .. (access top) | select <n> | start (<n>) | done (<n>) | / | new wave | new quark | >> (next unseen)".yellow
    puts "top    : [] (next transformation of top todo item) | ++ by an hour | + <weekday> | + <float> <datecode unit>".yellow

    command = LucilleCore::askQuestionAnswerAsString("> ")

    next if command == ""

    # -- listing -----------------------------------------------------------------------------

    if Interpreting::match("..", command) then
        items[0]["start"].call()
    end

    if Interpreting::match("select *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        next if item.nil?
        item["start"].call()
    end

    if Interpreting::match("start", command) then
        items[0]["start"].call()
    end

    if Interpreting::match("start *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        next if item.nil?
        item["start"].call()
    end

    if Interpreting::match("done", command) then
        items[0]["done"].call()
    end

    if Interpreting::match("done *", command) then
        _, ordinal = Interpreting::tokenizer(command)
        ordinal = ordinal.to_i
        item = items[ordinal]
        next if item.nil?
        item["done"].call()
    end

    if Interpreting::match("/", command) then
        UIServices::servicesFront()
    end

    if Interpreting::match("new wave", command) then
        Waves::issueNewWaveInteractivelyOrNull()
    end

    if Interpreting::match("new quark", command) then
        Quarks::interactivelyIssueNewMarbleQuarkOrNull(Quarks::computeLowL22())
    end

    if Interpreting::match(">>", command) then
        Marbles::marblesOfGivenDomainInOrder("quarks").each{|marble|
            next if BankExtended::recoveredDailyTimeInHours(marble.uuid()) > 0
            Quarks::runMarbleQuark(marble)
            break
        }
    end

    # -- top -----------------------------------------------------------------------------

    if Interpreting::match("[]", command) then
        item = items[0]
        next if !item["isTodo"]
        GenericTodoFile::applyNextTransformation(item["filepath"], item["uuid"])
        next
    end

    if Interpreting::match("++", command) then
        DoNotShowUntil::setUnixtime(items[0]["uuid"], Time.new.to_i+3600)
    end

    if Interpreting::match("+ *", command) then
        _, weekdayname = Interpreting::tokenizer(command)
        unixtime = Utils::codeToUnixtimeOrNull("+#{weekdayname}")
        next if unixtime.nil?
        item = items[0]
        DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
    end

    if Interpreting::match("+ * *", command) then
        _, amount, unit = Interpreting::tokenizer(command)
        unixtime = Utils::codeToUnixtimeOrNull("+#{amount}#{unit}")
        next if unixtime.nil?
        item = items[0]
        DoNotShowUntil::setUnixtime(item["uuid"], unixtime)
    end
}


#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require_relative "CatalystCore.rb"

require_relative "Wave-Emails.rb"

require "/Galaxy/local-resources/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorypath or nil, key, value)
    KeyValueStore::getOrNull(repositorypath or nil, key)
    KeyValueStore::getOrDefaultValue(repositorypath or nil, key, defaultValue)
    KeyValueStore::destroy(repositorypath or nil, key)
=end

require "/Galaxy/LucilleOS/Librarian/LibrarianUI.rb"

# ----------------------------------------------------------------------------

class RequirementsOperator

    @@pathToDataFile = nil
    @@data = nil

    def self.init()
        @@pathToDataFile = "/Galaxy/DataBank/Catalyst/requirements/requirements-structure.json"
        @@data = JSON.parse(IO.read(@@pathToDataFile))
    end

    def self.saveDataToDisk()
        File.open(@@pathToDataFile, 'w') {|f| f.puts(JSON.pretty_generate(@@data)) }
    end

    def self.getObjectRequirements(uuid)
        @@data['items-requirements-distribution'][uuid] || []
    end

    def self.requirementIsCurrentlySatisfied(requirement)
        @@data['requirements-status-timeline'][requirement].nil? or @@data['requirements-status-timeline'][requirement]
    end

    def self.meetRequirements(uuid)
        RequirementsOperator::getObjectRequirements(uuid)
            .all?{|requirement| RequirementsOperator::requirementIsCurrentlySatisfied(requirement) }
    end

    def self.addObjectRequirement(uuid,requirement)
        requirements = @@data['items-requirements-distribution'][uuid] || []
        requirements << requirement
        requirements = requirements.uniq.sort
        @@data['items-requirements-distribution'][uuid] = requirements
        RequirementsOperator::saveDataToDisk()
    end

    def self.setRequirementOn(requirement)
        @@data['requirements-status-timeline'][requirement] = true
        RequirementsOperator::saveDataToDisk()
    end

    def self.setRequirementOff(requirement)
        @@data['requirements-status-timeline'][requirement] = false
        RequirementsOperator::saveDataToDisk()
    end

    def self.allRequirements()
        @@data['items-requirements-distribution'].values.flatten.uniq
    end

    def self.currentlyUnsatisfifiedRequirements()
        RequirementsOperator::allRequirements().select{|requirement| !RequirementsOperator::requirementIsCurrentlySatisfied(requirement) }
    end
end

# VirtualScreensManager::init()
# VirtualScreensManager::add(uuid)
# VirtualScreensManager::remove(uuid)
# VirtualScreensManager::test(isPrimaryScreen, uuid)

class VirtualScreensManager
    @@uuids = [] # List the uuids of the secondary screen

    def self.init()
        @@uuids = JSON.parse(KeyValueStore::getOrDefaultValue(nil, "284088e8-90c2-4dab-a1a3-83bbd417b5be", "[]"))
    end

    def self.add(uuid)
        @@uuids << uuid
        KeyValueStore::set(nil, "284088e8-90c2-4dab-a1a3-83bbd417b5be", JSON.generate(@@uuids))
    end

    def self.remove(uuid)
        @@uuids.delete(uuid)
        KeyValueStore::set(nil, "284088e8-90c2-4dab-a1a3-83bbd417b5be", JSON.generate(@@uuids))
    end

    def self.test(isPrimaryScreen, uuid)
        if isPrimaryScreen then
            !@@uuids.include?(uuid)
        else
            @@uuids.include?(uuid)
        end 
    end
end

# Jupiter::Jupiter::email_sync_on_schedule(verbose)
# Jupiter::screen_height()
# Jupiter::screen_width()
# Jupiter::vertical_space(announce)
# Jupiter::tokenIsInteger(token)
# Jupiter::execute(expression, object, displayObjects)
# Jupiter::putsObjectWithShellDisplay(object, displayObjects)
# Jupiter::puts_objects(objects, remaining_number_of_lines, indx)
# Jupiter::putshelp()
# Jupiter::currentHour()
# Jupiter::edit_text_using_textmate(text)
# Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)

class Jupiter
    def self.email_sync_on_schedule(verbose)
        if LucilleCore::trueNoMoreOftenThanNEverySeconds("29a504de-7985-493b-b809-332357bda3a7", 1200) then
            begin
                newEmailCount = GeneralEmailClient::syncEmailDataWithServer(JSON.parse(IO.read("/Galaxy/DataBank/Catalyst/Wave/Wave-Email-Config/guardian-relay.json")), verbose)
                if newEmailCount>0 then
                    puts "Retrieved #{newEmailCount} new emails"
                end
                OperatorEmailDownloader::syncEmailDataWithServer(JSON.parse(IO.read("/Galaxy/DataBank/Catalyst/Wave/Wave-Email-Config/operator.json")), verbose)
                # We call again so that the clock restarts at the end of the process
                LucilleCore::trueNoMoreOftenThanNEverySecondsReset("29a504de-7985-493b-b809-332357bda3a7")
            rescue
            end
        end    
    end

    def self.screen_height()
        `/usr/bin/env tput lines`.to_i
    end

    def self.screen_width()
        `/usr/bin/env tput cols`.to_i
    end

    def self.vertical_space(announce)
        announce.lines.map{|line| (line.size/Jupiter::screen_width())+1 }.inject(0, :+)
    end

    def self.tokenIsInteger(token)
        token == token.to_i.to_s
    end

    def self.execute(expression, object, displayObjects)

        if expression == 'help' then
            Jupiter::putshelp()
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == "primary" then
            KeyValueStore::set(nil, "8dbecdcb-6c37-4a06-840a-8d7c65a0ee40", JSON.generate([true]))
        end

        if expression == "secondary" then
            KeyValueStore::set(nil, "8dbecdcb-6c37-4a06-840a-8d7c65a0ee40", JSON.generate([false]))
        end

        if expression == 'lib' then
            LibrarianUserInterface::librarianInteractive()
            return
        end

        if expression == ">primary" then
            VirtualScreensManager::add(object['uuid'])
            return
        end

        if expression == ">secondary" then
            VirtualScreensManager::remove(object['uuid'])
            return
        end

        if expression.start_with?('+') then
            object['command-interpreter'].call(object, expression)
            return
        end

        if expression.start_with?('wave:') then
            description = expression[5, expression.size].strip
            description = Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            uuid = SecureRandom.hex(4)
            schedule = WaveSchedules::makeScheduleObjectInteractivelyOrNull()
            folderpath = WaveTimelineUtils::timestring22ToFolderpath(LucilleCore::timeStringL22())
            FileUtils.mkpath folderpath
            File.open("#{folderpath}/catalyst-uuid", 'w') {|f| f.write(uuid) }
            File.open("#{folderpath}/catalyst-description.txt", 'w') {|f| f.write(description) }
            WaveTimelineUtils::writeScheduleToDisk(uuid, schedule)
            return
        end

        if expression.start_with?('stream:') then
            description = expression[7, expression.size].strip
            description = Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = "#{CATALYST_COMMON_PATH_TO_STREAM_DOMAIN_FOLDER}/strm2/#{LucilleCore::timeStringL22()}"
            FileUtils.mkpath folderpath
            File.open("#{folderpath}/description.txt", 'w') {|f| f.write(description) }
            return
        end

        if expression.start_with?("search") then
            pattern = expression[6,expression.size].strip
            searchobjects = CatalystCore::objects()
                .select{|object| object['announce'].downcase.include?(pattern.downcase) }
            if searchobjects.size>0 then
                searchobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object: ", searchobjects, lambda{ |item| item['announce'] })
                if searchobject then
                    Jupiter::putsObjectWithShellDisplay(searchobject, displayObjects)
                end
            end
            return
        end

        if expression.start_with?("require") then
            requirement = expression[7,expression.size].strip
            RequirementsOperator::addObjectRequirement(object['uuid'],requirement)
            return
        end

        if expression.start_with?("on") then
            command, requirement = expression.split(" ")
            RequirementsOperator::setRequirementOn(requirement)
            return
        end

        if expression.start_with?("off") then
            command, requirement = expression.split(" ")    
            RequirementsOperator::setRequirementOff(requirement)
            return
        end

        # ---------------------
        # default commands

        if expression.size == 0 and object['default-commands'] then
            object['default-commands'].each{|command|
                if command.start_with?('shell:') then
                    command = command[7,command.size].strip
                    system(command)
                else
                    object['command-interpreter'].call(object, command)
                end
            }
            return
        end

        # ---------------------
        # regular expression: optional integer and commands

        if Jupiter::tokenIsInteger(expression) then
            indx = expression.to_i
            targetObject = displayObjects.drop(indx).first
            VirtualScreensManager::remove(targetObject['uuid'])
            Jupiter::putsObjectWithShellDisplay(targetObject, displayObjects)
        else
            expression.split(' ').map{|t| t.strip }.each{|command|
                object['command-interpreter'].call(object, command)
            }
        end
    end

    def self.putsObjectWithShellDisplay(object, displayObjects)

        requirements = RequirementsOperator::getObjectRequirements(object['uuid']).join(", ")
        requirements = requirements.size>0 ? " ( #{requirements} )".green : ''

        puts "#{object['announce'].strip}#{requirements}"

        object['default-commands'] = [] if object['default-commands'].nil?

        puts [
            object['default-commands'].join(" ").green ,
            object['commands'].join(" ").red
        ].select{|s| s.size>0 }.join(" ; ").strip

        print "---> "

        expression = STDIN.gets().strip

        Jupiter::execute(expression, object, displayObjects)
    end

    def self.puts_objects(objects, remaining_number_of_lines, indx)
        return remaining_number_of_lines if objects.size==0
        return remaining_number_of_lines if remaining_number_of_lines<=0
        object = objects.shift
        requirements = RequirementsOperator::getObjectRequirements(object['uuid']).join(", ")
        requirements = requirements.size>0 ? " ( #{requirements} )".green : ''
        indexString = "(#{indx.to_s.rjust(3)})"
        str = "#{indexString} #{object['announce'].lines.first.strip}#{requirements}"
        if object['metric']>=2 then
            str = str.green
        end
        if indx>=100 then
            str = str.yellow
        end
        puts str
        Jupiter::puts_objects(objects,remaining_number_of_lines-Jupiter::vertical_space(str), indx+1)
    end

    def self.putshelp()
        puts "Special General Commands:"
        puts "    help"
        puts "    primary # switch to primary screen"
        puts "    secondary # switch to secondary screen"
        puts "    wave: <wave description>"
        puts "    stream: <stream description>"
        puts "    search <pattern>"
        puts "    on <requirement>"
        puts "    off <requirement> <number of hours>"
        puts "    lib # Invoques the Librarian interactive"
        puts "    <object index> ; command ; ..."
        puts ""
        puts "Special Object Commands:"
        puts "    require <requirement>"
        puts "    >primary"
        puts "    >secondary"
        puts "    command ; ..."
    end

    def self.currentHour()
        Time.new.to_s[0,13]
    end

    def self.currentDay()
        Time.new.to_s[0,10]
    end

    def self.edit_text_using_textmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}  
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)  
    end

    def self.processItemDescriptionPossiblyAsTextEditorInvitation(description)
        if description=='text' then
            edit_text_using_textmate("")
        else
            description
        end
    end
end

# -----------------------------------------------------------------

VirtualScreensManager::init()
RequirementsOperator::init()

# -----------------------------------------------------------------

Thread.new { 
    sleep 60
    Jupiter::email_sync_on_schedule(true)
    loop {
        sleep 1200
        Jupiter::email_sync_on_schedule(false)
    }
}

loop {

    if KeyValueStore::getOrNull(nil, "23ed1630-7c94-47b4-b50e-905a3e5f862a:#{Time.new.to_s[0,10]}").nil? then
        numberOfHours = LucilleCore::askQuestionAnswerAsString("Number of Guardian hours for today (empty default to 5): ")
        if numberOfHours.strip.size==0 then
            numberOfHours = "5"
        end
        numberOfHours = numberOfHours.to_f
        if numberOfHours>0 then
            10.times {|indx|
                item = {
                    "uuid"                => SecureRandom.hex(4),
                    "domain"              => "6596d75b-a2e0-4577-b537-a2d31b156e74",
                    "description"         => "Guardian",
                    "commitment-in-hours" => numberOfHours/10,
                    "timespans"           => [],
                    "is-running"          => false,
                    "last-start-unixtime" => 0,
                    "metric"              => 1 - 0.05*indx
                }
                TimeCommitments::saveItem(item)
            }   
           
        end
        KeyValueStore::set(nil, "23ed1630-7c94-47b4-b50e-905a3e5f862a:#{Time.new.to_s[0,10]}","done")
    end

    puts "# #{ "-" * (Jupiter::screen_width()-3) }"

    if WaveDevOps::archivesGarbageCollection(true)>0 then
        LucilleCore::pressEnterToContinue()
        next
    end

    catalystObjectsAll = CatalystCore::objects()
    catalystObjectsMeetingRequirements = catalystObjectsAll
        .select{ |object| RequirementsOperator::meetRequirements(object['uuid']) }

    primaryScreenObjects = catalystObjectsMeetingRequirements
        .select{ |object| VirtualScreensManager::test(true, object["uuid"]) }

    secondaryScreenObjects = catalystObjectsMeetingRequirements
        .select{ |object| VirtualScreensManager::test(false, object["uuid"]) }

    isPrimaryScreen = JSON.parse(KeyValueStore::getOrDefaultValue(nil, "8dbecdcb-6c37-4a06-840a-8d7c65a0ee40", "[true]"))[0]

    screen_space = Jupiter::screen_height()-6

    objects = isPrimaryScreen ? primaryScreenObjects : secondaryScreenObjects

    if objects.size>0 then
        screen_space = screen_space-Jupiter::vertical_space(objects.first['announce']) 
    end

    screen_space = Jupiter::puts_objects(
        objects.clone, 
        screen_space, 
        0
    )

    if objects.size>0 then
        puts ""
        screen_space = screen_space-1
    end

    flagIntermediaryInformation = false

    
    if ( unsatisfied_requirements = RequirementsOperator::currentlyUnsatisfifiedRequirements() ).size>0 then
        puts "REQUIREMENTS OFF: "+unsatisfied_requirements.join(", ").green
        screen_space = screen_space-1
        flagIntermediaryInformation = true
    end

    if !isPrimaryScreen then
        puts "SECONDARY SCREEN"
        screen_space = screen_space-1
        flagIntermediaryInformation = true
    end

    if flagIntermediaryInformation then
        puts ""
        screen_space = screen_space-1        
    end

    if objects.size>0 then
        Jupiter::putsObjectWithShellDisplay(objects.first, objects.clone)
    else
        puts "Nothing to do (^_^). Sleeping for 60 seconds at #{Time.new.to_s}"
        sleep 60
    end

}


#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Galaxy/local-resources/Ruby-Libraries/LucilleCore.rb"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require_relative "CatalystObjects.rb"

require_relative "Wave-Emails.rb"

require "/Galaxy/local-resources/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::set(repositorypath or nil, key, value)
    KeyValueStore::getOrNull(repositorypath or nil, key)
    KeyValueStore::getOrDefaultValue(repositorypath or nil, key, defaultValue)
    KeyValueStore::destroy(repositorypath or nil, key)
=end

require "/Galaxy/LucilleOS/Librarian/Librarian-Exported-Functions.rb"

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'


# ----------------------------------------------------------------------

# Jupiter::emailSyncOnSchedule(verbose)
# Jupiter::screenHeight()
# Jupiter::screenWidth()
# Jupiter::object2Line_v1(object, indx)
# Jupiter::putshelp()
# Jupiter::editTextUsingTextmate(text)
# Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)
# Jupiter::selectDisplayObjects()
# Jupiter::object2Line_v1(object)
# Jupiter::interactiveDisplayObjectAndProcessCommand(object)
# Jupiter::doExcecute(expression, object)
# Jupiter::main()

class Jupiter
    def self.emailSyncOnSchedule(verbose)
        if LucilleCore::trueNoMoreOftenThanNEverySeconds("29a504de-7985-493b-b809-332357bda3a7", 1200) then
            begin
                newEmailCount = GeneralEmailClient::syncEmailDataWithServer(JSON.parse(IO.read("/Galaxy/DataBank/Catalyst/Wave/Wave-Email-Config/guardian-relay.json")), verbose)
                if newEmailCount>0 then
                    puts "Retrieved #{newEmailCount} new emails"
                end
                OperatorEmailDownloader::syncEmailDataWithServer(JSON.parse(IO.read("/Galaxy/DataBank/Catalyst/Wave/Wave-Email-Config/operator.json")), verbose)
                # We call again so that the clock restarts at the end of the process
                LucilleCore::trueNoMoreOftenThanNEverySecondsReset("29a504de-7985-493b-b809-332357bda3a7")
            rescue
            end
        end    
    end

    def self.screenHeight()
        `/usr/bin/env tput lines`.to_i
    end

    def self.screenWidth()
        `/usr/bin/env tput cols`.to_i
    end

    def self.doExcecute(expression, object)

        if expression == 'help' then
            Jupiter::putshelp()
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == 'top' then
            selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", Jupiter::selectDisplayObjects().first(Jupiter::screenHeight()-3), lambda{ |object| Jupiter::object2Line_v0(object) })
            return if selectedobject.nil?
            Jupiter::interactiveDisplayObjectAndProcessCommand(selectedobject)
            return
        end

        if expression == 'expose' then
            puts JSON.pretty_generate(object)
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == 'info' then
            puts "WaveDevOps::getArchiveSizeInMegaBytes(): #{WaveDevOps::getArchiveSizeInMegaBytes()}"
            puts "Stream item count: #{Stream::getUUIDs().size}"
            puts "x-laniakea item count: #{FIFOQueue::values(nil, "2477F469-6A18-4CAF-838A-E05703585A28").count}"
            LucilleCore::pressEnterToContinue()
            return
        end

        if expression == 'lib' then
            LibrarianExportedFunctions::librarianUserInterface_librarianInteractive()
            return
        end

        if expression.start_with?('+') then
            code = expression
            datetime = Jupiter::datetimeSpecification2232ToDatetime(code)
            DoNotShowUntil::set(object["uuid"], datetime)
            return
        end

        if expression.start_with?('wave:') then
            description = expression[5, expression.size].strip
            description = Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            uuid = SecureRandom.hex(4)
            schedule = WaveSchedules::makeScheduleObjectInteractivelyOrNull()
            folderpath = WaveTimelineUtils::timestring22ToFolderpath(LucilleCore::timeStringL22())
            FileUtils.mkpath folderpath
            File.open("#{folderpath}/catalyst-uuid", 'w') {|f| f.write(uuid) }
            File.open("#{folderpath}/catalyst-description.txt", 'w') {|f| f.write(description) }
            WaveTimelineUtils::writeScheduleToDisk(uuid, schedule)
            return
        end

        if expression.start_with?('stream:') then
            description = expression[7, expression.size].strip
            description = Jupiter::processItemDescriptionPossiblyAsTextEditorInvitation(description)
            folderpath = "#{CATALYST_COMMON_PATH_TO_STREAM_DOMAIN_FOLDER}/strm2/#{LucilleCore::timeStringL22()}"
            FileUtils.mkpath folderpath
            File.open("#{folderpath}/description.txt", 'w') {|f| f.write(description) }
            return
        end

        if expression.start_with?("search") then
            pattern = expression[6,expression.size].strip
            searchobjects = CatalystObjects::all()
                .select{|object| Jupiter::object2Line_v0(object).include?(pattern.downcase) }
            if searchobjects.size>0 then
                loop {
                    selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", searchobjects, lambda{ |object| Jupiter::object2Line_v0(object) })
                    break if selectedobject.nil?
                    Jupiter::interactiveDisplayObjectAndProcessCommand(selectedobject)
                }
            end
            return
        end

        if expression.start_with?("require") then
            requirement = expression[7,expression.size].strip
            RequirementsOperator::addObjectRequirement(object['uuid'],requirement)
            return
        end

        if expression.start_with?("on") then
            command, requirement = expression.split(" ")
            RequirementsOperator::setRequirementOn(requirement)
            return
        end

        if expression.start_with?("off") then
            command, requirement = expression.split(" ")    
            RequirementsOperator::setRequirementOff(requirement)
            return
        end

        if expression.start_with?("show") then
            command, requirement = expression.split(" ")
            requirementObjects = CatalystObjects::all()
                .select{ |object| RequirementsOperator::getObjectRequirements(object['uuid']).include?(requirement) }
                loop {
                    selectedobject = LucilleCore::interactivelySelectEntityFromListOfEntitiesOrNull("object", requirementObjects, lambda{ |object| Jupiter::object2Line_v0(object) })
                    break if selectedobject.nil?
                    Jupiter::interactiveDisplayObjectAndProcessCommand(selectedobject)
                }
            return
        end

        if expression.size > 0 then
            tokens = expression.split(" ").map{|t| t.strip }
            .each{|token| object['command-interpreter'].call(object, token) }
        else
            object['command-interpreter'].call(object, "")
        end
    end

    def self.putshelp()
        puts "Special General Commands:"
        puts "    help"
        puts "    top"
        puts "    search <pattern>"
        puts "    on <requirement>"
        puts "    off <requirement> <number of hours>"
        puts "    show <requirement> # shows all the objects of that requirement"
        puts "    wave: <wave description>"
        puts "    stream: <stream description>"
        puts "    lib # Invoques the Librarian interactive"
        puts ""
        puts "Special Object Commands:"
        puts "    expose # pring the object"
        puts "    require <requirement>"
        puts "    command ..."
        puts "    (+)datetimecode"
    end

    def self.editTextUsingTextmate(text)
      filename = SecureRandom.hex
      filepath = "/tmp/#{filename}"
      File.open(filepath, 'w') {|f| f.write(text)}  
      system("/usr/local/bin/mate \"#{filepath}\"")
      print "> press enter when done: "
      input = STDIN.gets
      IO.read(filepath)  
    end

    def self.processItemDescriptionPossiblyAsTextEditorInvitation(description)
        if description=='text' then
            editTextUsingTextmate("")
        else
            description
        end
    end

    def self.selectDisplayObjects()
        objects = CatalystObjects::all()
            .select{|object| object["metric"] > 0.1 }
            .select{ |object| RequirementsOperator::meetRequirements(object['uuid']) }
        objects = DoNotShowUntil::transform(objects)
            .sort{|o1,o2| o1['metric']<=>o2['metric'] }
            .reverse
        objects
    end

    def self.datetimeSpecification2232ToDatetime(code)
        localsuffix = Time.new.to_s[-5,5]
        if code[0,1]=='+' then
            code = code[1,999]
            if code.index('@') then
                # The first part is an integer and the second HH:MM
                part1 = code[0,code.index('@')]
                part2 = code[code.index('@')+1,999]
                "#{( DateTime.now + part1.to_i ).to_date.to_s} #{part2}:00 #{localsuffix}"
            else
                if code.include?('days') or code.include?('day') then
                    if code.include?('days') then
                        # The entire string is to be interpreted as a number of days from now
                        "#{( DateTime.now + code[0,code.size-4].to_f ).to_time.to_s}"
                    else
                        # The entire string is to be interpreted as a number of days from now
                        "#{( DateTime.now + code[0,code.size-3].to_f ).to_time.to_s}"
                    end

                elsif code.include?('hours') or code.include?('hour') then
                    if code.include?('hours') then
                        ( Time.new + code[0,code.size-5].to_f*3600 ).to_s
                    else
                        ( Time.new + code[0,code.size-4].to_f*3600 ).to_s
                    end
                else
                    raise "error: Jupiter::datetimeSpecification2232ToDatetime 30c6e629-1d71-4777-aad5-de2a40662623"
                end
            end
        else
            # Here we expect "YYYY-MM-DD" or "YYYY-MM-DD@HH:MM" 
            if code.index('@') then
                part1 = code[0,10]
                part2 = code[11,999]
                "#{part1} #{part2}:00 #{localsuffix}"
            else
                part1 = code[0,10]
                part2 = code[11,999]
                "#{part1} 00:00:00 #{localsuffix}"
            end
        end
    end

    def self.object2Line_v0(object)
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{object['announce'].strip}",
            "#{doNotShowUntilAsString}",
        ].join()
    end

    def self.object2Line_v1(object)
        defaultExpressionAsString = object["default-expression"] ? object["default-expression"] : ""
        requirements = RequirementsOperator::getObjectRequirements(object['uuid'])
        requirementsAsString = requirements.size>0 ? " ( #{requirements.join(" ")} )" : ''
        doNotShowUntilAsString = object["do-not-show-until-datetime"] ? " (do not show until: #{object["do-not-show-until-datetime"]})" : ""
        [
            "(#{"%.3f" % object["metric"]})",
            " [#{object["uuid"]}]",
            " #{object['announce'].strip}",
            "#{requirementsAsString.green}",
            "#{doNotShowUntilAsString}",
            " (#{object["commands"].join(" ").red})",
            " \"#{defaultExpressionAsString.green}\""
        ].join()
    end

    def self.interactiveDisplayObjectAndProcessCommand(object)
        print Jupiter::object2Line_v1(object) + " : "
        givenCommand = STDIN.gets().strip
        command = givenCommand.size>0 ? givenCommand : ( object["default-expression"] ? object["default-expression"] : "" )
        Jupiter::doExcecute(command, object)
    end

    def self.main()
        loop {
            WaveDevOps::archivesGarbageCollection(true)
            Jupiter::interactiveDisplayObjectAndProcessCommand(Jupiter::selectDisplayObjects().first)
        }
    end

end

LucilleCore::assert("PascalMiscUtils 1.0", Jupiter::datetimeSpecification2232ToDatetime("+0 days") == "#{DateTime.now.to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.5", Jupiter::datetimeSpecification2232ToDatetime("+1.6 days") == "#{( DateTime.now + 1.6 ).to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.6", Jupiter::datetimeSpecification2232ToDatetime("+0 hours") == "#{DateTime.now.to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.5", Jupiter::datetimeSpecification2232ToDatetime("+0 day") == "#{DateTime.now.to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.5", Jupiter::datetimeSpecification2232ToDatetime("+1.6 day") == "#{( DateTime.now + 1.6 ).to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.6", Jupiter::datetimeSpecification2232ToDatetime("+0 hour") == "#{DateTime.now.to_time.to_s}")
LucilleCore::assert("PascalMiscUtils 1.7", Jupiter::datetimeSpecification2232ToDatetime("+1.6 hour") == "#{( Time.new + 1.6*3600 ).to_s}")
LucilleCore::assert("PascalMiscUtils 2.0", Jupiter::datetimeSpecification2232ToDatetime("+1@12:32") == "#{( DateTime.now + 1 ).to_date.to_s} 12:32:00 #{Time.new.to_s[-5,5]}")
LucilleCore::assert("PascalMiscUtils 3.0", Jupiter::datetimeSpecification2232ToDatetime("2017-06-19@12:32") == "2017-06-19 12:32:00 #{Time.new.to_s[-5,5]}")

# -----------------------------------------------------------------

RequirementsOperator::init()
DoNotShowUntil::init()

# -----------------------------------------------------------------

Thread.new { 
    sleep 60
    Jupiter::emailSyncOnSchedule(true)
    loop {
        sleep 1200
        Jupiter::emailSyncOnSchedule(false)
    }
}

Jupiter::main()

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require_relative "YouTubeVideoStream.rb"

# -------------------------------------------------------------------------

loop {
    break if YouTubeVideoStream::videoFolderpathsAtFolder(YouTubeVideoStream::spaceFolderpath()).size >= 40
    break if YouTubeVideoStream::videoFolderpathsAtFolder(YouTubeVideoStream::energyGridFolderpath()).size == 0
    filepath = YouTubeVideoStream::videoFolderpathsAtFolder(YouTubeVideoStream::energyGridFolderpath()).first
    filename = File.basename(filepath)
    targetFilepath = "#{YouTubeVideoStream::spaceFolderpath()}/#{filename}"
    FileUtils.mv(filepath, targetFilepath)
    break if !File.exists?(targetFilepath)
}

if !File.exists?(YouTubeVideoStream::spaceFolderpath()) then
    puts "[]"
    exit
end

def metric(uuid, indx)
    metric = KeyValueStore::getOrNull(nil, "#{Time.new.to_s[0, 10]}:5a84c282-e6fb-46b7-b23f-2aa38b1aa8a3:#{uuid}")
    if metric then
        return metric.to_f
    else
        metric = 0.70 - indx.to_f/1000
        KeyValueStore::set(nil, "#{Time.new.to_s[0, 10]}:5a84c282-e6fb-46b7-b23f-2aa38b1aa8a3:#{uuid}", metric)
        return metric
    end
end


objects = []

YouTubeVideoStream::videoFolderpathsAtFolder(YouTubeVideoStream::spaceFolderpath())
.first(100)
.map
.with_index{|filepath, indx|
    uuid = YouTubeVideoStream::filepathToVideoUUID(filepath)
    objects << {
        "uuid"           => uuid,
        "contentItem"    => {
            "type" => "line",
            "line" => File.basename(filepath)
        },
        "metric"         => metric(uuid, indx),
        "commands"       => ["delete"],
        "defaultCommand" => "play",
        "shell-redirects" => {
            "play"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/YouTubeVideoStream/catalyst-objects-processing play '#{uuid}'",
            "delete" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/YouTubeVideoStream/catalyst-objects-processing delete '#{uuid}'"
        }
    }
}

puts JSON.generate(objects)


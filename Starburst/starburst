#!/usr/bin/ruby

# encoding: UTF-8

# encoding: UTF-8
require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/YmirEstate.rb"
=begin
    YmirEstate::ymirFilepathEnumerator(pathToYmir)
    YmirEstate::locationBasenameToYmirLocationOrNull(pathToYmir, basename)
    YmirEstate::makeNewYmirLocationForBasename(pathToYmir, basename)
        # If base name is meant to be the name of a folder then folder itself 
        # still need to be created. Only the parent is created.
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Todo/Todo.rb"

require_relative "Starburst.rb"

# --------------------------------------------------------------------

class FileSystemUtils
    # FileSystemUtils::l22()
    def self.l22()
        Time.new.strftime("%Y%m%d-%H%M%S-%6N")
    end
end

def starburstDive(starburstName)
    operations = ["open folder", ">todo"]
    operation = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", operations)
    return if operation.nil?

    if operation == "open folder" then
        folderpath = Starburst::starburstNameToFolderpath(starburstName)
        return if !File.exists?(folderpath)
        system("open '#{folderpath}'")
    end

    if operation == ">todo" then
        folderpath = Starburst::starburstNameToFolderpath(starburstName)
        return if !File.exists?(folderpath)
        Todo::starburstFolderPathToTodoItemPreserveSource(folderpath)
        LucilleCore::removeFileSystemLocation(folderpath)
    end

end

def startburstDiveFolders()
    foldername = LucilleCore::selectEntityFromListOfEntitiesOrNull("starburst", Starburst::foldernames())
    return if foldername.nil?
    starburstDive(foldername)
end

loop {
    system('clear')
    puts "Starburst ðŸ’«"
    options = [
        "Dive Folders",
        "New Folder"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("starburst", options)
    exit if option.nil?
    if option == "Dive Folders" then
        startburstDiveFolders()
        next
    end
    if option == "New Folder" then
        Starburst::interactivelyMakeNewFolderReturnFolderpath()
        next
    end
}

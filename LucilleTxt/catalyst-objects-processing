#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/SectionsType0141.rb"
# SectionsType0141::contentToSections(text)

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/BTreeSets.rb"
=begin
    BTreeSets::values(repositorylocation or nil, setuuid: String): Array[Value]
    BTreeSets::set(repositorylocation or nil, setuuid: String, valueuuid: String, value)
    BTreeSets::getOrNull(repositorylocation or nil, setuuid: String, valueuuid: String): nil | Value
    BTreeSets::destroy(repositorylocation, setuuid: String, valueuuid: String)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Common.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Ping.rb"
=begin 
    Ping::ping(uuid, weight, timespan)
    Ping::pong(uuid)
=end

# --------------------------------------------------------------------

PATH_TO_DESKTOP_FILE = "/Users/pascal/Desktop/Lucille.txt"

def sectionToUUID(section)
    "#{Time.new.to_s[0,10]}-#{Digest::SHA1.hexdigest(section)}"
end

def rewriteLucilleFileWithoutThisSectionUUID(sectionuuid)
    CatalystCommon::copyLocationToCatalystBin(PATH_TO_DESKTOP_FILE)

    parts = IO.read("/Users/pascal/Desktop/Lucille.txt").split('@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b')
    part1 = parts[0].strip
    part2 = parts[1].strip

    sections = SectionsType0141::contentToSections(part2)
        .reject{|section|
            sectionToUUID(section) == sectionuuid
        }

    part2 = sections.map{|section| section.strip }.join("\n\n")
    content = [part1, part2].join("\n\n@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b\n\n")
    File.open(PATH_TO_DESKTOP_FILE, "w"){|f| f.puts(content) }
end

def getSectionFromFileBySectionUUIDOrNull(sectionuuid)
    parts = IO.read("/Users/pascal/Desktop/Lucille.txt").split('@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b')
    part1 = parts[0].strip
    part2 = parts[1].strip

    SectionsType0141::contentToSections(part2)
        .select{|section|
            sectionToUUID(section) == sectionuuid
        }
        .first
end

def timeStringL22()
    "#{Time.new.strftime("%Y%m%d-%H%M%S-%6N")}"
end


def attachItemToProject(projectuuid, item)
    # This function is the copy of the one in Projects.rb
    BTreeSets::set("/Users/pascal/Galaxy/DataBank/Catalyst/Projects/items1", projectuuid, item["uuid"], item)
end

def moveSectionToProjects(section) # Boolean # returns true if the operation was successful
    projects = JSON.parse(`/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/projects-projects`)
    project = LucilleCore::selectEntityFromListOfEntitiesOrNull("project (null to create a new one)", projects, lambda{|project| "-> #{project["description"]}" })
    if project.nil? then
        # We need to create a new project, and commit it to the projects datastore using 
        # priviledge information about the internals of Projects.rb
        puts "-> Choosing project schedule type"
        scheduletype = LucilleCore::selectEntityFromListOfEntities_EnsureChoice("project schedule type", ["standard", "ack"])
        puts "-> Making schedule"
        schedule = nil
        if scheduletype == "standard" then
            schedule = {
                "type"  => "standard"
            }
        end
        if scheduletype == "ack" then
            schedule = {
                "type" => "ack"
            }
        end
        puts JSON.pretty_generate(schedule)
        puts "-> Choosing project description"
        description = LucilleCore::askQuestionAnswerAsString("project description: ")
        puts "-> Making project"
        project = {
            "uuid"         => SecureRandom.uuid,
            "creationtime" => Time.new.to_f,
            "description"  => description,
            "schedule"     => schedule
        }
        puts JSON.pretty_generate(project)
        puts "-> Committing project to project data store"
        File.open("/Users/pascal/Galaxy/DataBank/Catalyst/Projects/projects1/#{project["uuid"]}.json", "w"){|f| f.puts(JSON.pretty_generate(project)) }
    end
    # We are going to make a catalyst standard target and then we are going to add an
    # item to the project, using priviledge informations about the internals of Projects.
    puts "-> Sending section to CoreData"
    filename = "#{timeStringL22()}.txt"
    puts "CoreData filename: #{filename}"
    filepath = "/tmp/#{filename}"
    File.open(filepath, "w") {|f| f.puts(section)}
    CoreDataFile::copyFileToRepository(filepath)
    # The file has been saved to Core Data, we can now make a catalyst standard target
    puts "-> Making Catalyst Standard Target"
    target = {
        "type"     => "file",
        "filename" => filename
    }
    puts JSON.pretty_generate(target)
    # And a 
    puts "-> Making Project Item"
    projectItem = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "description"  => LucilleCore::askQuestionAnswerAsString("project item user friendly description: "),
        "target"       => target
    }
    puts JSON.pretty_generate(projectItem)
    puts "-> Committing project item to project"
    attachItemToProject(project["uuid"], projectItem)
    true
end

# -----------------------------------------------------------------------------

if ARGV[0] == "start" and ARGV[1] then
    sectionuuid = ARGV[1]
    section = getSectionFromFileBySectionUUIDOrNull(sectionuuid)
    exit if section.nil?
    Runner::start("d81479f8-8d0a-473e-aef0-b14cfcaa0ae0:#{sectionuuid}")
end

if ARGV[0] == "stop" and ARGV[1] then
    sectionuuid = ARGV[1]
    section = getSectionFromFileBySectionUUIDOrNull(sectionuuid)
    exit if section.nil?
    timespan = Runner::stop("d81479f8-8d0a-473e-aef0-b14cfcaa0ae0:#{sectionuuid}")
    exit if timespan.nil?
    puts "LucilleTxt: pushing #{timespan.to_i} seconds to ping"
    Ping::ping("lucilletxt:f5c4f321-3a0a-4b58-b3db-a2e940160bad", timespan, 86400) # run items individually but contribute to the group
end

if ARGV[0] == "done" and ARGV[1] then
    sectionuuid = ARGV[1]
    section = getSectionFromFileBySectionUUIDOrNull(sectionuuid)
    if section then
        CatalystCommon::commitTextToCatalystBin("Lucille File Fragment.text", section)
    end
    timespan = Runner::stop("d81479f8-8d0a-473e-aef0-b14cfcaa0ae0:#{sectionuuid}")
    if timespan then
        puts "LucilleTxt: pushing #{timespan.to_i} seconds to ping"
        Ping::ping("lucilletxt:f5c4f321-3a0a-4b58-b3db-a2e940160bad", timespan, 86400) # run items individually but contribute to the group
    end
    rewriteLucilleFileWithoutThisSectionUUID(sectionuuid)
end

if ARGV[0] == "moveToProjects" and ARGV[1] then
    sectionuuid = ARGV[1]
    section = getSectionFromFileBySectionUUIDOrNull(sectionuuid)
    exit if section.nil?
    CatalystCommon::commitTextToCatalystBin("Lucille File Fragment.text", section)
    section = CatalystCommon::editTextUsingTextmate(section)
    # Let's move that thing to projects
    # We either choose an existing project or make a new one
    # Trying first to choose from existing
    status = moveSectionToProjects(section)
    if status then
        rewriteLucilleFileWithoutThisSectionUUID(sectionuuid)
    end
end

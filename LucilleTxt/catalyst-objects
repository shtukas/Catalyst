#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/SectionsType0141.rb"
# SectionsType0141::contentToSection(text)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Ping.rb"
=begin 
    Ping::ping(uuid, weight, timespan)
    Ping::pong(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTarget.rb"
=begin
    CatalystStandardTarget::locationToTargetOrNullIfBasenameIsCurrent(location)
    CatalystStandardTarget::makeNewTargetInteractivelyOrNull()
    CatalystStandardTarget::targetToString(target)
    CatalystStandardTarget::openTarget(target)
=end

# -----------------------------------------------------------------------------

def sectionToUUID(section)
    "#{Time.new.to_s[0,10]}-#{Digest::SHA1.hexdigest(section)}"
end

# -----------------------------------------------------------------------------

getNextLocationAtTheInboxOrNull = lambda {
    Dir.entries("/Users/pascal/Desktop/Lucille-Inbox")
        .reject{|filename| filename[0, 1] == '.' }
        .map{|filename| "/Users/pascal/Desktop/Lucille-Inbox/#{filename}" }
        .first
}

while (location = getNextLocationAtTheInboxOrNull.call()) do
    location2 = "#{File.dirname(location)}/#{SecureRandom.hex(6)}-#{File.basename(location)}"
    FileUtils.mv(location, location2)
    target = CatalystStandardTarget::locationToTargetOrNullIfBasenameIsCurrent(location2)
    raise "error: 23BDC7A7C441" if target.nil?
    item = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "description"  => File.basename(location2),
        "target"       => target
    }
    BTreeSets::set("/Users/pascal/Galaxy/DataBank/Catalyst/Projects/items1", "44caf74675ceb79ba5cc13bafa102509369c2b53", item["uuid"], item)
    LucilleCore::removeFileSystemLocation(location2)
end

# -----------------------------------------------------------------------------

FlamePadding = "              "

objects = []

# -----------------------------------------------------------------------------

content = IO.read("/Users/pascal/Desktop/Lucille.txt")
            .split('@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b').map{|part| part.strip }[0]
            .lines
            .first(10)
            .map{|line| "#{FlamePadding}#{line}"}
            .join()

objects << {
    "uuid"           => "82af928d-5596-4d14-a9bc-dceb0e1f55c0",
    "contentItem"    => {
        "type" => "block",
        "block" => ("#{FlamePadding}ðŸ”¥ Lucille.txt [top]\n\n"+content).green
    },
    "metric"          => 0.76,
    "commands"        => [],
    "defaultCommand"  => "[]",
    "isRunning" => false,
    "shell-redirects" => {

    }
}

# -----------------------------------------------------------------------------

content = IO.read("/Users/pascal/Desktop/Lucille.txt").split('@separation-e3cdf0ec-4119-43d8-8701-a363a74c398b').map{|part| part.strip }[1]

metric = lambda{|_24hTimeInSeconds, indx|
    # We keep the numbers for 24 hours
    # Starts at 0.6 and decrease by 0.2 every hour
    0.60 - (0.2/3600)*_24hTimeInSeconds - indx.to_f/10000
}

SectionsType0141::contentToSections(content)
    .first(10)
    .map
    .with_index{|section, indx|
        sectionuuid = sectionToUUID(section)
        isRunning = Runner::isRunning("d81479f8-8d0a-473e-aef0-b14cfcaa0ae0:#{sectionuuid}")
        objects << {
            "uuid"           => sectionuuid,
            "contentItem"    => {
                "type" => "line-and-body",
                "line" => "Lucille.txt [bottom] #{section.strip.lines.to_a.first}",
                "body" => "Lucille.txt [bottom]\n"+section.strip
            },
            "metric"          => metric.call(Ping::pong("lucilletxt:f5c4f321-3a0a-4b58-b3db-a2e940160bad"), indx),
            "commands"        => ["start", "stop", "done", ">project"],
            "defaultCommand"  => isRunning ? "stop" : "start",
            "isRunning" => isRunning,
            "shell-redirects" => {
                "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing start #{sectionuuid}",
                "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing stop #{sectionuuid}",
                "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing done #{sectionuuid}",
                ">project" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing moveToProjects #{sectionuuid}"
            },
            "pong" => Ping::pong("lucilletxt:f5c4f321-3a0a-4b58-b3db-a2e940160bad")
        }
    }

puts JSON.generate(objects)

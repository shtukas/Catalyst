#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/SectionsType0141.rb"
# SectionsType0141::contentToSection(text)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight, timespan)
    Bank::total(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTarget.rb"
=begin
    CatalystStandardTarget::locationToTargetOrNullIfBasenameIsCurrent(location)
    CatalystStandardTarget::makeNewTargetInteractivelyOrNull()
    CatalystStandardTarget::targetToString(target)
    CatalystStandardTarget::openTarget(target)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DailyNegativeTimes.rb"

# -----------------------------------------------------------------------------

getNextLocationAtTheInboxOrNull = lambda {
    Dir.entries("/Users/pascal/Desktop/Lucille-Inbox")
        .reject{|filename| filename[0, 1] == '.' }
        .map{|filename| "/Users/pascal/Desktop/Lucille-Inbox/#{filename}" }
        .first
}

while (location = getNextLocationAtTheInboxOrNull.call()) do
    location2 = "#{File.dirname(location)}/#{SecureRandom.hex(6)}-#{File.basename(location)}"
    FileUtils.mv(location, location2)
    target = CatalystStandardTarget::locationToTargetOrNullIfBasenameIsCurrent(location2)
    raise "error: 23BDC7A7C441" if target.nil?
    item = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "description"  => File.basename(location2),
        "target"       => target
    }
    BTreeSets::set("/Users/pascal/Galaxy/DataBank/Catalyst/Projects/items1", "44caf74675ceb79ba5cc13bafa102509369c2b53", item["uuid"], item)
    LucilleCore::removeFileSystemLocation(location2)
end

# -----------------------------------------------------------------------------

PATH_TO_DESKTOP_FILE = "/Users/pascal/Desktop/Lucille.txt"

objectuuid = "82af928d-5596-4d14-a9bc-dceb0e1f55c0"

DailyNegativeTimes::addNegativeTimeToBankOrDoNothing(objectuuid, 2*3600, [1, 2, 3, 4, 5, 6]) # 2 hours, Monday to Saturday

content = IO.read(PATH_TO_DESKTOP_FILE)
            .lines
            .select{|line| line.strip.size>0 }
            .first(10)
            .join()

isRunning = Runner::isRunning(objectuuid)

# We keep the numbers for 24 hours
# Starts at 0.6 and decrease by 0.2 every hour
timeDoneLive = Bank::total(objectuuid) + (Runner::runTimeInSecondsOrNull(objectuuid) || 0)
metric = 0.76 - (0.2/3600)*timeDoneLive

isDone = isRunning and ((Runner::runTimeInSecondsOrNull(objectuuid) || 0) > 3600)

objects = [
    {
        "uuid"           => objectuuid,
        "contentItem"    => {
            "type" => "block",
            "block" => content
        },
        "metric"          => metric,
        "commands"        => ["stop"],
        "defaultCommand"  => isRunning ? "[]" : "start",
        "isRunning" => isRunning,
        "isDone" => isDone,
        "shell-redirects" => {
            "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing start",
            "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/catalyst-objects-processing stop",
        }
    }
]

puts JSON.generate(objects)

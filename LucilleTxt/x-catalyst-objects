#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/SectionsType0141.rb"
# SectionsType0141::contentToSection(text)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight, timespan)
    Bank::total(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CatalystStandardTargets.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DailyNegativeTimes.rb"

# -----------------------------------------------------------------------------

getNextLocationAtTheInboxOrNull = lambda {
    Dir.entries("/Users/pascal/Desktop/Lucille-Inbox")
        .reject{|filename| filename[0, 1] == '.' }
        .map{|filename| "/Users/pascal/Desktop/Lucille-Inbox/#{filename}" }
        .first
}

while (location = getNextLocationAtTheInboxOrNull.call()) do
    target = CatalystStandardTargets::locationToFileOrFolderTarget(location)
    item = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "projectname"  => "Inbox",
        "projectuuid"  => "44caf74675ceb79ba5cc13bafa102509369c2b53",
        "description"  => File.basename(location),
        "target"       => target
    }
    puts JSON.pretty_generate(item)
    filepath = "/Users/pascal/Galaxy/DataBank/Catalyst/Todo/items2/#{item["uuid"]}.json"
    File.open(filepath, "w") {|f| f.puts(JSON.pretty_generate(item)) }
    LucilleCore::removeFileSystemLocation(location)
end

# -----------------------------------------------------------------------------

PATH_TO_DESKTOP_FILE = "/Users/pascal/Desktop/Lucille.txt"

objectuuid = "e287b121-9ee9-4fc5-81ba-ef1c956c201b"

DailyNegativeTimes::addNegativeTimeToBankOrDoNothing(objectuuid, 2*3600, [1, 2, 3, 4, 5, 6]) # 2 hours, Monday to Saturday

timeInBank = Bank::total(objectuuid)
isRunning = Runner::isRunning(objectuuid)
metric = 
    if timeInBank < 0 then
        0.70 + 0.05*(1-Math.exp(timeInBank.to_f/3600))
    else
        0.70*Math.exp(-timeInBank.to_f/3600)
    end
metric = isRunning ? 1 : metric
isRunningForLong = (Runner::runTimeInSecondsOrNull(objectuuid) || 0) > 3600
isDone = (isRunning and (timeInBank+(Runner::runTimeInSecondsOrNull(objectuuid) || 0)) >= 0)

content = IO.read(PATH_TO_DESKTOP_FILE)
            .lines
            .select{|line| line.strip.size>0 }
            .first(10)
            .join()

content = [
            "Lucille",
            " (bank: #{(timeInBank.to_f/3600).round(2)} hours)",
            Runner::runTimeInSecondsOrNull(objectuuid) ? " (running for #{(Runner::runTimeInSecondsOrNull(objectuuid).to_f/3600).round(2)} hours)" : "",
            "\n\n",
            content
          ].join()

objects = [
    {
        "uuid"           => objectuuid,
        "contentItem"    => {
            "type" => "block",
            "block" => content
        },
        "metric"          => metric,
        "commands"        => ["stop"],
        "defaultCommand"  => isRunning ? "[]" : "start",
        "isRunning" => isRunning,
        "isRunningForLong" => isRunningForLong,
        "isDone" => isDone,
        "shell-redirects" => {
            "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/x-catalyst-objects-processing start",
            "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/LucilleTxt/x-catalyst-objects-processing stop",
        }
    }
]

puts JSON.generate(objects)

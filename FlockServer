#!/usr/bin/ruby

# encoding: UTF-8

require 'json'

require 'date'

require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')
require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest
require 'find'

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'drb/drb'
require 'thread'

require_relative "Events.rb"

# ----------------------------------------------------------------

$flock = nil

# ----------------------------------------------------------------

# FlockOperator::flockObjects()
# FlockOperator::flockObjectsAsMap()
# FlockOperator::removeObjectIdentifiedByUUID(uuid)
# FlockOperator::removeObjectsFromAgent(agentuuid)
# FlockOperator::addOrUpdateObject(object)
# FlockOperator::addOrUpdateObjects(objects)
# FlockOperator::getDoNotShowUntilDateTimeDistribution()
# FlockOperator::setDoNotShowUntilDateTime(uuid, datetime)

class FlockOperator
    def self.flockObjects()
        $flock["objects"].clone
    end
    
    def self.flockObjectsAsMap()
        map = {}
        FlockOperator::flockObjects().each{|object|
            map[object["uuid"]] = object
        }
        map
    end

    def self.removeObjectIdentifiedByUUID(uuid)
        $flock["objects"].reject!{|o| o["uuid"]==uuid }
    end

    def self.removeObjectsFromAgent(agentuuid)
        $flock["objects"].reject!{|o| o["agent-uid"]==agentuuid }
    end

    def self.addOrUpdateObject(object)
        FlockOperator::removeObjectIdentifiedByUUID(object["uuid"])
        $flock["objects"] << object
    end

    def self.addOrUpdateObjects(objects)
        objects.each{|object|
            FlockOperator::addOrUpdateObject(object)
        }
    end    
    
    def self.getDoNotShowUntilDateTimeDistribution()
        $flock["do-not-show-until-datetime-distribution"]
    end

    def self.setDoNotShowUntilDateTime(uuid, datetime)
        $flock["do-not-show-until-datetime-distribution"][uuid] = datetime
    end
end

# ------------------------------------------------------------------------

# FKVStore::getOrNull(key): value
# FKVStore::getOrDefaultValue(key, defaultValue): value
# FKVStore::set(key, value)

class FKVStore
    def self.getOrNull(key)
        $flock["kvstore"][key]
    end

    def self.getOrDefaultValue(key, defaultValue)
        value = FKVStore::getOrNull(key)
        if value.nil? then
            value = defaultValue
        end
        value
    end

    def self.set(key, value)
        $flock["kvstore"][key] = value
        EventsManager::commitEventToTimeline(EventsMaker::fKeyValueStoreSet(key, value))
    end
end

# ------------------------------------------------------------------------

# FlockDiskIO::loadFromEventsTimeline()

class FlockDiskIO
    def self.loadFromEventsTimeline()
        flock = {}
        flock["objects"] = []
        flock["do-not-show-until-datetime-distribution"] = {}
        flock["kvstore"] = {}
        EventsManager::eventsEnumerator().each{|event| # for the moment we rely on the fact that they are loaded in the right order
            if event["event-type"] == "Catalyst:Catalyst-Object:1" then
                object = event["object"]
                flock["objects"].reject!{|o| o["uuid"]==object["uuid"] }
                flock["objects"] << object
                next
            end
            if event["event-type"] == "Catalyst:Destroy-Catalyst-Object:1" then
                objectuuid = event["object-uuid"]
                flock["objects"].reject!{|o| o["uuid"]==objectuuid }
                next
            end
            if event["event-type"] == "Catalyst:Metadata:DoNotShowUntilDateTime:1" then
                flock["do-not-show-until-datetime-distribution"][event["object-uuid"]] = event["datetime"]
                next
            end
            if event["event-type"] == "Flock:KeyValueStore:Set:1" then
                flock["kvstore"][event["key"]] = event["value"]
                next
            end
            raise "Don't know how to interpret event: \n#{JSON.pretty_generate(event)}"
        }
        $flock = flock
    end
end

class FlockService
    def flockOperator_flockObjects()
        FlockOperator::flockObjects()
    end
    def flockOperator_flockObjectsAsMap()
        FlockOperator::flockObjectsAsMap()
    end 
    def flockOperator_removeObjectIdentifiedByUUID(uuid)
        FlockOperator::removeObjectIdentifiedByUUID(uuid)
    end 
    def flockOperator_removeObjectsFromAgent(agentuuid)
        FlockOperator::removeObjectsFromAgent(agentuuid)
    end 
    def flockOperator_addOrUpdateObject(object)
        FlockOperator::addOrUpdateObject(object)
    end 
    def flockOperator_addOrUpdateObjects(objects)
        FlockOperator::addOrUpdateObjects(objects)
    end 
    def flockOperator_getDoNotShowUntilDateTimeDistribution()
        FlockOperator::getDoNotShowUntilDateTimeDistribution()
    end 
    def flockOperator_setDoNotShowUntilDateTime(uuid, datetime)
        FlockOperator::setDoNotShowUntilDateTime(uuid, datetime)
    end 

    def fKVStore_getOrNull(key)
        FKVStore::getOrNull(key)
    end
    def fKVStore_getOrDefaultValue(key, defaultValue)
        FKVStore::getOrDefaultValue(key, defaultValue)
    end
    def fKVStore_set(key, value)
        FKVStore::set(key, value)
    end

    def flockDiskIO_loadFromEventsTimeline()()
        FlockDiskIO::loadFromEventsTimeline()
    end
end

puts "FlockDiskIO::loadFromEventsTimeline()"
FlockDiskIO::loadFromEventsTimeline()

Thread.new {
    loop {
        sleep 300
        FlockDiskIO::loadFromEventsTimeline()
    }
}

puts "Starting Flock Service"
DRb.start_service("druby://:18171", FlockService.new())
DRb.thread.join


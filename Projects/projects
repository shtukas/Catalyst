#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/CoreData.rb"
=begin

    CoreDataFile::copyFileToRepository(filepath)
    CoreDataFile::filenameToFilepath(filename)
    CoreDataFile::exists?(filename)
    CoreDataFile::openOrCopyToDesktop(filename)

    CoreDataDirectory::copyFolderToRepository(folderpath)
    CoreDataDirectory::foldernameToFolderpath(foldername)
    CoreDataDirectory::openFolder(foldername)

=end

require_relative "Core/Core.rb"

# --------------------------------------------------------------------

loop {
    system("clear")
    puts "Projects üë©‚Äçüíª"
    options = [
        "create new project", 
        "standard projects (dive)",
        "ifcs claims (dive)",
        "ifcs claims (reordering)",
        "ack projects (dive)",
        "fsck"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", options)
    break if option.nil?
    if option == "create new project" then
        puts "Create New Project, not implemented yet"
        LucilleCore::pressEnterToContinue()
    end
    if option == "standard projects (dive)" then
        loop {
            projects = Projects::getStandardProjects().sort{|p1, p2| p1["description"] <=> p2["description"] }
            project = LucilleCore::selectEntityFromListOfEntitiesOrNull("project", projects, lambda{|project| Projects::projectToString(project) })
            break if project.nil?
            Projects::diveProject(project)
        }
    end
    if option == "ifcs claims (dive)" then
        loop {
            ifcsclaim = LucilleCore::selectEntityFromListOfEntitiesOrNull("claim", IfcsClaims::claimsOrdered(), lambda{|claim| IfcsClaims::ifcsClaimToString(claim) })
            break if ifcsclaim.nil?
            IfcsClaims::diveIfcsClaim(ifcsclaim)
        }
    end
    if option == "ifcs claims (reordering)" then
        loop {
            claim = LucilleCore::selectEntityFromListOfEntitiesOrNull("claim", IfcsClaims::claimsOrdered(), lambda{|claim| IfcsClaims::ifcsClaimToString(claim) })
            break if claim.nil?
            position = LucilleCore::askQuestionAnswerAsString("position: ").to_f
            next if position == 0
            claim["position"] = position
            IfcsClaims::saveClaim(claim)
        }
    end
    if option == "ack projects (dive)" then
        loop {
            projects = Projects::getAckProjects().sort{|p1, p2| p1["description"] <=> p2["description"] }
            project = LucilleCore::selectEntityFromListOfEntitiesOrNull("project", projects, lambda{|project| Projects::projectToString(project) })
            break if project.nil?
            Projects::diveProject(project)
        }
    end
    if option == "fsck" then
        puts "-> running fsck"
        Projects::projects()
            .each{|project|
                Fsck::fsckProject(project)
            }
        puts "fsck completed"
        LucilleCore::pressEnterToContinue()
    end
}

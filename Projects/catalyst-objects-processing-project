#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Projects.rb"

# -----------------------------------------------------------------------------

def open_project(project)
    uuid = project["uuid"]
    items = Projects::getItemsByCreationTime(uuid)
    if items.size == 0 then
        puts "There doesn't seen to be any items for this project, aborting open operation."
        LucilleCore::pressEnterToContinue()
        exit
    end
    Projects::openProject(project)
end

if ARGV[0] == "start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Runner::start(project["uuid"])
    open_project(project)
end

if ARGV[0] == "stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    timespan = Runner::stop(project["uuid"])
    exit if timespan.nil?
    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    Ping::ping(uuid, timespan, Projects::pingRetainPeriodInSeconds())
end

if ARGV[0] == "dive" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Projects::diveProject(project)
end

if ARGV[0] == "open" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    puts JSON.pretty_generate(project)
    open_project(project)
end

if ARGV[0] == "ack" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    KeyValueStore::setFlagTrue(nil, "#{Time.new.to_s[0, 10]}:640f0030-0f14-4ece-b1ce-a2e1605f301d:#{uuid }")
end

if ARGV[0] == "done" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    exit if Projects::getItemsByCreationTime(uuid).size > 0 # we do not destroy a project that has some items
    Projects::destroyProject(project)
end

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Projects.rb"

# -----------------------------------------------------------------------------

def projectuuidIsValid(projectuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

def itemuuidIsValid(projectuuid, itemuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

def claimuuidIsValid(claimuuid)
    return false if claimuuid.nil?
    !Projects::getClaimByUuidOrNull(claimuuid).nil?
end

if ARGV[0] == "start" and ARGV[1] then
    claimuuid = ARGV[1]
    exit if !claimuuidIsValid(claimuuid)

    Runner::start(claimuuid)
end

if ARGV[0] == "stop" and ARGV[1] then
    claimuuid = ARGV[1]
    exit if !claimuuidIsValid(claimuuid)

    claim = Projects::getClaimByUuidOrNull(claimuuid)

    timespan = Runner::stop(claimuuid)
    exit if timespan.nil?

    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    puts "Sending #{timespan} seconds to ifcs claim #{claimuuid}"
    Ping::ping(claimuuid, timespan, Projects::pingRetainPeriodInSeconds())

    puts "Sending #{timespan} seconds to project #{claim["projectuuid"]}"
    Ping::ping(claim["projectuuid"], timespan, Projects::pingRetainPeriodInSeconds())

    if claim["type"] == "item" then
        puts "Sending #{timespan} seconds to item #{claim["itemuuid"]}"
        Ping::ping(claim["itemuuid"], timespan, Projects::pingRetainPeriodInSeconds())
    end

end

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require_relative "Core/Core.rb"

# -------------------------------------------------------------------------

def projectItemToCatalystObject(project, item, projectmetric, indx)

    defaultCommand = lambda {|isRunning|
        isRunning ? "stop" : "start"
    }

    itemuuid = item["uuid"]
    isRunning = Runner::isRunning(itemuuid)

    ifcsClaims = IfcsClaims::getClaimsOfTypeProjectByUuid(project["uuid"]) + IfcsClaims::getClaimsOfTypeItemByUuids(project["uuid"], itemuuid)

    contentItem = 
        if ifcsClaims.empty? then
            {
                "type" => "line",
                "line" => Items::itemToString(project, item)
            }
        else
            {
                "type"  => "lines",
                "lines" => [Items::itemToString(project, item)] + ifcsClaims.map{|claim| IfcsClaims::ifcsClaimToString(claim) }
            }
        end

    isRunningForLong = ((Runner::runTimeInSecondsOrNull(itemuuid) || 0) > 3600)
    isDone = isRunning and (Bank::total(project["uuid"])+(Runner::runTimeInSecondsOrNull(project["uuid"]) || 0)) >= 0 and ifcsClaims.all?{|claim| (Bank::total(claim["uuid"])+(Runner::runTimeInSecondsOrNull(claim["uuid"]) || 0)) >= 0 }

    {
        "uuid"           => itemuuid,
        "contentItem"    => contentItem,
        "metric"         => Items::itemMetric(project["uuid"], itemuuid, projectmetric, indx),
        "commands"       => ["start", "open", "stop", "done", "description", "dive", "recast", ">ifcs"],
        "defaultCommand" => defaultCommand.call(isRunning),
        "isRunning"      => isRunning,
        "shell-redirects" => {
            "open"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing open '#{project["uuid"]}' '#{itemuuid}'",
            "done"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing done '#{project["uuid"]}' '#{itemuuid}'",
            "start"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing start '#{project["uuid"]}' '#{itemuuid}'",
            "description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing description '#{project["uuid"]}' '#{itemuuid}'",
            "stop"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing stop '#{project["uuid"]}' '#{itemuuid}'",
            "recast"      => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing recast '#{project["uuid"]}' '#{itemuuid}'",
            ">ifcs"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing make-ifcs-claim '#{project["uuid"]}' '#{itemuuid}'",
            "dive"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/x-catalyst-objects-processing project-dive '#{project["uuid"]}'"
        },
        "isRunningForLong" => isRunningForLong,
        "isDone" => isDone,
        "x-projects:project" => project,
        "x-projects:item" => item,
        "x-projects:ifcsclaims" => ifcsClaims
    }
end

# -------------------------------------------------------------------------

while (link = Mercury::getFirstValueOrNull("F771D7FE-1802-409D-B009-5EB95BA89D86")) do
    target = {
        "type" => "url",
        "url"  => link
    }
    item = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "description"  => link,
        "target"       => target
    }
    Items::attachItemToProject("44caf74675ceb79ba5cc13bafa102509369c2b53", item)
    Mercury::deleteFirstValue("F771D7FE-1802-409D-B009-5EB95BA89D86")
end

IfcsClaims::claimsOrdered()
    .each{|claim|
        uuid = claim["uuid"]
        ordinal = IfcsClaims::getClaimOrdinalOrNull(uuid)
        DailyNegativeTimes::addNegativeTimePerOrdinalToBankOrDoNothing(uuid, DAILY_TOTAL_ORDINAL_TIME_IN_HOURS, ordinal, [1,2,3,4,5,6]) # 3 hours in total, Monday to Saturday
    }

# -------------------------------------------------------------------------

objects = []

Projects::projects()
    .each{|project|
        projectMetric = Projects::projectMetric(project)
        Items::getItemsByCreationTime(project["uuid"])
            .select{|item| DoNotShowUntil::isVisible(item["uuid"]) or Runner::isRunning(item["uuid"]) }
            .reduce([]){|items, item|
                if items.size < 6 then
                    items << item
                else
                    if Runner::isRunning(item["uuid"]) then
                        items << item
                    end
                end
                items
            }
            .map
            .with_index {|item, indx|
                projectItemToCatalystObject(project, item, projectMetric, indx+1)
            }
            .each{|object|
                objects << object
            }
    }

puts JSON.generate(objects)

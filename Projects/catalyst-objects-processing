#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Core/Core.rb"

# -----------------------------------------------------------------------------

def projectuuidIsValid(projectuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

def itemuuidIsValid(projectuuid, itemuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

def processing_done(projectuuid, itemuuid)
    Items::detachItemFromProject(projectuuid, itemuuid)
    
    timespan = Runner::stop(itemuuid)
    exit if timespan.nil?
    
    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    Items::receiveRunTimespan(projectuuid, itemuuid, timespan)

end

def processing_recast(projectuuid, itemuuid)
    timespan = Runner::stop(itemuuid)
    if timespan then
        timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
        Items::receiveRunTimespan(projectuuid, itemuuid, timespan)
    end

    Items::recastItemToOtherProject(projectuuid, itemuuid)
end

if ARGV[0] == "open" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    item = Items::getItemOrNull(projectuuid, itemuuid)
    exit if item.nil?
    puts JSON.pretty_generate(item)
    Items::openItem(item)
end

if ARGV[0] == "start" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    Runner::start(itemuuid)

    if projectuuid == "44caf74675ceb79ba5cc13bafa102509369c2b53" then
        item = Items::getItemOrNull(projectuuid, itemuuid)
        CatalystStandardTarget::openTarget(item["target"])
    else
        if LucilleCore::askQuestionAnswerAsBoolean("-> open ? ", true) then
            item = Items::getItemOrNull(projectuuid, itemuuid)
            CatalystStandardTarget::openTarget(item["target"])
        end
    end

    if LucilleCore::askQuestionAnswerAsBoolean("-> done ? ", false) then
        item = Items::getItemOrNull(projectuuid, itemuuid)
        processing_done(projectuuid, itemuuid)
    else
        if projectuuid == "44caf74675ceb79ba5cc13bafa102509369c2b53" then
            puts "-> Going to recast"
            processing_recast(projectuuid, itemuuid)
        end
    end
end

if ARGV[0] == "stop" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    timespan = Runner::stop(itemuuid)
    exit if timespan.nil?

    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    Items::receiveRunTimespan(projectuuid, itemuuid, timespan)
end

if ARGV[0] == "done" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    processing_done(projectuuid, itemuuid)
end

if ARGV[0] == "description" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    item = Items::getItemOrNull(projectuuid, itemuuid)
    item["description"] = CatalystCommon::editTextUsingTextmate(item["description"])
    Items::attachItemToProject(projectuuid, item)
end

if ARGV[0] == "make-ifcs-claim" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    type = LucilleCore::askQuestionAnswerAsString("type? 'project', 'item' (type exactly): ")
    if type == "project" then
        position = IfcsClaims::nextIfcsPosition()
        IfcsClaims::issueClaimTypeProject(projectuuid, position)
    end
    if type == "item" then
        position = IfcsClaims::nextIfcsPosition()
        IfcsClaims::issueClaimTypeItem(projectuuid, itemuuid, position)
    end
end

if ARGV[0] == "recast" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)
    
    processing_recast(projectuuid, itemuuid)
    puts "item #{itemuuid} recast at #{projectuuid}"
end

if ARGV[0] == "project-dive" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Projects::diveProject(project)
end

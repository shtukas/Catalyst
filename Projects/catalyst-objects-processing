#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Projects.rb"

# -----------------------------------------------------------------------------

if ARGV[0] == "start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Projects::start(project["uuid"])
end

if ARGV[0] == "stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Projects::stop(project["uuid"])
end


if ARGV[0] == "dive" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    Projects::diveProject(project)
end

if ARGV[0] == "ack" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    KeyValueStore::setFlagTrue(nil, "#{Time.new.to_s[0, 10]}:640f0030-0f14-4ece-b1ce-a2e1605f301d:#{uuid }")
end

if ARGV[0] == "destroy-project" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    project = Projects::getProjectByUUIDOrNUll(uuid)
    exit if project.nil?
    exit if Projects::getProjectItemsByCreationTime(uuid).size > 0 # we do not destroy a project that has some items
    Projects::destroy(project)
end


if ARGV[0] == "project-item-open" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if projectuuid.nil?
    itemuuid = ARGV[2]
    exit if itemuuid.nil?
    item = Projects::getProjectItemOrNull(projectuuid, itemuuid)
    exit if item.nil?
    CatalystStandardTarget::openTarget(item["target"])
end

if ARGV[0] == "project-item-done" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if projectuuid.nil?
    itemuuid = ARGV[2]
    exit if itemuuid.nil?
    item = Projects::getProjectItemOrNull(projectuuid, itemuuid)
    exit if item.nil?
    Projects::destroyProjectItem(projectuuid, itemuuid)
end



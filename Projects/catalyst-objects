#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require_relative "Projects.rb"

# -------------------------------------------------------------------------

def ifcsClaimToCatalystObjectOrNull(claim)

    # We return null if the target project or the target item do not exist

    metric = lambda {|uuid|
        return 1 if Runner::isRunning(uuid)
        timeInHours = Ping::pong(uuid).to_f/3600
        return 0 if timeInHours > 0
        0.70 + 0.05*(1-Math.exp(timeInHours))
    }

    if claim["type"] == "project" then
        uuid = claim["uuid"]
        project = Projects::getProjectByUUIDOrNUll(claim["projectuuid"])
        return nil if project.nil?
        isRunning = Runner::isRunning(uuid)
        return {
            "uuid"            => uuid,
            "contentItem"     => {
                "type" => "line",
                "line" => Projects::ifcsClaimToString(claim)
            },
            "metric"          => metric.call(uuid),
            "commands"        => ["open"],
            "defaultCommand"  => isRunning ? "stop" : "start",
            "isRunning"       => isRunning,
            "shell-redirects" => {
                "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-ifcs start '#{uuid}'",
                "stop"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-ifcs stop '#{uuid}'",
                "open"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project open '#{claim["projectuuid"]}'"
            }
        }
    end
    if claim["type"] == "item" then
        uuid = claim["uuid"]
        project = Projects::getProjectByUUIDOrNUll(claim["projectuuid"])
        return nil if project.nil?
        item = Projects::getItemOrNull(claim["projectuuid"], claim["itemuuid"])
        return nil if item.nil?
        isRunning = Runner::isRunning(uuid)
        runningSuffix = isRunning ? " (running for #{(Runner::runTimeInSecondsOrNull(uuid).to_f/3600).round(2)} hour)" : ""
        return {
            "uuid"            => uuid,
            "contentItem"     => {
                "type" => "line",
                "line" => Projects::ifcsClaimToString(claim)
            },
            "metric"          => metric.call(uuid),
            "commands"        => ["open"],
            "defaultCommand"  => isRunning ? "stop" : "start",
            "isRunning"       => isRunning,
            "shell-redirects" => {
                "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-ifcs start '#{uuid}'",
                "stop"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-ifcs stop '#{uuid}'",
                "open"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item open '#{claim["projectuuid"]}' '#{claim["itemuuid"]}'"
            }
        }
    end
    raise "error: 78b605297097"
end

def projectItemToCatalystObjectOrNull(project, item, projectmetric, indx)

    # We return null if the item has a ifcs claim against it

    return nil if !Projects::getIfcsClaimOfTypeItemByUuidsOrNull(project["uuid"], item["uuid"]).nil?

    defaultCommand = lambda {|isRunning|
        isRunning ? "stop" : "start"
    }

    itemuuid = item["uuid"]
    isRunning = Runner::isRunning(itemuuid)

    metric = lambda{|projectuuid, itemuuid, projectmetric, indx|
        return 0 if !Projects::getIfcsClaimOfTypeItemByUuidsOrNull(projectuuid, itemuuid).nil?
        projectmetric - indx.to_f/1000
    }

    {
        "uuid"           => itemuuid,
        "contentItem"    => {
            "type" => "line",
            "line" => "[#{project["description"].yellow}] #{Projects::itemToString(item)}"
        },
        "metric"         => metric.call(project["uuid"], itemuuid, projectmetric, indx),
        "commands"       => ["start", "open", "stop", "done", "description", "project", "recast", ">ifcs"],
        "defaultCommand" => defaultCommand.call(isRunning),
        "isRunning"      => isRunning,
        "shell-redirects" => {
            "open"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item open '#{project["uuid"]}' '#{itemuuid}'",
            "done"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item done '#{project["uuid"]}' '#{itemuuid}'",
            "start"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item start '#{project["uuid"]}' '#{itemuuid}'",
            "description" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item description '#{project["uuid"]}' '#{itemuuid}'",
            "stop"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item stop '#{project["uuid"]}' '#{itemuuid}'",
            "recast"      => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item recast '#{project["uuid"]}' '#{itemuuid}'",
            ">ifcs"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item make-ifcs-claim '#{project["uuid"]}' '#{itemuuid}'",
            "project"     => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project dive '#{project["uuid"]}'"
        },
        "x-project:project" => project,
        "x-project:item" => item,
        "x-project:project-metric" => projectmetric
    }
end

def projectToCatalystObject(project)

    metric = lambda {|uuid|
        uuid = project["uuid"]
        return 1 if Runner::isRunning(uuid)
        return 0 if project["schedule"]["type"] == "ack"
        return 0.77 if uuid == "44caf74675ceb79ba5cc13bafa102509369c2b53"
        timeInDays = Ping::pong(uuid).to_f/86400
        return 0.2 + 0.46*Math.exp(-timeInDays)
    }

    commands = lambda{|project|
        (["dive"] + [ Projects::getItemsByCreationTime(project["uuid"]).size == 0 ? "done" : nil ]).compact
    }

    defaultCommand = lambda {|project|
        uuid = project["uuid"]
        if project["schedule"]["type"] == "standard" then
            return (Runner::isRunning(uuid) ? "stop" : "start")
        end
        if project["schedule"]["type"] == "ack" then
            return "ack"
        end
        raise "Projects: b95c4fcb"
    }

    uuid = project["uuid"]
    isRunning = Runner::isRunning(uuid)

    {
        "uuid"           => uuid,
        "contentItem"    => {
            "type" => "line",
            "line" => Projects::projectToString(project)
        },
        "metric"         => metric.call(project),
        "commands"       => commands.call(project),
        "defaultCommand" => defaultCommand.call(project),
        "isRunning" => isRunning,
        "shell-redirects" => {
            "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project start '#{uuid}'",
            "stop"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project stop '#{uuid}'",
            "dive"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project dive '#{uuid}'",
            "ack"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project ack '#{uuid}'",
            "open"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project open '#{uuid}'",
            "done"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project done '#{uuid}'"
        },
        "x-project:project" => project,
        "x-project:pong" => Ping::pong(uuid)
    }
end

# -------------------------------------------------------------------------

while (link = Mercury::getFirstValueOrNull("F771D7FE-1802-409D-B009-5EB95BA89D86")) do
    target = {
        "type" => "url",
        "url"  => link
    }
    item = {
        "uuid"         => SecureRandom.uuid,
        "creationtime" => Time.new.to_f,
        "description"  => link,
        "target"       => target
    }
    Projects::attachItemToProject("44caf74675ceb79ba5cc13bafa102509369c2b53", item)
    Mercury::deleteFirstValue("F771D7FE-1802-409D-B009-5EB95BA89D86")
end

Projects::distributeIfcsPenatiesIfNotDoneAlready()

# -------------------------------------------------------------------------

objects = []

Projects::projects()
    .each{|project|
        probject = projectToCatalystObject(project)
        iobjects = Projects::getItemsByCreationTime(project["uuid"])
            .select{|item| DoNotShowUntil::isVisible(item["uuid"]) or Runner::isRunning(item["uuid"]) }
            .first(project["uuid"] == "44caf74675ceb79ba5cc13bafa102509369c2b53" ? 100 : 6)
            .map
            .with_index {|item, indx|
                projectItemToCatalystObjectOrNull(project, item, probject["metric"], indx+1)
            }
            .compact
        iobjects.each{|object|
            objects << object
        }
        if iobjects.size == 0 then
            objects << probject
        end
    }

Projects::ifcsClaimsOrdered()
    .first(4) # Guardian and 3 others
    .each{|claim|
        object = ifcsClaimToCatalystObjectOrNull(claim)
        next if object.nil?
        objects << object
    }

puts JSON.generate(objects)

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require_relative "Projects.rb"

# -------------------------------------------------------------------------

def projectItemMetric(projectuuid, projectAlgebraicTimeInSeconds, indx, itemIsRunning)
    return 1 if itemIsRunning
    Projects::algebraicTimeToMetric(projectuuid, projectAlgebraicTimeInSeconds) - indx.to_f/1000
end

def projectItemDefaultCommand(isRunning)
    isRunning ? "stop" : "start+open"
end

def projectItemToCatalystObject(project, projectAlgebraicTimeInSeconds, item, indx)
    itemuuid = item["uuid"]
    isRunning = Runner::isRunning(itemuuid)
    {
        "uuid"           => itemuuid,
        "contentItem"    => {
            "type" => "line",
            "line" => "[project: #{project["description"].yellow}] item: #{Projects::projectItemToString(item)}"
        },
        "metric"         => projectItemMetric(project["uuid"], projectAlgebraicTimeInSeconds, indx, isRunning),
        "commands"       => ["start", "open", "stop", "done", "description", "recast", "project"],
        "defaultCommand" => projectItemDefaultCommand(isRunning),
        "isRunning"      => isRunning,
        "shell-redirects" => {
            "open"         => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item open '#{project["uuid"]}' '#{itemuuid}'",
            "done"         => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item done '#{project["uuid"]}' '#{itemuuid}'",
            "start"        => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item start '#{itemuuid}'",
            "start+open"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item start+open '#{project["uuid"]}' '#{itemuuid}'",
            "description"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item description '#{project["uuid"]}' '#{itemuuid}'",            
            "stop"         => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item stop '#{project["uuid"]}' '#{itemuuid}'",
            "recast"       => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-item recast '#{project["uuid"]}' '#{itemuuid}'",
            "project" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project dive '#{project["uuid"]}'"
        }
    }
end

def projectCommands(project)
    (["dive"] + [ Projects::getProjectItemsByCreationTime(project["uuid"]).size == 0 ? "done" : nil ]).compact
end

def projectDefaultCommand(project)
    uuid = project["uuid"]
    if project["schedule"]["type"] == "standard" then
        return (Runner::isRunning(uuid) ? "stop" : "start")
    end
    if project["schedule"]["type"] == "ifcs" then
        return (Runner::isRunning(uuid) ? "stop" : "start")
    end
    if project["schedule"]["type"] == "ack" then
        return "ack"
    end
    raise "Projects: b95c4fcb"
end

def projectToCatalystObject(project)
    uuid = project["uuid"]
    isRunning = Runner::isRunning(uuid)
    {
        "uuid"           => uuid,
        "contentItem"    => {
            "type" => "line",
            "line" => Projects::projectToString(project)
        },
        "metric"         => Projects::projectMetric(project),
        "commands"       => projectCommands(project),
        "defaultCommand" => projectDefaultCommand(project),
        "isRunning" => isRunning,
        "shell-redirects" => {
            "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project start '#{uuid}'",
            "stop"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project stop '#{uuid}'",
            "dive"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project dive '#{uuid}'",
            "ack"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project ack '#{uuid}'",
            "done"  => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing-project done '#{uuid}'"
        }
    }
end

def projectItemsCatalystObjects(project)
    projectAlgebraicTimeInSeconds = Projects::getProjectAlgebraicTime(project["uuid"])
    Projects::getProjectItemsByCreationTime(project["uuid"])
        .select{|item| DoNotShowUntil::isVisible(item["uuid"]) }
        .first(6)
        .map
        .with_index {|item, indx|
            projectItemToCatalystObject(project, projectAlgebraicTimeInSeconds, item, indx+1)
        }
end

Projects::distributeDayTimePenatiesIfNotDoneAlready()

objects = []

Projects::projects()
    .select{|project| DoNotShowUntil::isVisible(project["uuid"]) }
    .each{|project| 
        objects << projectToCatalystObject(project)
        projectItemsCatalystObjects(project)
            .each{|object|
                objects << object
            }
    }

puts JSON.generate(objects)

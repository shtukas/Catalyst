#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require_relative "Projects.rb"

# -------------------------------------------------------------------------


def metric(item)
    uuid = item["uuid"]
    return 1 if Projects::isRunning(uuid)
    if item["schedule"]["type"] == "standard" then
        timepoints = Projects::getTimepointsOverThePastNSeconds(uuid, 86400*7)
        timeInHours = timepoints.map{|point| point["timespan"] }.inject(0, :+).to_f/3600
        return 0.2 + 0.4 * Math.exp(-timeInHours)
    end
    raise "Projects: 59c680f3"
    # KeyValueStore::flagIsTrue(nil, "#{Time.new.to_s[0, 10]}:640f0030-0f14-4ece-b1ce-a2e1605f301d:#{uuid}") ? 0.10 : 0.60
end

def defaultCommand(item)
    uuid = item["uuid"]
    if item["schedule"]["type"] == "standard" then
        return (Projects::isRunning(uuid) ? "stop" : "start")
    end
    raise "Projects: b95c4fcb"
end

def kickerText(item)
    uuid = item["uuid"]
    if item["schedule"]["type"] == "standard" then
        timepoints = Projects::getTimepoints(uuid)
        timeInHours = timepoints.map{|point| point["timespan"] }.inject(0, :+).to_f/3600
        return "[project / standard / #{"%7.2f" % timeInHours} hours]"
    end
    raise "Projects: f40a0f00"
end

objects = Projects::items()
    .map{|item|
        uuid = item["uuid"]
        isRunning = Projects::isRunning(uuid)
        object = {
            "uuid"           => uuid,
            "contentItem"    => {
                "type" => "line",
                "line" => "#{kickerText(item)} #{item["description"]}"
            },
            "metric"         => metric(item),
            "commands"       => [],
            "defaultCommand" => defaultCommand(item),
            "isRunning" => isRunning,
            "shell-redirects" => {
                "ack" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing ack '#{uuid}'",
                "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing start '#{uuid}'",
                "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing stop '#{uuid}'"
            }
        }
    }

puts JSON.generate(objects)

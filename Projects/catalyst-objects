#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require_relative "Projects.rb"

# -------------------------------------------------------------------------

def projectMetric(project)
    uuid = project["uuid"]
    return 0.99 if Runner::isRunning(uuid) 
        # 0.99 because the first item of the project will be 1, this is an easy way 
        # to ensure project object in second position (at least not the first position)
    if project["schedule"]["type"] == "standard" then
        return 0.2 + 0.4 * Math.exp(-Projects::getStoredRunTimespanOverThePastNSeconds(uuid, 86400*7).to_f/3600)
    end
    if project["schedule"]["type"] == "ifcs" then
        return Projects::ifcsMetric(uuid)
    end
    if project["schedule"]["type"] == "ack" then
        return Projects::projectMetric(project)
    end
    raise "Projects: 59c680f3"
    # KeyValueStore::flagIsTrue(nil, "#{Time.new.to_s[0, 10]}:640f0030-0f14-4ece-b1ce-a2e1605f301d:#{uuid}") ? 0.10 : 0.60
end

def projectCommands(project)
    (["dive"] + [ Projects::getProjectItemsByCreationTime(project["uuid"]).size == 0 ? "done" : nil ]).compact
end

def projectDefaultCommand(project)
    uuid = project["uuid"]
    if project["schedule"]["type"] == "standard" then
        return (Runner::isRunning(uuid) ? "stop" : "start")
    end
    if project["schedule"]["type"] == "ifcs" then
        return (Runner::isRunning(uuid) ? "stop" : "start")
    end
    if project["schedule"]["type"] == "ack" then
        return "ack"
    end
    raise "Projects: b95c4fcb"
end

def projectToCatalystObject(project)
    uuid = project["uuid"]
    isRunning = Runner::isRunning(uuid)
    {
        "uuid"           => uuid,
        "contentItem"    => {
            "type" => "line",
            "line" => Projects::projectToString(project)
        },
        "metric"         => projectMetric(project),
        "commands"       => projectCommands(project),
        "defaultCommand" => projectDefaultCommand(project),
        "isRunning" => isRunning,
        "shell-redirects" => {
            "start" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing start '#{uuid}'",
            "stop" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing stop '#{uuid}'",
            "dive" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing dive '#{uuid}'",
            "ack" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing ack '#{uuid}'",
            "done" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Projects/catalyst-objects-processing done '#{uuid}'"
        }
    }
end

Projects::distributeDayTimeCommitmentsIfNotDoneAlready()

def projectToCatalystObjects(project)
    objects = []
    objects << projectToCatalystObject(project)
    if Runner::isRunning(project["uuid"]) then
        Projects::getProjectItemsByCreationTime(project["uuid"])
            .select{|item| DoNotShowUntil::isVisible(item["uuid"]) }
            .first(6)
            .map
            .with_index {|item, indx|
                objects << Projects::projectItemToCatalystObject(project, item, 1, indx+1) # 1 because we are running
            }
    end
    objects
end

objects = []

Projects::getStandardProjects()
    .select{|project| DoNotShowUntil::isVisible(project["uuid"]) }
    .each{|project| 
        projectToCatalystObjects(project)
            .each{|object|
                objects << object
            }
    }

Projects::getIFCSProjects()
    .select{|project| DoNotShowUntil::isVisible(project["uuid"]) }
    .reduce([]){|projects, project|
        if Runner::isRunning(project["uuid"]) then
            projects + [ project ]
        else
            if projects.size < 5 then
                projects + [ project ]
            else
                projects
            end
        end 
    }
    .each{|project| 
        projectToCatalystObjects(project)
            .each{|object|
                objects << object
            }
    }

Projects::getAckProjects()
    .select{|project| DoNotShowUntil::isVisible(project["uuid"]) }
    .each{|project| 
        projectToCatalystObjects(project)
            .each{|object|
                objects << object
            }
    }

puts JSON.generate(objects)

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Software-Common/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

# --------------------------------------------------------------------

require_relative "Projects.rb"

# -----------------------------------------------------------------------------

def projectuuidIsValid(projectuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

def itemuuidIsValid(projectuuid, itemuuid)
    return false if projectuuid.nil?
    !Projects::getProjectByUUIDOrNUll(projectuuid).nil?
end

if ARGV[0] == "open" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    item = Projects::getProjectItemOrNull(projectuuid, itemuuid)
    CatalystStandardTarget::openTarget(item["target"])
end

if ARGV[0] == "start" and ARGV[1] then
    itemuuid = ARGV[1]
    exit if !itemuuidIsValid(projectuuid, itemuuid)
    Runner::start(itemuuid)
end

if ARGV[0] == "start+open" and ARGV[1] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    Runner::start(itemuuid)
    item = Projects::getProjectItemOrNull(projectuuid, itemuuid)
    CatalystStandardTarget::openTarget(item["target"])
end

if ARGV[0] == "stop" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    timespan = Runner::stop(itemuuid)
    exit if timespan.nil?

    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    puts "Sending #{timespan} seconds to project #{projectuuid}"
    Projects::setProjectAlgebraicTime(projectuuid, timespan)
end

if ARGV[0] == "done" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)

    Projects::detachProjectItemFromProject(projectuuid, itemuuid)
    
    timespan = Runner::stop(itemuuid)
    exit if timespan.nil?
    
    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    puts "Sending #{timespan} seconds to project #{projectuuid}"
    Projects::setProjectAlgebraicTime(projectuuid, timespan)
end

if ARGV[0] == "recast" and ARGV[1] and ARGV[2] then
    projectuuid = ARGV[1]
    exit if !projectuuidIsValid(projectuuid)

    itemuuid = ARGV[2]
    exit if !itemuuidIsValid(projectuuid, itemuuid)
    
    timespan = Runner::stop(itemuuid)
    if timespan then
        timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
        puts "Sending #{timespan} seconds to project #{projectuuid}"
        Projects::setProjectAlgebraicTime(projectuuid, timespan)
    end

    Projects::recastItem(projectuuid, itemuuid)
end

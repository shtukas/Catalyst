#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Quark.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::value(uuid)
=end

require_relative "Asteroids.rb"

# --------------------------------------------------------------------

loop {
    system("clear")
    puts "Asteroids 👩‍💻"
    options = [
        "create new asteroid",
        "projects dive",
        "time report"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", options)
    break if option.nil?
    if option == "create new asteroid" then
        target = Quark::issueNewQuarkInteractivelyOrNull()
        next if target.nil?
        orbitalname = Asteroids::selectOrbitalnameInteractivelyOrNull()
        orbitaluuid = nil
        if orbitalname.nil? then
            orbitalname = LucilleCore::askQuestionAnswerAsString("orbital name: ")
            orbitaluuid = SecureRandom.uuid
        else
            orbitaluuid = Asteroids::orbitalname2orbitaluuidOrNUll(orbitalname)
            # We are not considering the case null
        end
        description = LucilleCore::askQuestionAnswerAsString("asteroid description: ")
        item = Asteroids::issueNew(orbitalname, orbitaluuid, description, target)
        puts JSON.pretty_generate(item)
    end
    if option == "projects dive" then
        loop {
            puts "-> Asteroids dive"
            orbitalname = LucilleCore::selectEntityFromListOfEntitiesOrNull("project name", Asteroids::orbitalnames())
            break if orbitalname.nil?
            loop {
                puts "-> Visiting project '#{orbitalname}'"
                items = Asteroids::asteroidsForOrbitalname(orbitalname)
                break if items.empty? # happens when we loop bacl if the one item of the project was deleted
                item = LucilleCore::selectEntityFromListOfEntitiesOrNull("item", items, lambda{|item| Asteroids::asteroidToString(item) })
                break if item.nil?
                Asteroids::asteroidDive(item)
            }
        }
    end
    if option == "time report" then
        items = Asteroids::projectsTimeDistribution()
        d = items.map{|item| item["orbitalname"].size }.max
        items
            .sort{|i1, i2| i1["timeInHours"] <=> i2["timeInHours"] }
            .each{|item|
                puts "#{item["orbitalname"].ljust(d+1)} #{"%8.2f" % item["timeInHours"]} hours"
            }
        LucilleCore::pressEnterToContinue()
    end
}

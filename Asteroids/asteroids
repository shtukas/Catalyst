#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'find'

require 'json'
# JSON.pretty_generate

require 'time'

require 'colorize'

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(5) #=> "eb693"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"
# LucilleCore::askQuestionAnswerAsString(question)
# LucilleCore::askQuestionAnswerAsBoolean(announce, defaultValue = nil)

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation, key)
    KeyValueStore::setFlagFalse(repositorylocation, key)
    KeyValueStore::flagIsTrue(repositorylocation, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Nyx/Quarks.rb"

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::value(uuid)
=end

require_relative "Asteroids.rb"

# --------------------------------------------------------------------

loop {
    system("clear")
    options = [
        "make new asteroid",
        "dive asteroids",
        "cache listing uuids"
    ]
    option = LucilleCore::selectEntityFromListOfEntitiesOrNull("operation", options)
    break if option.nil?
    if option == "make new asteroid" then
        asteroid = Asteroids::issueAsteroidInteractivelyOrNull()
        next if asteroid.nil?
        puts JSON.pretty_generate(asteroid)
    end
    if option == "dive asteroids" then
        loop {
            asteroid = LucilleCore::selectEntityFromListOfEntitiesOrNull("asteroid", Asteroids::asteroids(), lambda{|asteroid| Asteroids::asteroidToString(asteroid) })
            break if asteroid.nil?
            Asteroids::asteroidDive(asteroid)
        }
    end
    if option == "cache listing uuids" then
        Asteroids::cacheWorkingUUIDs()
        ProgrammableBooleans::resetTrueNoMoreOften("5a56e54d-c24d-4ae9-a8ae-f95729bd010f")
    end
    
}

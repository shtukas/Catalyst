#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'date'
require 'colorize'

require 'securerandom'
# SecureRandom.hex    #=> "eb693ec8252cd630102fd0d0fb7c3485"
# SecureRandom.hex(4) #=> "eb693123"
# SecureRandom.uuid   #=> "2d931510-d99f-494a-8c67-87feb05e1594"

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require 'digest/sha1'
# Digest::SHA1.hexdigest 'foo'
# Digest::SHA1.file(myFile).hexdigest

require 'find'

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/DoNotShowUntil.rb"
#    DoNotShowUntil::setUnixtime(uid, unixtime)
#    DoNotShowUntil::isVisible(uid)

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Mercury.rb"
=begin
    Mercury::postValue(channel, value)

    Mercury::discardFirstElementsToEnforeQueueSize(channel, size)
    Mercury::discardFirstElementsToEnforceTimeHorizon(channel, unixtime)

    Mercury::getQueueSize(channel)
    Mercury::getAllValues(channel)

    Mercury::getFirstValueOrNull(channel)
    Mercury::deleteFirstValue(channel)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require_relative "TimePods.rb"

# -------------------------------------------------------------------------

# Garbage Collection
NyxObjects::getObjects("timepod-99a06996-dcad-49f5-a0ce-02365629e4fc")
    .each{|pod|
        if !TimePods::timePodIsStillRelevant(pod) then
            NyxObjects::destroy(pod["uuid"])
        end
    }

# LucilleTxt1
DailyTimes::putTimeToBankNoOftenThanOnceADay("e287b121-9ee9-4fc5-81ba-ef1c956c202b", -2*3600, [1, 2, 3, 4, 5, 6]) # 2 hours, Monday to Saturday

# Guardian Work
DailyTimes::putTimeToBankNoOftenThanOnceADay("5c81927e-c4fb-4f8d-adae-228c346c8c7d", -6*3600, [1, 2, 3, 4, 5]) # 6 hours, Monday to Friday


NyxObjects::getObjects("timepod-99a06996-dcad-49f5-a0ce-02365629e4fc")
    .select{|pod| ["bank-account"].include?(pod["engine"]["type"]) }
    .sort{|i1, i2| i1["creationUnixtime"] <=> i2["creationUnixtime"] }
    .first(3)
    .each{|pod|
        DailyTimes::putTimeToBankNoOftenThanOnceADay(pod["uuid"], -(2.to_f/3)*3600, [1, 2, 3, 4, 5, 6])
    }

# -------------------------------------------------------------------------

objects = []

NyxObjects::getObjects("timepod-99a06996-dcad-49f5-a0ce-02365629e4fc")
    .each{|pod|

        defaultCommand = lambda {|isRunning|
            isRunning ? "stop" : "start"
        }

        uuid = pod["uuid"]
        isRunning = Runner::isRunning(uuid)
        isRunningForLong = ((Runner::runTimeInSecondsOrNull(uuid) || 0) > 3600)

        objects << {
            "uuid"           => uuid,
            "application"    => "TimePods",
            "contentItem"    => {
                "type" => "line",
                "line" => TimePods::toString(pod)
            },
            "metric"         => isRunning ? 0.999 : TimePods::metric(pod), # 0.999 because it may have started something else
            "commands"       => ["start", "stop", "destroy"],
            "defaultCommand" => defaultCommand.call(isRunning),
            "isRunning"      => isRunning,
            "isRunningForLong" => isRunningForLong,
            "shell-redirects" => {
                "start"   => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/TimePods/x-catalyst-objects-processing start '#{uuid}'",
                "stop"    => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/TimePods/x-catalyst-objects-processing stop '#{uuid}'",
                "destroy" => "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/TimePods/x-catalyst-objects-processing destroy '#{uuid}'",
            },
            "x-running-for:" => Runner::runTimeInSecondsOrNull(uuid)
        }
    }

puts JSON.generate(objects)

#!/Users/pascal/.rvm/rubies/ruby-2.5.1/bin/ruby

# encoding: UTF-8

require 'json'
# JSON.pretty_generate(object)

require 'fileutils'
# FileUtils.mkpath '/a/b/c'
# FileUtils.cp(src, dst)
# FileUtils.mv 'oldname', 'newname'
# FileUtils.rm(path_to_image)
# FileUtils.rm_rf('dir/to/remove')

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/LucilleCore.rb"

require "/Users/pascal/Galaxy/LucilleOS/Libraries/Ruby-Libraries/KeyValueStore.rb"
=begin
    KeyValueStore::setFlagTrue(repositorylocation or nil, key)
    KeyValueStore::setFlagFalse(repositorylocation or nil, key)
    KeyValueStore::flagIsTrue(repositorylocation or nil, key)

    KeyValueStore::set(repositorylocation or nil, key, value)
    KeyValueStore::getOrNull(repositorylocation or nil, key)
    KeyValueStore::getOrDefaultValue(repositorylocation or nil, key, defaultValue)
    KeyValueStore::destroy(repositorylocation or nil, key)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Runner.rb"
=begin 
    Runner::isRunning(uuid)
    Runner::runTimeInSecondsOrNull(uuid) # null | Float
    Runner::start(uuid)
    Runner::stop(uuid) # null | Float
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Ping.rb"
=begin 
    Ping::put(uuid, weight)
    Ping::totalOverTimespan(uuid, timespanInSeconds)
    Ping::totalToday(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/Bank.rb"
=begin 
    Bank::put(uuid, weight)
    Bank::total(uuid)
=end

require "/Users/pascal/Galaxy/LucilleOS/Applications/Catalyst/Catalyst/A10495.rb"

# --------------------------------------------------------------------

require_relative "TimePods.rb"

# -----------------------------------------------------------------------------

def stop(uuid)
    timespan = Runner::stop(uuid)
    return if timespan.nil?
    timespan = [timespan, 3600*2].min # To avoid problems after leaving things running
    puts "[timepod] Bank: putting #{timespan.round(2)} secs into pod (#{uuid})"
    Bank::put(uuid, timespan)

    puts "[timepod] Ping: putting #{timespan.round(2)} secs into catalyst measured times"
    Ping::put("DC9DF253-01B5-4EF8-88B1-CA0250096471", timespan)
end

if ARGV[0] == "start" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    TimePods::startPod(uuid)
end

if ARGV[0] == "stop" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    pod = NyxObjects::getOrNull(uuid)
    exit if pod.nil?

    stop(uuid)
end

if ARGV[0] == "destroy" and ARGV[1] then
    uuid = ARGV[1]
    exit if uuid.nil?
    pod = NyxObjects::getOrNull(uuid)
    exit if pod.nil?

    stop(uuid)
    NyxObjects::destroy(uuid)
end
